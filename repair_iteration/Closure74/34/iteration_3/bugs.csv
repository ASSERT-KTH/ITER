bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  right  =  left.getLastChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	5	None	replace
2	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  right  =  n.getLastChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	5	None	replace
3	[BUG]  [BUGGY]  Node  right  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  Node  right  =  right.getFirstChild();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  right  =  right.getFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	5	None	replace
4	[BUG]  [BUGGY]  Node  right  =  right.getLastChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  Node  right  =  right.getLastChild();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  right  =  right.getLastChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	5	None	replace
5	[BUG]  [BUGGY]  Node  right  =  left.getNext()  &&  rightLiteral;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  Node  right  =  left.getNext()  &&  rightLiteral;  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  right  =  left.getNext()  &&  rightLiteral;	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	9	None	replace
6	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  Node  right  =  n.getNext();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  right  =  n.getNext();	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	9	None	replace
7	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  Node  right  =  left.getNext()  -  1;  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  right  =  left.getNext()  -  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	9	None	replace
8	[BUG]  [BUGGY]  Node  right  =  right.getNext();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  Node  right  =  right.getNext();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  right  =  right.getNext();	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	9	None	replace
9	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    ||    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	18	None	replace
10	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    ||    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	18	None	replace
11	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    ||    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	18	None	replace
12	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType())||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType())||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType())||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    ||    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	18	None	replace
13	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstCh  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstCh  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstCh	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    left.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    	non-compiled	[CE]  orphaned  case	36	None	replace
14	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    left.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    	non-compiled	[CE]  orphaned  case	36	None	replace
15	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    left.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	32	None	replace
16	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  result  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  result  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  result  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    left.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	32	None	replace
17	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType())||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType())||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType())||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    ||    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	22	None	replace
18	[BUG]  [BUGGY]  boolean  undefinedRight  =  result  ||(Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  result  ||(Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  result  ||(Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    ||    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	22	None	replace
19	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    ||    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	14	None	replace
20	[BUG]  [BUGGY]  boolean  undefinedRight  =  result  ||(Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  result  ||(Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  result  ||(Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    ||    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	14	None	replace
21	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChil    	non-compiled	[CE]  orphaned  case	23	None	replace
22	[BUG]  [BUGGY]  &&  left.getString().equals( "undefined "))  {  return  op;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  left.getString().equals( "undefined "))  {  return  op;  }  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  left.getString().equals( "undefined "))  {  return  op;  }	  &&    left.getString().equals(   "undefined   "))    {    return    n;    }    	non-compiled	[CE]  orphaned  case	29	None	replace
23	[BUG]  [BUGGY]  ||  left.getString().equals( "undefined   "))  {  return  n;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  ||  left.getString().equals( "undefined   "))  {  return  n;  }  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	||  left.getString().equals( "undefined   "))  {  return  n;  }	  &&    left.getString().equals(   "undefined   "))    {    return    n;    }    	non-compiled	[CE]  orphaned  case	29	None	replace
24	[BUG]  [BUGGY]  &&  left.getString().equals( "undefined "))  {  return  right;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  left.getString().equals( "undefined "))  {  return  right;  }  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  left.getString().equals( "undefined "))  {  return  right;  }	  &&    left.getString().equals(   "undefined   "))    {    return    n;    }    	non-compiled	[CE]  orphaned  case	29	None	replace
25	[BUG]  [BUGGY]  &&  left.getString().equals( "undefined "))  {  return  l;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  left.getString().equals( "undefined "))  {  return  l;  }  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  left.getString().equals( "undefined "))  {  return  l;  }	  &&    left.getString().equals(   "undefined   "))    {    return    n;    }    	non-compiled	[CE]  orphaned  case	29	None	replace
26	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))	  boolean    undefinedRight    =((    Token.NAME    ==    left.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	3	None	replace
27	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));	  boolean    undefinedRight    =((    Token.NAME    ==    left.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	3	None	replace
28	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))	  boolean    undefinedRight    =((    Token.NAME    ==    left.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	3	None	replace
29	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));	  boolean    undefinedRight    =((    Token.NAME    ==    left.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	3	None	replace
30	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  true))  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  true))  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  true))	  boolean    undefinedRight    =((    Token.NAME    ==    left.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	3	None	replace
31	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    ||    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	17	None	replace
32	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  result  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  result  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  result  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    result    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	24	None	replace
33	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  result  ||  (token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  result  ||  (token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  result  ||  (token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    result    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	24	None	replace
34	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    left.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild()    	non-compiled	[CE]  orphaned  case	33	None	replace
35	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  Node  left  =  right.getLastChild();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  left  =  right.getLastChild();	  Node    left    =    right.getFirstChild();    	non-compiled	[CE]  orphaned  case	11	None	replace
36	[BUG]  [BUGGY]  Node  left  =  left.getLastChild();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  Node  left  =  left.getLastChild();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  left  =  left.getLastChild();	  Node    left    =    right.getFirstChild();    	non-compiled	[CE]  orphaned  case	11	None	replace
37	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  Node  left  =  left.getFirstChild();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  left  =  left.getFirstChild();	  Node    left    =    right.getFirstChild();    	non-compiled	[CE]  orphaned  case	11	None	replace
38	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  Node  left  =  n.getLastChild();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  left  =  n.getLastChild();	  Node    left    =    right.getFirstChild();    	non-compiled	[CE]  orphaned  case	11	None	replace
39	[BUG]  [BUGGY]  Node  left  =  right.getNext();  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  Node  left  =  right.getNext();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  left  =  right.getNext();	  Node    left    =    right.getFirstChild();    	non-compiled	[CE]  orphaned  case	11	None	replace
40	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	12	None	replace
41	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	12	None	replace
42	[BUG]  [BUGGY]  &&  right.getString().equals( "undefined "))  {  return  op;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  right.getString().equals( "undefined "))  {  return  op;  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  right.getString().equals( "undefined "))  {  return  op;	  &&    right.getString().equals(   "undefined   "))    {    return    n;    	non-compiled	[CE]  orphaned  case	8	None	replace
43	[BUG]  [BUGGY]  &&  rightLiteral.getString().equals( "undefined "))  {  return  n;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  rightLiteral.getString().equals( "undefined "))  {  return  n;  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  rightLiteral.getString().equals( "undefined "))  {  return  n;	  &&    right.getString().equals(   "undefined   "))    {    return    n;    	non-compiled	[CE]  orphaned  case	8	None	replace
44	[BUG]  [BUGGY]  ||  rightLiteral.getString().equals( "undefined "))  {  return  n;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  ||  rightLiteral.getString().equals( "undefined "))  {  return  n;  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	||  rightLiteral.getString().equals( "undefined "))  {  return  n;	  &&    right.getString().equals(   "undefined   "))    {    return    n;    	non-compiled	[CE]  orphaned  case	8	None	replace
45	[BUG]  [BUGGY]  &&  rightLiteral.equals( "undefined "))  {  return  n;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  rightLiteral.equals( "undefined "))  {  return  n;  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  rightLiteral.equals( "undefined "))  {  return  n;	  &&    right.getString().equals(   "undefined   "))    {    return    n;    	non-compiled	[CE]  orphaned  case	8	None	replace
46	[BUG]  [BUGGY]  ||  right.getString().equals( "undefined "))  {  return  n;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  ||  right.getString().equals( "undefined "))  {  return  n;  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	||  right.getString().equals( "undefined "))  {  return  n;	  &&    right.getString().equals(   "undefined   "))    {    return    n;    	non-compiled	[CE]  orphaned  case	8	None	replace
47	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    ||    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild()    	non-compiled	[CE]  orphaned  case	45	None	replace
48	[BUG]  [BUGGY]  &&  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  left.getString().equals( "undefined "))  {  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  left.getString().equals( "undefined "))  {	  &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
49	[BUG]  [BUGGY]  &&  rightLiteral.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  rightLiteral.getString().equals( "undefined "))  {  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  rightLiteral.getString().equals( "undefined "))  {	  &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
50	[BUG]  [BUGGY]  ||  right.getString().equals( "undefined   "))  {  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  ||  right.getString().equals( "undefined   "))  {  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	||  right.getString().equals( "undefined   "))  {	  &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
51	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild()    	non-compiled	[CE]  orphaned  case	40	None	replace
52	[BUG]  [BUGGY]  &&  left.getString().equals( "undefined "))  {  return  op;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  left.getString().equals( "undefined "))  {  return  op;  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  left.getString().equals( "undefined "))  {  return  op;	  &&    left.getString().equals(   "undefined   "))    {    return    n;    	non-compiled	[CE]  orphaned  case	28	None	replace
53	[BUG]  [BUGGY]  ||  left.getString().equals( "undefined   "))  {  return  n;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  ||  left.getString().equals( "undefined   "))  {  return  n;  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	||  left.getString().equals( "undefined   "))  {  return  n;	  &&    left.getString().equals(   "undefined   "))    {    return    n;    	non-compiled	[CE]  orphaned  case	28	None	replace
54	[BUG]  [BUGGY]  &&  left.getString().equals( "undefined "))  {  return  right;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  left.getString().equals( "undefined "))  {  return  right;  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  left.getString().equals( "undefined "))  {  return  right;	  &&    left.getString().equals(   "undefined   "))    {    return    n;    	non-compiled	[CE]  orphaned  case	28	None	replace
55	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  n  =  left.getLastChild();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	n  =  left.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
56	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  n  =  right.getFirstChild();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	n  =  right.getFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
57	[BUG]  [BUGGY]  n  =  left.getNext();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  n  =  left.getNext();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	n  =  left.getNext();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
58	[BUG]  [BUGGY]  n  =  right.getLastChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  n  =  right.getLastChild();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	n  =  right.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
59	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  result  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  result  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  result  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	21	None	replace
60	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    ||    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild()    	non-compiled	[CE]  orphaned  case	37	None	replace
61	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    ||    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	35	None	replace
62	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType())||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType())||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType())||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    ||    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	35	None	replace
63	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType())||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType())||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType())||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    ||    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	35	None	replace
64	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    left.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	39	None	replace
65	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    left.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	39	None	replace
66	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    left.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	39	None	replace
67	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.EMPTY    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	44	None	replace
68	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.EMPTY!=  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.EMPTY!=  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.EMPTY!=  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.EMPTY    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	44	None	replace
69	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    ||    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild()    	non-compiled	[CE]  orphaned  case	43	None	replace
70	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    ||    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild()    	non-compiled	[CE]  orphaned  case	43	None	replace
71	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  >>  orphaned  case  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  >>  orphaned  case  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  >>  orphaned  case	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    >>    orphaned    case    	non-compiled	[CE]  orphaned  case	4	None	replace
72	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  [Delete]  orphaned  case  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  [Delete]  orphaned  case  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  [Delete]  orphaned  case	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    >>    orphaned    case    	non-compiled	[CE]  orphaned  case	4	None	replace
73	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  Național  Național)&&  (Token.VOID  ==  right.getType()  Național  Național)  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  Național  Național)&&  (Token.VOID  ==  right.getType()  Național  Național)  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  Național  Național)&&  (Token.VOID  ==  right.getType()  Național  Național)	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    >>    orphaned    case    	non-compiled	[CE]  orphaned  case	4	None	replace
74	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChil    	non-compiled	[CE]  orphaned  case	19	None	replace
75	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChil    	non-compiled	[CE]  orphaned  case	19	None	replace
76	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  }  &&  right.getString().equals( "undefined "))  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  }  &&  right.getString().equals( "undefined "))  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  }  &&  right.getString().equals( "undefined "))	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    ||    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	2	None	replace
77	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	1	None	replace
78	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	1	None	replace
79	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  result  ||(Token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  result  ||(Token.VOID  ==  right.getType()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  result  ||(Token.VOID  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	1	None	replace
80	[BUG]  [BUGGY]  &&  right.getString().equals( "undefined "))  {  return  op;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  right.getString().equals( "undefined "))  {  return  op;  }  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  right.getString().equals( "undefined "))  {  return  op;  }	  &&    right.getString().equals(   "undefined   "))    {    return    n;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
81	[BUG]  [BUGGY]  &&  rightLiteral.getString().equals( "undefined "))  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  rightLiteral.getString().equals( "undefined "))  {  return  n;  }  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  rightLiteral.getString().equals( "undefined "))  {  return  n;  }	  &&    right.getString().equals(   "undefined   "))    {    return    n;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
82	[BUG]  [BUGGY]  ||  right.getString().equals( "undefined   "))  {  return  n;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  ||  right.getString().equals( "undefined   "))  {  return  n;  }  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	||  right.getString().equals( "undefined   "))  {  return  n;  }	  &&    right.getString().equals(   "undefined   "))    {    return    n;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
83	[BUG]  [BUGGY]  ||  rightLiteral.getString().equals( "undefined "))  {  return  n;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  ||  rightLiteral.getString().equals( "undefined "))  {  return  n;  }  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	||  rightLiteral.getString().equals( "undefined "))  {  return  n;  }	  &&    right.getString().equals(   "undefined   "))    {    return    n;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
84	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChil    	non-compiled	[CE]  orphaned  case	15	None	replace
85	[BUG]  [BUGGY]  Node  right  =  left.getfirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  Node  right  =  left.getfirstChild();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  right  =  left.getfirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	6	None	replace
86	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType())&&  right.getString().equals( "undefined "))||  (Token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType())&&  right.getString().equals( "undefined "))||  (Token.VOID  ==  right.getType()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType())&&  right.getString().equals( "undefined "))||  (Token.VOID  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    ||    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	2	None	replace
87	[BUG]  [BUGGY]  Node  left  =  right.removeFirstChild();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  Node  left  =  right.removeFirstChild();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  left  =  right.removeFirstChild();	  Node    left    =    right.getFirstChild();    	non-compiled	[CE]  orphaned  case	11	None	replace
88	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	31	None	replace
89	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType())&&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType())&&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType())&&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	21	None	replace
90	[BUG]  [BUGGY]  Node  right  =  left.getParent();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  Node  right  =  left.getParent();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  right  =  left.getParent();	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	9	None	replace
91	[BUG]  [BUGGY]  n  =  left.getFirstChild()  +  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  n  =  left.getFirstChild()  +  1;  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	n  =  left.getFirstChild()  +  1;	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
92	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType())&&  left.getString().equals( "undefined "))||  (Token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType())&&  left.getString().equals( "undefined "))||  (Token.VOID  ==  right.getType()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType())&&  left.getString().equals( "undefined "))||  (Token.VOID  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    ||    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	35	None	replace
93	[BUG]  [BUGGY]  &&  left.getType().equals( "undefined "))  {  return  n;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  left.getType().equals( "undefined "))  {  return  n;  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  left.getType().equals( "undefined "))  {  return  n;	  &&    left.getString().equals(   "undefined   "))    {    return    n;    	non-compiled	[CE]  orphaned  case	28	None	replace
94	[BUG]  [BUGGY]  &&  left.getString().equals( "undefined "))  {  return  newNode;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  left.getString().equals( "undefined "))  {  return  newNode;  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  left.getString().equals( "undefined "))  {  return  newNode;	  &&    left.getString().equals(   "undefined   "))    {    return    n;    	non-compiled	[CE]  orphaned  case	28	None	replace
95	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.EMPTY    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	44	None	replace
96	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.EMPTY    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	44	None	replace
97	[BUG]  [BUGGY]  &&  right.getString().equals( "undefined "))  {  return  left;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  right.getString().equals( "undefined "))  {  return  left;  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  right.getString().equals( "undefined "))  {  return  left;	  &&    right.getString().equals(   "undefined   "))    {    return    n;    	non-compiled	[CE]  orphaned  case	8	None	replace
98	[BUG]  [BUGGY]  ||  rightLiteral  &&  right.getString().equals( "undefined "))  {  return  n;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  ||  rightLiteral  &&  right.getString().equals( "undefined "))  {  return  n;  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	||  rightLiteral  &&  right.getString().equals( "undefined "))  {  return  n;	  &&    right.getString().equals(   "undefined   "))    {    return    n;    	non-compiled	[CE]  orphaned  case	8	None	replace
99	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    left.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild()    	non-compiled	[CE]  orphaned  case	33	None	replace
100	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChil    	non-compiled	[CE]  orphaned  case	19	None	replace
101	[BUG]  [BUGGY]  &&  rightLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  rightLiteral.equals( "undefined "))  {  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  rightLiteral.equals( "undefined "))  {	  &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
102	[BUG]  [BUGGY]  &&  rightLiteral.equals( "undefined "))  {  return  n;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  rightLiteral.equals( "undefined "))  {  return  n;  }  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  rightLiteral.equals( "undefined "))  {  return  n;  }	  &&    right.getString().equals(   "undefined   "))    {    return    n;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
103	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  >>  orphaned  case  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  >>  orphaned  case  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  >>  orphaned  case	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    >>    orphaned    case    	non-compiled	[CE]  orphaned  case	4	None	replace
104	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  >>  orphaned  case  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  >>  orphaned  case  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  >>  orphaned  case	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    >>    orphaned    case    	non-compiled	[CE]  orphaned  case	4	None	replace
105	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  +  orphaned  case  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  +  orphaned  case  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  +  orphaned  case	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    >>    orphaned    case    	non-compiled	[CE]  orphaned  case	4	None	replace
106	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  >>  orphaned  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  >>  orphaned  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  >>  orphaned	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    >>    orphaned    case    	non-compiled	[CE]  orphaned  case	4	None	replace
107	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (Token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (Token.VOID  ==  right.getType()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (Token.VOID  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    left.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	39	None	replace
108	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild(),    false)    	non-compiled	[CE]  orphaned  case	30	None	replace
109	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild(),    false)    	non-compiled	[CE]  orphaned  case	26	None	replace
110	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    left.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild()    	non-compiled	[CE]  orphaned  case	38	None	replace
111	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  Node  right  =  left.removeFirstChild();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  right  =  left.removeFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	5	None	replace
112	[BUG]  [BUGGY]  Node  right  =  left.cloneTree();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  Node  right  =  left.cloneTree();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  right  =  left.cloneTree();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	5	None	replace
113	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (Token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (Token.VOID  ==  right.getType()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (Token.VOID  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    left.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	39	None	replace
114	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (rightLiteral  ==  right.getType()  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (rightLiteral  ==  right.getType()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (rightLiteral  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    left.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	39	None	replace
115	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))&&  (Token.EMPTY  ==  right.getType()  ||  (Token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))&&  (Token.EMPTY  ==  right.getType()  ||  (Token.VOID  ==  right.getType()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))&&  (Token.EMPTY  ==  right.getType()  ||  (Token.VOID  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    left.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	39	None	replace
116	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (token.VOID  ==  right.getType()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (token.VOID  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    left.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	39	None	replace
117	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (token.VOID  ==  right.getType()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (token.VOID  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    left.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	39	None	replace
118	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    ||    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	14	None	replace
119	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstCh    	non-compiled	[CE]  orphaned  case	20	None	replace
120	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (Token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (Token.VOID  ==  right.getType()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (Token.VOID  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	1	None	replace
121	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (Token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (Token.VOID  ==  right.getType()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (Token.VOID  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	1	None	replace
122	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  NodeUtil.isLiteralValue(right.getFirstChild()  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  NodeUtil.isLiteralValue(right.getFirstChild()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  NodeUtil.isLiteralValue(right.getFirstChild()	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	1	None	replace
123	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (rightLiteral  ==  right.getType()  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (rightLiteral  ==  right.getType()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (rightLiteral  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	1	None	replace
124	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (token.VOID  ==  right.getType()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (token.VOID  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	1	None	replace
125	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	1	None	replace
126	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  >>  Orphaned  case  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  >>  Orphaned  case  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  >>  Orphaned  case	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    >>    orphaned    case    	non-compiled	[CE]  orphaned  case	4	None	replace
127	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  }  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  }	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    >>    orphaned    case    	non-compiled	[CE]  orphaned  case	4	None	replace
128	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()!=  orphaned  case  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()!=  orphaned  case  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()!=  orphaned  case	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    >>    orphaned    case    	non-compiled	[CE]  orphaned  case	4	None	replace
129	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  [Delete]  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  [Delete]  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  [Delete]	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    >>    orphaned    case    	non-compiled	[CE]  orphaned  case	4	None	replace
130	[BUG]  [BUGGY]  &&  right.getString().equals( "undefined ")||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)))  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  right.getString().equals( "undefined ")||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)))  {  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  right.getString().equals( "undefined ")||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)))  {	  &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
131	[BUG]  [BUGGY]  &&  right.getString().equals( "undefined ")||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  right.getString().equals( "undefined ")||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  right.getString().equals( "undefined ")||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));	  &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
132	[BUG]  [BUGGY]  &&  right.getString().equals( "undefined ")||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  right.getString().equals( "undefined ")||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  right.getString().equals( "undefined ")||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()	  &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
133	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	21	None	replace
134	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	21	None	replace
135	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChil    	non-compiled	[CE]  orphaned  case	41	None	replace
136	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))&&  (Token.EMPTY  ==  right.getType()  ||  (Token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))&&  (Token.EMPTY  ==  right.getType()  ||  (Token.VOID  ==  right.getType()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))&&  (Token.EMPTY  ==  right.getType()  ||  (Token.VOID  ==  right.getType()	  boolean    undefinedRight    =((    Token.NAME    ==    left.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	3	None	replace
137	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (rightLiteral  ==  right.getType()  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (rightLiteral  ==  right.getType()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (rightLiteral  ==  right.getType()	  boolean    undefinedRight    =((    Token.NAME    ==    left.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	3	None	replace
138	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType())&&  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType())&&  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType())&&  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()	  boolean    undefinedRight    =((    Token.NAME    ==    left.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	3	None	replace
139	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (token.VOID  ==  right.getType()  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))&&  (Token.VOID  ==  right.getType()  ||  (token.VOID  ==  right.getType()	  boolean    undefinedRight    =((    Token.NAME    ==    left.getType()    ||    right.getString().equals(   "undefined   "))    &&    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	3	None	replace
140	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.EMPTY    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	44	None	replace
141	[BUG]  [BUGGY]  &&  left.getString().equals( "undefined ")||  rightLiteral)  {  return  n;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  left.getString().equals( "undefined ")||  rightLiteral)  {  return  n;  }  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  left.getString().equals( "undefined ")||  rightLiteral)  {  return  n;  }	  &&    left.getString().equals(   "undefined   "))    {    return    n;    }    	non-compiled	[CE]  orphaned  case	29	None	replace
142	[BUG]  [BUGGY]  &&  left.getString().equals( "undefined "))  {  return  newNode;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  left.getString().equals( "undefined "))  {  return  newNode;  }  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  left.getString().equals( "undefined "))  {  return  newNode;  }	  &&    left.getString().equals(   "undefined   "))    {    return    n;    }    	non-compiled	[CE]  orphaned  case	29	None	replace
143	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	31	None	replace
144	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  result  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  result  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  result  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    result    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	24	None	replace
145	[BUG]  [BUGGY]  n  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  n  =  left.removeFirstChild();  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	n  =  left.removeFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
146	[BUG]  [BUGGY]  &&  left.getString().equals( "undefined "))  {  return  n  +  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);      [BUGGY]  &&  left.getString().equals( "undefined "))  {  return  n  +  1;  [BUGGY]      &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  left.getString().equals( "undefined "))  {  return  n  +  1;	  &&    left.getString().equals(   "undefined   "))    {    return    n;    	non-compiled	[CE]  orphaned  case	28	None	replace
