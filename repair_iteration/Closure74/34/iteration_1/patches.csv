bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	12	None	replace
2	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	12	None	replace
3	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	12	None	replace
4	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  >>  orphaned  case  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  >>  orphaned  case  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  >>  orphaned  case	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	12	None	replace
5	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  right  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
6	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  right  =  n.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
7	[BUG]  [BUGGY]  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  n  =  left.getFirstChild();  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	n  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
8	[BUG]  [BUGGY]  &&  right.getString().equals( "undefined "))  {  return  n;  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  &&  right.getString().equals( "undefined "))  {  return  n;  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  right.getString().equals( "undefined "))  {  return  n;	      	non-compiled	[CE]  orphaned  case	7	None	replace
9	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  Node  right  =  left.getNext();  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  right  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
10	[BUG]  [BUGGY]  &&  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  &&  right.getString().equals( "undefined "))  {  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  right.getString().equals( "undefined "))  {	      	non-compiled	[CE]  orphaned  case	7	None	replace
11	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  Node  left  =  right.getFirstChild();  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  left  =  right.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
12	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	4	None	replace
13	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	4	None	replace
14	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild(),    false)));    	non-compiled	[CE]  orphaned  case	2	None	replace
15	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild(),    false)));    	non-compiled	[CE]  orphaned  case	2	None	replace
16	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	5	None	replace
17	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	5	None	replace
18	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	5	None	replace
19	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    	non-compiled	[CE]  orphaned  case	8	None	replace
20	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstCh  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstCh  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstCh	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    	non-compiled	[CE]  orphaned  case	8	None	replace
21	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild(),    false))    	non-compiled	[CE]  orphaned  case	11	None	replace
22	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild(),    false))    	non-compiled	[CE]  orphaned  case	11	None	replace
23	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild(),    false))    	non-compiled	[CE]  orphaned  case	11	None	replace
24	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  result  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  result  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  result  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	1	None	replace
25	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild(),    false))    	non-compiled	[CE]  orphaned  case	11	None	replace
26	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild(),    false))    	non-compiled	[CE]  orphaned  case	11	None	replace
27	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  Node  left  =  n.getFirstChild();  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	Node  left  =  n.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
28	[BUG]  [BUGGY]  &&  left.getString().equals( "undefined "))  {  return  n;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  &&  left.getString().equals( "undefined "))  {  return  n;  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  left.getString().equals( "undefined "))  {  return  n;	      	non-compiled	[CE]  orphaned  case	7	None	replace
29	[BUG]  [BUGGY]  &&  left.getString().equals( "undefined "))  {  return  n;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  &&  left.getString().equals( "undefined "))  {  return  n;  }  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  left.getString().equals( "undefined "))  {  return  n;  }	      	non-compiled	[CE]  orphaned  case	7	None	replace
30	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild(),    false))    	non-compiled	[CE]  orphaned  case	3	None	replace
31	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	5	None	replace
32	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	1	None	replace
33	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild()    	non-compiled	[CE]  orphaned  case	9	None	replace
34	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild()    	non-compiled	[CE]  orphaned  case	9	None	replace
35	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	12	None	replace
36	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    	non-compiled	[CE]  orphaned  case	8	None	replace
37	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild()    	non-compiled	[CE]  orphaned  case	10	None	replace
38	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild()    	non-compiled	[CE]  orphaned  case	10	None	replace
39	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  left.getString().equals( "undefined "))  &&  (Token.VOID  ==  right.getType()	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	12	None	replace
40	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    ||    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    	non-compiled	[CE]  orphaned  case	12	None	replace
41	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil	  boolean    undefinedRight    =    ((    Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild(),    false)));    	non-compiled	[CE]  orphaned  case	6	None	replace
42	[BUG]  [BUGGY]  &&  right.getString().equals( "undefined "))  {  return  n;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  &&  right.getString().equals( "undefined "))  {  return  n;  }  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	&&  right.getString().equals( "undefined "))  {  return  n;  }	      	non-compiled	[CE]  orphaned  case	7	None	replace
43	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild()    	non-compiled	[CE]  orphaned  case	9	None	replace
44	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.EMPTY  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	1	None	replace
45	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);    [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [BUGGY]    &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  ||  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()	  boolean    undefinedRight    =    ((    Token.NAME    ==    left.getType()    &&    left.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild(),    false))    	non-compiled	[CE]  orphaned  case	11	None	replace
