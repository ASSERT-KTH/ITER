bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(undefinedLeft  &&  (rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  &&  (rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
2	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined "))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
3	[BUG]  [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  leftLiteral.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  leftLiteral.equals( "undefined ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  leftLiteral.equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
4	[BUG]  [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  rightLiteral.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  rightLiteral.equals( "undefined ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  rightLiteral.equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
5	[BUG]  [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (left.getString().equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
6	[BUG]  [BUGGY]  if  (undefinedLeft  &&  leftLiteral)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if  (undefinedLeft  &&  leftLiteral)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  leftLiteral)  {	  if    (undefinedLeft    &&    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
7	[BUG]  [BUGGY]  if  (undefinedLeft  &&  undefinedRight)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if  (undefinedLeft  &&  undefinedRight)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  undefinedRight)  {	  if    (undefinedLeft    &&    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
8	[BUG]  [BUGGY]  if(undefinedLeft  &&  (rightLiteral.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  &&  (rightLiteral.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (rightLiteral.isEmpty()  &&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	13	None	replace
9	[BUG]  [BUGGY]  if(undefinedLeft  &&  (right.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  &&  (right.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (right.isEmpty()  &&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	13	None	replace
10	[BUG]  [BUGGY]  if(undefinedLeft  ||  (rightLiteral.isEmpty()  &&  left.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  (rightLiteral.isEmpty()  &&  left.getString().equals( "undefined ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (rightLiteral.isEmpty()  &&  left.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	13	None	replace
11	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  (right.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.isEmpty()  &&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	13	None	replace
12	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral.isEmpty()  &&  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  rightLiteral.isEmpty()  &&  right.getString().equals( "undefined "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral.isEmpty()  &&  right.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    (rightLiteral.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	13	None	replace
13	[BUG]  [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
14	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
15	[BUG]  [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >=  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
16	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
17	[BUG]  [BUGGY]  if(undefinedLeft  <=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  <=  MAX_FOLD_NUMBER)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <=  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
18	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
19	[BUG]  [BUGGY]  if(undefinedLeft  >  rightLiteral)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  >  rightLiteral)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  rightLiteral)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
20	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  result  =  compareToUndefined(left,  op);  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	result  =  compareToUndefined(left,  op);	      	non-compiled	[CE]  orphaned  case	6	None	replace
21	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft);  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	result  =  compareToUndefined(left,  undefinedLeft);	      	non-compiled	[CE]  orphaned  case	6	None	replace
22	[BUG]  [BUGGY]  boolean  undefinedLeft  =(left.getString().equals( "undefined "));  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  boolean  undefinedLeft  =(left.getString().equals( "undefined "));  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	boolean  undefinedLeft  =(left.getString().equals( "undefined "));	      	non-compiled	[CE]  orphaned  case	6	None	replace
23	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined "));  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined "));  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined "));	      	non-compiled	[CE]  orphaned  case	6	None	replace
24	[BUG]  [BUGGY]  if  (undefinedLeft  &&  rightLiteral.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if  (undefinedLeft  &&  rightLiteral.getType()  ==  Token.NAME)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  rightLiteral.getType()  ==  Token.NAME)  {	  if    (undefinedLeft    &&    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
25	[BUG]  [BUGGY]  if  (undefinedLeft  ||  right.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if  (undefinedLeft  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  ||  right.getType()  ==  Token.NAME)  {	  if    (undefinedLeft    &&    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
26	[BUG]  [BUGGY]  if  (undefinedLeft  &&  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if  (undefinedLeft  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  left.getType()  ==  Token.NAME)  {	  if    (undefinedLeft    &&    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
27	[BUG]  [BUGGY]  if  (rightLiteral  &&  undefinedLeft.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if  (rightLiteral  &&  undefinedLeft.getType()  ==  Token.NAME)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (rightLiteral  &&  undefinedLeft.getType()  ==  Token.NAME)  {	  if    (undefinedLeft    &&    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
28	[BUG]  [BUGGY]  if(undefinedLeft  &&  left.getString().equals( "undefined   "))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  &&  left.getString().equals( "undefined   "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  left.getString().equals( "undefined   "))  {	  if(undefinedLeft    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
29	[BUG]  [BUGGY]  if(undefinedLeft  ||  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  right.getString().equals( "undefined "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  right.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
30	[BUG]  [BUGGY]  if(undefinedLeft  &&  right.getString().equals( "undefined   "))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  &&  right.getString().equals( "undefined   "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  right.getString().equals( "undefined   "))  {	  if(undefinedLeft    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
31	[BUG]  [BUGGY]  if(rightLiteral  ||  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(rightLiteral  ||  left.getString().equals( "undefined "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  ||  left.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
32	[BUG]  [BUGGY]  if(left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(left.getString().equals( "undefined "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(left.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
33	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  leftLiteral)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral)  {	  if(undefinedLeft    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
34	[BUG]  [BUGGY]  if(undefinedLeft  &&  undefinedRight  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  &&  undefinedRight  ||  rightLiteral)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  undefinedRight  ||  rightLiteral)  {	  if(undefinedLeft    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
35	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
36	[BUG]  [BUGGY]  if(undefinedLeft  &&  (rightLiteral.equals( "undefined   ")&&  right.getString().equals( "undefined   ")))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  &&  (rightLiteral.equals( "undefined   ")&&  right.getString().equals( "undefined   ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (rightLiteral.equals( "undefined   ")&&  right.getString().equals( "undefined   ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
37	[BUG]  [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (left.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
38	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.equals( "undefined ")&&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  (right.equals( "undefined ")&&  right.getString().equals( "undefined ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.equals( "undefined ")&&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
39	[BUG]  [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  left.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  left.getString().equals( "undefined ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  left.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
40	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")&&  left.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")&&  left.getString().equals( "undefined ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.getString().equals( "undefined ")&&  left.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
41	[BUG]  [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
42	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
43	[BUG]  [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
44	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
45	[BUG]  [BUGGY]  if(undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
46	[BUG]  [BUGGY]  if(undefinedLeft  >>  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  >>  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >>  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
47	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
48	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  rightLiteral)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  rightLiteral)  {	  if(undefinedLeft    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
49	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  leftLiteral)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  leftLiteral)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  leftLiteral)  {	  if(undefinedLeft    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
50	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  left.getType()  ==  Token.FUNCTION)  {	  if(undefinedLeft    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
51	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  left.getType()  ==  Token.NAME)  {	  if(undefinedLeft    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
52	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  undefinedLeft)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedLeft)  {	  if(undefinedLeft    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
53	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  rightLiteral.equals( "undefined "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral.equals( "undefined "))  {	  if(undefinedLeft    &&    rightLiteral.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
54	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight.equals( "undefined "))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  undefinedRight.equals( "undefined "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight.equals( "undefined "))  {	  if(undefinedLeft    &&    rightLiteral.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
55	[BUG]  [BUGGY]  if(undefinedLeft  &&  leftLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  &&  leftLiteral.equals( "undefined "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  leftLiteral.equals( "undefined "))  {	  if(undefinedLeft    &&    rightLiteral.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
56	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  leftLiteral.equals( "undefined "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral.equals( "undefined "))  {	  if(undefinedLeft    &&    rightLiteral.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
57	[BUG]  [BUGGY]  if(leftLiteral  ||  undefinedLeft.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(leftLiteral  ||  undefinedLeft.getType()  ==  Token.NAME)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(leftLiteral  ||  undefinedLeft.getType()  ==  Token.NAME)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
58	[BUG]  [BUGGY]  if(rightLiteral  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(rightLiteral  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  ||  left.getType()  ==  Token.NAME)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
59	[BUG]  [BUGGY]  if(rightLiteral  ||  undefinedLeft.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(rightLiteral  ||  undefinedLeft.getType()  ==  Token.NAME)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  ||  undefinedLeft.getType()  ==  Token.NAME)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
60	[BUG]  [BUGGY]  if(rightLiteral  ||  undefinedLeft.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(rightLiteral  ||  undefinedLeft.getString().equals( "undefined "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  ||  undefinedLeft.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
61	[BUG]  [BUGGY]  if(left  ||  undefinedLeft.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(left  ||  undefinedLeft.getType()  ==  Token.NAME)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(left  ||  undefinedLeft.getType()  ==  Token.NAME)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
62	[BUG]  [BUGGY]  if(undefinedLeft  &&  rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  &&  rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined "))  {	  if(undefinedLeft    &&    rightLiteral.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
63	[BUG]  [BUGGY]  if(rightLiteral  &&  undefinedLeft.equals( "undefined "))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(rightLiteral  &&  undefinedLeft.equals( "undefined "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  &&  undefinedLeft.equals( "undefined "))  {	  if(undefinedLeft    &&    rightLiteral.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
64	[BUG]  [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
65	[BUG]  [BUGGY]  if(undefinedLeft  &&  (right.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  &&  (right.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (right.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
66	[BUG]  [BUGGY]  if(undefinedLeft  &&  (right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  &&  (right.getString().equals( "undefined ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	13	None	replace
67	[BUG]  [BUGGY]  if(rightLiteral  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(rightLiteral  ||  undefinedLeft)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  ||  undefinedLeft)  {	  if(undefinedLeft    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
68	[BUG]  [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
69	[BUG]  [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefinedRight ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
70	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  left.getString().equals( "undefined "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  left.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
71	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals(rightLiteral))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals(rightLiteral))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals(rightLiteral))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
72	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  left.getString().equals( "undefined "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  left.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
73	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
74	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
75	[BUG]  [BUGGY]  if  (undefinedLeft  &&  right.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if  (undefinedLeft  &&  right.getType()!=  Token.NAME)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  right.getType()!=  Token.NAME)  {	  if    (undefinedLeft    &&    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
76	[BUG]  [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedLeft);  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedLeft);  }  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedLeft);  }	      	non-compiled	[CE]  orphaned  case	6	None	replace
77	[BUG]  [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedLeft);  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedLeft);  break;  }  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedLeft);  break;  }	      	non-compiled	[CE]  orphaned  case	6	None	replace
78	[BUG]  [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  op);  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  op);  break;  }  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft)  {  result  =  compareToUndefined(left,  op);  break;  }	      	non-compiled	[CE]  orphaned  case	6	None	replace
79	[BUG]  [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(right,  undefinedLeft);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(right,  undefinedLeft);  }  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft)  {  result  =  compareToUndefined(right,  undefinedLeft);  }	      	non-compiled	[CE]  orphaned  case	6	None	replace
80	[BUG]  [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  left);  }  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  left);  }  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft)  {  result  =  compareToUndefined(left,  left);  }	      	non-compiled	[CE]  orphaned  case	6	None	replace
81	[BUG]  [BUGGY]  if  (undefinedLeft  &&  result)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if  (undefinedLeft  &&  result)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  result)  {	  if    (undefinedLeft    &&    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
82	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  left.getType()  ==  Token.FUNCTION)  {	  if(undefinedLeft    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
83	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  left.getType()!=  Token.NAME)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  left.getType()!=  Token.NAME)  {	  if(undefinedLeft    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
84	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  left.getString().equals( "undefined "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  left.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
85	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  left.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  left.getType()  ==  Token.VAR)  {	  if(undefinedLeft    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
86	[BUG]  [BUGGY]  boolean  undefinedLeft  =(right.getString().equals( "undefined   "));  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  boolean  undefinedLeft  =(right.getString().equals( "undefined   "));  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	boolean  undefinedLeft  =(right.getString().equals( "undefined   "));	      	non-compiled	[CE]  orphaned  case	6	None	replace
87	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
88	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
89	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  (right.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
90	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	13	None	replace
91	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.isEmpty()  &&  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  left.isEmpty()  &&  right.getString().equals( "undefined "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  left.isEmpty()  &&  right.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    (rightLiteral.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	13	None	replace
92	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined   "))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined   "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined   "))  {	  if(undefinedLeft    &&    rightLiteral.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
93	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  rightLiteral  ||  undefinedRight)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral  ||  undefinedRight)  {	  if(undefinedLeft    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
94	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedBoolean)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  undefinedBoolean)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedBoolean)  {	  if(undefinedLeft    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
95	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.getType()  ==  Token.NAME  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  left.getType()  ==  Token.NAME  ||  rightLiteral)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  left.getType()  ==  Token.NAME  ||  rightLiteral)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
96	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  rightLiteral.getType()  ==  Token.NAME)  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral.getType()  ==  Token.NAME)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
97	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral.getString().equals( "undefined   "))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));    [BUGGY]  if(undefinedLeft  ||  rightLiteral.getString().equals( "undefined   "))  {  [BUGGY]    result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral.getString().equals( "undefined   "))  {	  if(undefinedLeft    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
