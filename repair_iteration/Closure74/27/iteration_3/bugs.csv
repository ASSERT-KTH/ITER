bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  rightLiteral.getType()!=  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral.getType()!=  Token.NAME)  {	  if(undefinedLeft    ||    rightLiteral.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	96	None	replace
2	[BUG]  [BUGGY]  if  (undefinedLeft  ||  result)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if  (undefinedLeft  ||  result)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  ||  result)  {	  if    (undefinedLeft    &&    result)    {    	non-compiled	[CE]  orphaned  case	81	None	replace
3	[BUG]  [BUGGY]  if  (undefinedLeft  &&  result.booleanValue())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if  (undefinedLeft  &&  result.booleanValue())  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  result.booleanValue())  {	  if    (undefinedLeft    &&    result)    {    	non-compiled	[CE]  orphaned  case	81	None	replace
4	[BUG]  [BUGGY]  if  (undefinedLeft  &&  result.equals(rightLiteral))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if  (undefinedLeft  &&  result.equals(rightLiteral))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  result.equals(rightLiteral))  {	  if    (undefinedLeft    &&    result)    {    	non-compiled	[CE]  orphaned  case	81	None	replace
5	[BUG]  [BUGGY]  if  (undefinedLeft  &&  result  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if  (undefinedLeft  &&  result  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  result  ||  undefinedRight)  {	  if    (undefinedLeft    &&    result)    {    	non-compiled	[CE]  orphaned  case	81	None	replace
6	[BUG]  [BUGGY]  if(undefinedLeft!=  rightLiteral)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  rightLiteral)  {	  if(undefinedLeft    >    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
7	[BUG]  [BUGGY]  if(undefinedLeft  ==  rightLiteral)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ==  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  rightLiteral)  {	  if(undefinedLeft    >    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
8	[BUG]  [BUGGY]  if(undefinedLeft  >=  rightLiteral)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >=  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >=  rightLiteral)  {	  if(undefinedLeft    >    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
9	[BUG]  [BUGGY]  if(undefinedLeft  <  rightLiteral)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  rightLiteral)  {	  if(undefinedLeft    >    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
10	[BUG]  [BUGGY]  if(undefinedLeft  >>  rightLiteral)  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >>  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >>  rightLiteral)  {	  if(undefinedLeft    >    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
11	[BUG]  [BUGGY]  if(undefinedLeft  [Delete]  rightLiteral)  {  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  [Delete]  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  [Delete]  rightLiteral)  {	  if(undefinedLeft    >    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
12	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	43	None	replace
13	[BUG]  [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	43	None	replace
14	[BUG]  [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft!=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft!=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft!=  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	43	None	replace
15	[BUG]  [BUGGY]  if(undefinedLeft  &&  rightLiteral.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  rightLiteral.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  rightLiteral.getString().equals( "undefined "))  {	  if(undefinedLeft    &&    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  orphaned  case	30	None	replace
16	[BUG]  [BUGGY]  if(rightLiteral  &&  undefinedLeft.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(rightLiteral  &&  undefinedLeft.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  &&  undefinedLeft.getString().equals( "undefined "))  {	  if(undefinedLeft    &&    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  orphaned  case	30	None	replace
17	[BUG]  [BUGGY]  if(leftLiteral  ||  undefinedLeft.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(leftLiteral  ||  undefinedLeft.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(leftLiteral  ||  undefinedLeft.equals( "undefined "))  {	  if(undefinedLeft    ||    leftLiteral.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	56	None	replace
18	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  left.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  left.equals( "undefined "))  {	  if(undefinedLeft    ||    leftLiteral.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	56	None	replace
19	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals(rightLiteral))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals(rightLiteral))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals(rightLiteral))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    rightLiteral.equals(rightLiteral))    {    	non-compiled	[CE]  orphaned  case	71	None	replace
20	[BUG]  [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals(rightLiteral))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals(rightLiteral))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals(rightLiteral))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    rightLiteral.equals(rightLiteral))    {    	non-compiled	[CE]  orphaned  case	71	None	replace
21	[BUG]  [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals(rightLiteral))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals(rightLiteral))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals(rightLiteral))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    rightLiteral.equals(rightLiteral))    {    	non-compiled	[CE]  orphaned  case	71	None	replace
22	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals(rightLiteral))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals(rightLiteral))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals(rightLiteral))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    rightLiteral.equals(rightLiteral))    {    	non-compiled	[CE]  orphaned  case	71	None	replace
23	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral.equals(undefinedLeft))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral.equals(undefinedLeft))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral.equals(undefinedLeft))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    rightLiteral.equals(rightLiteral))    {    	non-compiled	[CE]  orphaned  case	71	None	replace
24	[BUG]  [BUGGY]  if(undefinedLeft  >>  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals(rightLiteral))  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >>  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals(rightLiteral))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >>  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals(rightLiteral))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    rightLiteral.equals(rightLiteral))    {    	non-compiled	[CE]  orphaned  case	71	None	replace
25	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  rightLiteral  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral  ||  left.getType()  ==  Token.FUNCTION)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
26	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral  ||  left.getType()  ==  Token.FUNCTION)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
27	[BUG]  [BUGGY]  if(undefinedLeft  &&  undefinedRight  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  undefinedRight  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  undefinedRight  ||  left.getType()  ==  Token.FUNCTION)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
28	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.getType()  ==  Token.FUNCTION)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
29	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  right.getType()  ==  Token.FUNCTION)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
30	[BUG]  [BUGGY]  if(undefinedLeft  &&  left.getString().equals( "right "))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  left.getString().equals( "right "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  left.getString().equals( "right "))  {	  if(undefinedLeft    &&    left.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  orphaned  case	28	None	replace
31	[BUG]  [BUGGY]  if(undefinedLeft  &&  rightLiteral  ||  undefinedLeft.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  rightLiteral  ||  undefinedLeft.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  rightLiteral  ||  undefinedLeft.getType()  ==  Token.NAME)  {	  if(rightLiteral    ||    undefinedLeft.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	59	None	replace
32	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedLeft.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedLeft.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedLeft.getType()  ==  Token.NAME)  {	  if(rightLiteral    ||    undefinedLeft.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	59	None	replace
33	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral  ||  undefinedRight)  {	  if(undefinedLeft    ||    undefinedRight    ||    leftLiteral)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
34	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral  ||  undefinedLeft)  {	  if(undefinedLeft    ||    undefinedRight    ||    leftLiteral)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
35	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  leftLiteral  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  leftLiteral  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  leftLiteral  ||  rightLiteral)  {	  if(undefinedLeft    ||    undefinedRight    ||    leftLiteral)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
36	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  leftLiteral  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  leftLiteral  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  leftLiteral  ||  undefinedLeft)  {	  if(undefinedLeft    ||    undefinedRight    ||    leftLiteral)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
37	[BUG]  [BUGGY]  if(undefinedLeft  &&  left.isEmpty()  &&  right.getString().equals( "undefined   "))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  left.isEmpty()  &&  right.getString().equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  left.isEmpty()  &&  right.getString().equals( "undefined   "))  {	  if(undefinedLeft    ||    left.isEmpty()    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	91	None	replace
38	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.isEmpty()  ||  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  left.isEmpty()  ||  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  left.isEmpty()  ||  right.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    left.isEmpty()    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	91	None	replace
39	[BUG]  [BUGGY]  if(undefinedLeft  ||  right.isEmpty()  &&  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  right.isEmpty()  &&  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  right.isEmpty()  &&  right.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    left.isEmpty()    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	91	None	replace
40	[BUG]  [BUGGY]  if(undefinedLeft  &&  right.isEmpty()  &&  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  right.isEmpty()  &&  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  right.isEmpty()  &&  right.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    left.isEmpty()    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	91	None	replace
41	[BUG]  [BUGGY]  if(undefinedLeft  ||  right.isEmpty()  &&  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  right.isEmpty()  &&  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  right.isEmpty()  &&  left.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    left.isEmpty()    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	91	None	replace
42	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefinedRight "));  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefinedRight "));  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefinedRight "));	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	23	None	replace
43	[BUG]  [BUGGY]  boolean  undefinedLeft  =  right.getString().equals( "undefined "));  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  boolean  undefinedLeft  =  right.getString().equals( "undefined "));  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	boolean  undefinedLeft  =  right.getString().equals( "undefined "));	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	23	None	replace
44	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedLeft  <  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedLeft  <  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedLeft  <  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    undefinedLeft    <=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
45	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER  ||  undefinedLeft  <  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER  ||  undefinedLeft  <  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER  ||  undefinedLeft  <  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    undefinedLeft    <=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
46	[BUG]  [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >=  MAX_FOLD_NUMBER  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    undefinedLeft    <=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
47	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedLeft  ==  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedLeft  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedLeft  ==  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    undefinedLeft    <=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
48	[BUG]  [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  MAX_FOLD_NUMBER  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    undefinedLeft    <=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
49	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedLeft  >=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedLeft  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedLeft  >=  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    undefinedLeft    <=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
50	[BUG]  [BUGGY]  if(undefinedLeft  &&  undefinedLeft.getString().equals( "undefined   "))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  undefinedLeft.getString().equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  undefinedLeft.getString().equals( "undefined   "))  {	  if(rightLiteral    ||    undefinedLeft.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	60	None	replace
51	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedLeft.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedLeft.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedLeft.getString().equals( "undefined "))  {	  if(rightLiteral    ||    undefinedLeft.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	60	None	replace
52	[BUG]  [BUGGY]  boolean  undefinedLeft  =(right.getString().equals( "undefinedRight "));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  boolean  undefinedLeft  =(right.getString().equals( "undefinedRight "));  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	boolean  undefinedLeft  =(right.getString().equals( "undefinedRight "));	  boolean    undefinedLeft    =(right.getString().equals(   "undefined       "));    	non-compiled	[CE]  orphaned  case	86	None	replace
53	[BUG]  [BUGGY]  if(undefinedLeft  &&  undefinedLeft)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  undefinedLeft)  {	  if(undefinedLeft    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
54	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedLeft  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedLeft  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedLeft  ||  rightLiteral)  {	  if(undefinedLeft    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
55	[BUG]  [BUGGY]  if(undefinedLeft  &&  undefinedRight  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  undefinedRight  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  undefinedRight  ||  undefinedLeft)  {	  if(undefinedLeft    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
56	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft);  break;  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	result  =  compareToUndefined(left,  undefinedLeft);  break;	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    undefinedLeft);    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
57	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft);  break;  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	result  =  compareToUndefined(right,  undefinedLeft);  break;	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    undefinedLeft);    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
58	[BUG]  [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(right,  undefinedLeft);  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(right,  undefinedLeft);  break;  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft)  {  result  =  compareToUndefined(right,  undefinedLeft);  break;  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    undefinedLeft);    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
59	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.isEmpty()  &&  rightLiteral.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.isEmpty()  &&  rightLiteral.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.isEmpty()  &&  rightLiteral.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
60	[BUG]  [BUGGY]  if(undefinedLeft  ||  (left.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (left.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (left.isEmpty()  &&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
61	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.isEmpty()  &&  left.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.isEmpty()  &&  left.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.isEmpty()  &&  left.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
62	[BUG]  [BUGGY]  if(undefinedLeft  ||  (left.isEmpty()  &&  left.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (left.isEmpty()  &&  left.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (left.isEmpty()  &&  left.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.isEmpty()    &&    left.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
63	[BUG]  [BUGGY]  if(undefinedLeft  &&  (left.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (left.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (left.isEmpty()  &&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.isEmpty()    &&    left.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
64	[BUG]  [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (left.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.isEmpty()    &&    left.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
65	[BUG]  [BUGGY]  if(undefinedLeft  &&  (left.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (left.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (left.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.isEmpty()    &&    left.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
66	[BUG]  [BUGGY]  if(undefinedLeft  &&  (left.isEmpty()  &&  left.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (left.isEmpty()  &&  left.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (left.isEmpty()  &&  left.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.isEmpty()    &&    left.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
67	[BUG]  [BUGGY]  if(rightLiteral  ||  undefinedLeft.equals( "undefined "))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(rightLiteral  ||  undefinedLeft.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  ||  undefinedLeft.equals( "undefined "))  {	  if(undefinedLeft    ||    rightLiteral.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	53	None	replace
68	[BUG]  [BUGGY]  if(undefinedLeft  &&  (rightLiteral.isEmpty()  ||  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (rightLiteral.isEmpty()  ||  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (rightLiteral.isEmpty()  ||  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    &&    (rightLiteral.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
69	[BUG]  [BUGGY]  if(undefinedLeft  &&  (right.isEmpty()  ||  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (right.isEmpty()  ||  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (right.isEmpty()  ||  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    &&    (rightLiteral.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
70	[BUG]  [BUGGY]  if(undefinedLeft  &&  rightLiteral.isEmpty()  &&  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  rightLiteral.isEmpty()  &&  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  rightLiteral.isEmpty()  &&  right.getString().equals( "undefined "))  {	  if(undefinedLeft    &&    (rightLiteral.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
71	[BUG]  [BUGGY]  if(undefinedLeft  &&  (right.getString().equals( "undefined ")||  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (right.getString().equals( "undefined ")||  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (right.getString().equals( "undefined ")||  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    &&    (rightLiteral.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
72	[BUG]  [BUGGY]  if(undefinedLeft  &&  (right.getString().equals( "undefined ")||  rightLiteral.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (right.getString().equals( "undefined ")||  rightLiteral.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (right.getString().equals( "undefined ")||  rightLiteral.isEmpty()  &&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    &&    (rightLiteral.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
73	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  left.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	70	None	replace
74	[BUG]  [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  ||  left.getString().equals( "undefined   "))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  ||  left.getString().equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  ||  left.getString().equals( "undefined   "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	70	None	replace
75	[BUG]  [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  left.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	70	None	replace
76	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  left.getString().equals( "undefined   "))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  left.getString().equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  left.getString().equals( "undefined   "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	70	None	replace
77	[BUG]  [BUGGY]  if  (leftLiteral  &&  undefinedLeft.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if  (leftLiteral  &&  undefinedLeft.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (leftLiteral  &&  undefinedLeft.getType()  ==  Token.NAME)  {	  if    (undefinedLeft    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	26	None	replace
78	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  rightLiteral  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral  ||  undefinedLeft)  {	  if(undefinedLeft    ||    undefinedRight    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
79	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  rightLiteral  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  rightLiteral  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  rightLiteral  ||  undefinedLeft)  {	  if(undefinedLeft    ||    undefinedRight    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
80	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  undefinedLeft  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  undefinedLeft  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  undefinedLeft  ||  rightLiteral)  {	  if(undefinedLeft    ||    undefinedRight    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
81	[BUG]  [BUGGY]  if  (undefinedLeft  &&  undefinedRightLiteral)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if  (undefinedLeft  &&  undefinedRightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  undefinedRightLiteral)  {	  if    (undefinedLeft    &&    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
82	[BUG]  [BUGGY]  if  (undefinedLeft  &&  undefinedLeft.equals(rightLiteral))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if  (undefinedLeft  &&  undefinedLeft.equals(rightLiteral))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  undefinedLeft.equals(rightLiteral))  {	  if    (undefinedLeft    &&    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
83	[BUG]  [BUGGY]  if  (undefinedLeft  &&  undefinedLeft.booleanValue())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if  (undefinedLeft  &&  undefinedLeft.booleanValue())  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  undefinedLeft.booleanValue())  {	  if    (undefinedLeft    &&    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
84	[BUG]  [BUGGY]  if  (undefinedLeft  &&  leftLiteral  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if  (undefinedLeft  &&  leftLiteral  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  leftLiteral  ||  undefinedRight)  {	  if    (undefinedLeft    &&    leftLiteral)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
85	[BUG]  [BUGGY]  if  (undefinedLeft  &&  leftLiteral  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if  (undefinedLeft  &&  leftLiteral  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  leftLiteral  ||  rightLiteral)  {	  if    (undefinedLeft    &&    leftLiteral)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
86	[BUG]  [BUGGY]  if(undefinedLeft  &&  (right.getString().equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (right.getString().equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (right.getString().equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {	  if(undefinedLeft    &&    (right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	66	None	replace
87	[BUG]  [BUGGY]  if(undefinedLeft  &&  (right.getString().equals( "undefined ")||  left.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (right.getString().equals( "undefined ")||  left.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (right.getString().equals( "undefined ")||  left.getString().equals( "undefined ")))  {	  if(undefinedLeft    &&    (right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	66	None	replace
88	[BUG]  [BUGGY]  if(undefinedLeft  &&  (right.getString().equals( "undefined "))  ||  rightLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (right.getString().equals( "undefined "))  ||  rightLiteral.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (right.getString().equals( "undefined "))  ||  rightLiteral.equals( "undefined "))  {	  if(undefinedLeft    &&    (right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	66	None	replace
89	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefinedRight "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefinedRight "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefinedRight "))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
90	[BUG]  [BUGGY]  if(undefinedLeft  &&  (rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
91	[BUG]  [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  rightLiteral.equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  rightLiteral.equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  rightLiteral.equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
92	[BUG]  [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")||  rightLiteral.equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")||  rightLiteral.equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (left.getString().equals( "undefined ")||  rightLiteral.equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
93	[BUG]  [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  leftLiteral.equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  leftLiteral.equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  leftLiteral.equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
94	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
95	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral  ||  rightLiteral)  {	  if(undefinedLeft    ||    leftLiteral)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
96	[BUG]  [BUGGY]  if(leftLiteral  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(leftLiteral  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(leftLiteral  ||  undefinedLeft)  {	  if(undefinedLeft    ||    leftLiteral)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
97	[BUG]  [BUGGY]  if(undefinedLeft  &&  rightLiteral  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  rightLiteral  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  rightLiteral  ||  undefinedRight)  {	  if(undefinedLeft    ||    rightLiteral    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	93	None	replace
98	[BUG]  [BUGGY]  if(undefinedLeft  &&  undefinedRight  ||  rightLiteral  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  undefinedRight  ||  rightLiteral  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  undefinedRight  ||  rightLiteral  ||  undefinedRight)  {	  if(undefinedLeft    ||    rightLiteral    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	93	None	replace
99	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedLeft  ||  rightLiteral  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedLeft  ||  rightLiteral  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedLeft  ||  rightLiteral  ||  undefinedRight)  {	  if(undefinedLeft    ||    rightLiteral    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	93	None	replace
100	[BUG]  [BUGGY]  if(rightLiteral  ||  undefinedLeft  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(rightLiteral  ||  undefinedLeft  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  ||  undefinedLeft  ||  undefinedRight)  {	  if(undefinedLeft    ||    rightLiteral    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	93	None	replace
101	[BUG]  [BUGGY]  if(undefinedLeft  &&  undefinedRight.equals( "undefined   "))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  undefinedRight.equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  undefinedRight.equals( "undefined   "))  {	  if(undefinedLeft    ||    undefinedRight.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	54	None	replace
102	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedLeft.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedLeft.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedLeft.equals( "undefined "))  {	  if(undefinedLeft    ||    undefinedRight.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	54	None	replace
103	[BUG]  [BUGGY]  if(undefinedLeft  ||  right.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  right.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  right.equals( "undefined "))  {	  if(undefinedLeft    ||    undefinedRight.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	54	None	replace
104	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft!=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft!=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft!=  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	42	None	replace
105	[BUG]  [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft!=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft!=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft!=  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	42	None	replace
106	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	42	None	replace
107	[BUG]  [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	41	None	replace
108	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  MAX_FOLD_NON_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  MAX_FOLD_NON_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  MAX_FOLD_NON_NUMBER_ERROR)  {	  if(undefinedLeft    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	41	None	replace
109	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  left.getString())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  left.getString())  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  left.getString())  {	  if(undefinedLeft    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	41	None	replace
110	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  leftLiteral.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    rightLiteral.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  orphaned  case	97	None	replace
111	[BUG]  [BUGGY]  if(undefinedLeft  &&  leftLiteral.equals( "undefined ")||  leftLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  leftLiteral.equals( "undefined ")||  leftLiteral.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  leftLiteral.equals( "undefined ")||  leftLiteral.equals( "undefined "))  {	  if(undefinedLeft    &&    leftLiteral.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	55	None	replace
112	[BUG]  [BUGGY]  if(leftLiteral  &&  undefinedLeft.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(leftLiteral  &&  undefinedLeft.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(leftLiteral  &&  undefinedLeft.equals( "undefined "))  {	  if(undefinedLeft    &&    leftLiteral.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	55	None	replace
113	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight.equals( "undefined   ")||  rightLiteral.equals( "undefined   "))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight.equals( "undefined   ")||  rightLiteral.equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight.equals( "undefined   ")||  rightLiteral.equals( "undefined   "))  {	  if(undefinedLeft    &&    rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	62	None	replace
114	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedLeft.equals( "undefined   ")||  rightLiteral.equals( "undefined   "))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedLeft.equals( "undefined   ")||  rightLiteral.equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedLeft.equals( "undefined   ")||  rightLiteral.equals( "undefined   "))  {	  if(undefinedLeft    &&    rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	62	None	replace
115	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedLeft,  op);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  result  =  compareToUndefined(undefinedLeft,  op);  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	result  =  compareToUndefined(undefinedLeft,  op);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	20	None	replace
116	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  result  =  compareToUndefined(right,  op);  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	result  =  compareToUndefined(right,  op);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	20	None	replace
117	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft);  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	result  =  compareToUndefined(right,  undefinedLeft);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	20	None	replace
118	[BUG]  [BUGGY]  result  =  compareToUndefined(ln,  op);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  result  =  compareToUndefined(ln,  op);  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	result  =  compareToUndefined(ln,  op);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	20	None	replace
119	[BUG]  [BUGGY]  result  =  compareToUndefined(ln,  undefinedLeft);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  result  =  compareToUndefined(ln,  undefinedLeft);  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	result  =  compareToUndefined(ln,  undefinedLeft);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	20	None	replace
120	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedLeft,  left);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  result  =  compareToUndefined(undefinedLeft,  left);  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	result  =  compareToUndefined(undefinedLeft,  left);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	20	None	replace
121	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")&&  rightLiteral.equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")&&  rightLiteral.equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.getString().equals( "undefined ")&&  rightLiteral.equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	88	None	replace
122	[BUG]  [BUGGY]  if(undefinedLeft  &&  (right.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (right.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (right.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	88	None	replace
123	[BUG]  [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (left.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	88	None	replace
124	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")&&  left.getString().equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")&&  left.getString().equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.getString().equals( "undefined ")&&  left.getString().equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	88	None	replace
125	[BUG]  [BUGGY]  if(undefinedLeft  ||  right.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight "))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  right.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  right.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight "))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	88	None	replace
126	[BUG]  [BUGGY]  if(undefinedLeft  &&  undefinedLeft.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  undefinedLeft.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  undefinedLeft.getType()  ==  Token.NAME)  {	  if(left    ||    undefinedLeft.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	61	None	replace
127	[BUG]  [BUGGY]  if  (undefinedLeft  &&  rightLiteral.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if  (undefinedLeft  &&  rightLiteral.getType()!=  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  rightLiteral.getType()!=  Token.NAME)  {	  if    (undefinedLeft    &&    right.getType()!=    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	75	None	replace
128	[BUG]  [BUGGY]  if  (undefinedLeft  ||  right.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if  (undefinedLeft  ||  right.getType()!=  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  ||  right.getType()!=  Token.NAME)  {	  if    (undefinedLeft    &&    right.getType()!=    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	75	None	replace
129	[BUG]  [BUGGY]  if  (undefinedLeft  &&  left.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if  (undefinedLeft  &&  left.getType()!=  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  left.getType()!=  Token.NAME)  {	  if    (undefinedLeft    &&    right.getType()!=    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	75	None	replace
130	[BUG]  [BUGGY]  if  (rightLiteral  &&  undefinedLeft.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if  (rightLiteral  &&  undefinedLeft.getType()!=  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (rightLiteral  &&  undefinedLeft.getType()!=  Token.NAME)  {	  if    (undefinedLeft    &&    right.getType()!=    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	75	None	replace
131	[BUG]  [BUGGY]  if(undefinedLeft  &&  (right.equals( "undefined   ")&&  right.getString().equals( "undefined   ")))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (right.equals( "undefined   ")&&  right.getString().equals( "undefined   ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (right.equals( "undefined   ")&&  right.getString().equals( "undefined   ")))  {	  if(undefinedLeft    ||    (right.equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	38	None	replace
132	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.equals( "undefined ")&&  rightLiteral.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.equals( "undefined ")&&  rightLiteral.equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.equals( "undefined ")&&  rightLiteral.equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	38	None	replace
133	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.equals( "undefined ")&&  rightLiteral.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.equals( "undefined ")&&  rightLiteral.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.equals( "undefined ")&&  rightLiteral.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	38	None	replace
134	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.equals( "undefined ")||  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.equals( "undefined ")||  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.equals( "undefined ")||  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	38	None	replace
135	[BUG]  [BUGGY]  boolean  undefinedLeft  =(left.getString().equals( "undefinedRight "));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  boolean  undefinedLeft  =(left.getString().equals( "undefinedRight "));  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	boolean  undefinedLeft  =(left.getString().equals( "undefinedRight "));	  boolean    undefinedLeft    =(left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	22	None	replace
136	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	74	None	replace
137	[BUG]  [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >=  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	74	None	replace
138	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	74	None	replace
139	[BUG]  [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	74	None	replace
140	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  right.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	74	None	replace
141	[BUG]  [BUGGY]  if(undefinedLeft  &&  rightLiteral  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  rightLiteral  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  rightLiteral  ||  undefinedLeft)  {	  if(undefinedLeft    &&    undefinedRight    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
142	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  undefinedLeft)  {	  if(undefinedLeft    &&    undefinedRight    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
143	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  &&  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  &&  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  &&  left.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	72	None	replace
144	[BUG]  [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  &&  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  &&  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  &&  left.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	72	None	replace
145	[BUG]  [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  &&  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  &&  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  &&  left.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	72	None	replace
146	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  &&  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  &&  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  &&  left.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	72	None	replace
147	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    rightLiteral.equals(   "undefined       "))    {    	non-compiled	[CE]  orphaned  case	92	None	replace
148	[BUG]  [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    rightLiteral.equals(   "undefined       "))    {    	non-compiled	[CE]  orphaned  case	92	None	replace
149	[BUG]  [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    rightLiteral.equals(   "undefined       "))    {    	non-compiled	[CE]  orphaned  case	92	None	replace
150	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral.equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    rightLiteral.equals(   "undefined       "))    {    	non-compiled	[CE]  orphaned  case	92	None	replace
151	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    rightLiteral.equals(   "undefined       "))    {    	non-compiled	[CE]  orphaned  case	92	None	replace
152	[BUG]  [BUGGY]  if(undefinedLeft  >>  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >>  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >>  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    rightLiteral.equals(   "undefined       "))    {    	non-compiled	[CE]  orphaned  case	92	None	replace
153	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  left.getType()  ==  Token.VAR)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	85	None	replace
154	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral  ||  left.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  rightLiteral  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral  ||  left.getType()  ==  Token.VAR)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	85	None	replace
155	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  left.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral  ||  left.getType()  ==  Token.VAR)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	85	None	replace
156	[BUG]  [BUGGY]  if(undefinedLeft  &&  undefinedRight  ||  left.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  undefinedRight  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  undefinedRight  ||  left.getType()  ==  Token.VAR)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	85	None	replace
157	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.getType()  ==  Token.VAR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.getType()  ==  Token.VAR)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	85	None	replace
158	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  right.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  right.getType()  ==  Token.VAR)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	85	None	replace
159	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")||  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")||  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.getString().equals( "undefined ")||  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	90	None	replace
160	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.getString().equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	90	None	replace
161	[BUG]  [BUGGY]  if(undefinedLeft  ||  (rightLiteral.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (rightLiteral.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (rightLiteral.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	90	None	replace
162	[BUG]  [BUGGY]  if(undefinedLeft  &&  (left.getString().equals( "undefined   ")&&  right.getString().equals( "undefined   ")))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (left.getString().equals( "undefined   ")&&  right.getString().equals( "undefined   ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (left.getString().equals( "undefined   ")&&  right.getString().equals( "undefined   ")))  {	  if(undefinedLeft    ||    (left.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	37	None	replace
163	[BUG]  [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")&&  rightLiteral.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")&&  rightLiteral.equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (left.getString().equals( "undefined ")&&  rightLiteral.equals( "undefined ")))  {	  if(undefinedLeft    ||    (left.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	37	None	replace
164	[BUG]  [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")&&  left.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")&&  left.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (left.getString().equals( "undefined ")&&  left.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (left.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	37	None	replace
165	[BUG]  [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER  ||  undefinedLeft  ==  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER  ||  undefinedLeft  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  MAX_FOLD_NUMBER  ||  undefinedLeft  ==  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    ==    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
166	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  undefinedLeft  ==  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  undefinedLeft  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  undefinedLeft  ==  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    ==    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
167	[BUG]  [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER  ||  undefinedLeft!=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER  ||  undefinedLeft!=  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  MAX_FOLD_NUMBER  ||  undefinedLeft!=  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    ==    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
168	[BUG]  [BUGGY]  if(undefinedLeft  ==  right.getType())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ==  right.getType())  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  right.getType())  {	  if(undefinedLeft    ==    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
169	[BUG]  [BUGGY]  if(undefinedLeft!=  right.getType())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  right.getType())  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  right.getType())  {	  if(undefinedLeft    ==    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
170	[BUG]  [BUGGY]  if(undefinedLeft  &&  undefinedLeft.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  undefinedLeft.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  undefinedLeft.equals( "undefined "))  {	  if(rightLiteral    &&    undefinedLeft.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	63	None	replace
171	[BUG]  [BUGGY]  if(undefinedRight  &&  undefinedLeft.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedRight  &&  undefinedLeft.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedRight  &&  undefinedLeft.equals( "undefined "))  {	  if(rightLiteral    &&    undefinedLeft.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	63	None	replace
172	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    <=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	45	None	replace
173	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    <=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	45	None	replace
174	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    <=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	45	None	replace
175	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft!=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft!=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft!=  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    <=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	45	None	replace
176	[BUG]  [BUGGY]  if(undefinedLeft  &&  (rightLiteral.equals( "undefined   ")&&  rightLiteral.equals( "undefined   ")))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (rightLiteral.equals( "undefined   ")&&  rightLiteral.equals( "undefined   ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (rightLiteral.equals( "undefined   ")&&  rightLiteral.equals( "undefined   ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	4	None	replace
177	[BUG]  [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  leftLiteral.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  leftLiteral.equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  leftLiteral.equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	4	None	replace
178	[BUG]  [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  undefinedRight.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  undefinedRight.equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  undefinedRight.equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	4	None	replace
179	[BUG]  [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")&&  rightLiteral.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")&&  rightLiteral.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (left.getString().equals( "undefined ")&&  rightLiteral.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    left.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	39	None	replace
180	[BUG]  [BUGGY]  if(undefinedLeft  &&  (left.getString().equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (left.getString().equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (left.getString().equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {	  if(undefinedLeft    ||    (left.getString().equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
181	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.getString().equals( "undefined ")||  rightLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  left.getString().equals( "undefined ")||  rightLiteral.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  left.getString().equals( "undefined ")||  rightLiteral.equals( "undefined "))  {	  if(undefinedLeft    ||    (left.getString().equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
182	[BUG]  [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")||  leftLiteral.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")||  leftLiteral.equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (left.getString().equals( "undefined ")||  leftLiteral.equals( "undefined ")))  {	  if(undefinedLeft    ||    (left.getString().equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
183	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER  ||  undefinedLeft  >  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER  ||  undefinedLeft  >  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER  ||  undefinedLeft  >  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    <=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
184	[BUG]  [BUGGY]  if(undefinedLeft  <=  MAX_FOLD_NUMBER  ||  undefinedLeft  >  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <=  MAX_FOLD_NUMBER  ||  undefinedLeft  >  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <=  MAX_FOLD_NUMBER  ||  undefinedLeft  >  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    <=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
185	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER  ||  undefinedLeft  >=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER  ||  undefinedLeft  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER  ||  undefinedLeft  >=  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    <=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
186	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  n);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  n);  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  n);	  result    =    compareToUndefined(left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	21	None	replace
187	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  undefinedLeft);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  result  =  compareToUndefined(rightLiteral,  undefinedLeft);  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	result  =  compareToUndefined(rightLiteral,  undefinedLeft);	  result    =    compareToUndefined(left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	21	None	replace
188	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  op);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  op);  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  op);	  result    =    compareToUndefined(left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	21	None	replace
189	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ARRAY)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ARRAY)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ARRAY)  {	  if(undefinedLeft    <    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	44	None	replace
190	[BUG]  [BUGGY]  if(undefinedLeft  &&  (right.getString().equals( "undefined   ")&&  left.getString().equals( "undefined   ")))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (right.getString().equals( "undefined   ")&&  left.getString().equals( "undefined   ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (right.getString().equals( "undefined   ")&&  left.getString().equals( "undefined   ")))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")&&    left.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	40	None	replace
191	[BUG]  [BUGGY]  if(undefinedLeft  &&  (left.getString().equals( "undefined   ")&&  left.getString().equals( "undefined   ")))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (left.getString().equals( "undefined   ")&&  left.getString().equals( "undefined   ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (left.getString().equals( "undefined   ")&&  left.getString().equals( "undefined   ")))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")&&    left.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	40	None	replace
192	[BUG]  [BUGGY]  Context.checkState(undefinedLeft);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  Context.checkState(undefinedLeft);  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	Context.checkState(undefinedLeft);	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    left);    }    	non-compiled	[CE]  orphaned  case	80	None	replace
193	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	aughtExceptionHandler.throwInternal();	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    left);    }    	non-compiled	[CE]  orphaned  case	80	None	replace
194	[BUG]  [BUGGY]  Context.checkState(undefinedLeft, "Undefined ");  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  Context.checkState(undefinedLeft, "Undefined ");  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	Context.checkState(undefinedLeft, "Undefined ");	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    left);    }    	non-compiled	[CE]  orphaned  case	80	None	replace
195	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  undefinedLeft  >=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  undefinedLeft  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  undefinedLeft  >=  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
196	[BUG]  [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER  ||  undefinedLeft!=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER  ||  undefinedLeft!=  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >=  MAX_FOLD_NUMBER  ||  undefinedLeft!=  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
197	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  left.getString().equals( "undefined   "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  left.getString().equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral  ||  left.getString().equals( "undefined   "))  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	84	None	replace
198	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  right.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	84	None	replace
199	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral  ||  left.getString().equals( "undefined   "))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  rightLiteral  ||  left.getString().equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral  ||  left.getString().equals( "undefined   "))  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	84	None	replace
200	[BUG]  [BUGGY]  if(undefinedLeft  &&  undefinedRight  ||  left.getString().equals( "undefined   "))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  undefinedRight  ||  left.getString().equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  undefinedRight  ||  left.getString().equals( "undefined   "))  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	84	None	replace
201	[BUG]  [BUGGY]  if(undefinedLeft  &&  (rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	68	None	replace
202	[BUG]  [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  leftLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  leftLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  leftLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	68	None	replace
203	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   "))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	68	None	replace
204	[BUG]  [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (left.getString().equals( "undefined ")||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	68	None	replace
205	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    undefinedLeft    <=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
206	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    undefinedLeft    <=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
207	[BUG]  [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    undefinedLeft    <=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
208	[BUG]  [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    undefinedLeft    <=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
209	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    undefinedLeft    <=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
210	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    undefinedLeft    <=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
211	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    undefinedLeft    <=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
212	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")&&  rightLiteral.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")&&  rightLiteral.equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.getString().equals( "undefined ")&&  rightLiteral.equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	35	None	replace
213	[BUG]  [BUGGY]  if(undefinedLeft  ||  right.getString().equals( "undefined ")&&  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  right.getString().equals( "undefined ")&&  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  right.getString().equals( "undefined ")&&  right.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	35	None	replace
214	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
215	[BUG]  [BUGGY]  if(undefinedLeft  &&  undefinedRight  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  undefinedRight  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  undefinedRight  ||  left.getType()  ==  Token.NAME)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
216	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral  ||  left.getType()  ==  Token.NAME)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
217	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.getType()  ==  Token.NAME)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
218	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  right.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  right.getType()  ==  Token.NAME)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
219	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    undefinedRight    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	73	None	replace
220	[BUG]  [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >=  MAX_FOLD_NUMBER  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    undefinedRight    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	73	None	replace
221	[BUG]  [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  MAX_FOLD_NUMBER  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    undefinedRight    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	73	None	replace
222	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    undefinedRight    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	73	None	replace
223	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedRight  <  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedRight  <  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedRight  <  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    undefinedRight    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	73	None	replace
224	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedRight  >=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedRight  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedRight  >=  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    undefinedRight    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	73	None	replace
225	[BUG]  [BUGGY]  Result  <=  compareToUndefined(right,  undefinedLeft);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  Result  <=  compareToUndefined(right,  undefinedLeft);  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	Result  <=  compareToUndefined(right,  undefinedLeft);	  if(undefinedLeft)    {    result    =    compareToUndefined(right,    undefinedLeft);    }    	non-compiled	[CE]  orphaned  case	79	None	replace
226	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsStatement( "msg.undefined.right ",  left,  undefinedLeft);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  aughtExceptionHandler.throwAsStatement( "msg.undefined.right ",  left,  undefinedLeft);  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	aughtExceptionHandler.throwAsStatement( "msg.undefined.right ",  left,  undefinedLeft);	  if(undefinedLeft)    {    result    =    compareToUndefined(right,    undefinedLeft);    }    	non-compiled	[CE]  orphaned  case	79	None	replace
227	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsStatement( "Failed  to  parse  right: "  +  left.getString());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  aughtExceptionHandler.throwAsStatement( "Failed  to  parse  right: "  +  left.getString());  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	aughtExceptionHandler.throwAsStatement( "Failed  to  parse  right: "  +  left.getString());	  if(undefinedLeft)    {    result    =    compareToUndefined(right,    undefinedLeft);    }    	non-compiled	[CE]  orphaned  case	79	None	replace
228	[BUG]  [BUGGY]  if(undefinedLeft  &&  right.getString().equals( "undefined ")&&  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  right.getString().equals( "undefined ")&&  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  right.getString().equals( "undefined ")&&  right.getString().equals( "undefined "))  {	  if(undefinedLeft    &&    (right.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	65	None	replace
229	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  leftLiteral.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral.getType()  ==  Token.NAME)  {	  if(leftLiteral    ||    undefinedLeft.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	57	None	replace
230	[BUG]  [BUGGY]  if(undefinedLeft  &&  leftLiteral.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  leftLiteral.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  leftLiteral.getType()  ==  Token.NAME)  {	  if(leftLiteral    ||    undefinedLeft.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	57	None	replace
231	[BUG]  [BUGGY]  if(leftLiteral  ||  right.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(leftLiteral  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(leftLiteral  ||  right.getType()  ==  Token.NAME)  {	  if(rightLiteral    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	58	None	replace
232	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  rightLiteral.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  rightLiteral.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(left.getType()  ==  Token.NAME  ||  rightLiteral.getType()  ==  Token.NAME)  {	  if(rightLiteral    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	58	None	replace
233	[BUG]  [BUGGY]  if(rightLiteral  &&  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(rightLiteral  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  &&  left.getType()  ==  Token.NAME)  {	  if(rightLiteral    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	58	None	replace
234	[BUG]  [BUGGY]  if(undefinedLeft  ||  (leftLiteral.equals( "undefined ")||  leftLiteral.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (leftLiteral.equals( "undefined ")||  leftLiteral.equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (leftLiteral.equals( "undefined ")||  leftLiteral.equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    leftLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	3	None	replace
235	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral.equals( "undefined   ")||  leftLiteral.equals( "undefined   "))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  leftLiteral.equals( "undefined   ")||  leftLiteral.equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral.equals( "undefined   ")||  leftLiteral.equals( "undefined   "))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    leftLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	3	None	replace
236	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   "))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  leftLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   "))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    leftLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	3	None	replace
237	[BUG]  [BUGGY]  if(undefinedLeft  ||  (leftLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (leftLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (leftLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    leftLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	3	None	replace
238	[BUG]  [BUGGY]  if(undefinedLeft  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  left.getType()  ==  Token.FUNCTION)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	82	None	replace
239	[BUG]  [BUGGY]  if(undefinedLeft  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  right.getType()  ==  Token.FUNCTION)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	82	None	replace
240	[BUG]  [BUGGY]  if(undefinedLeft  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  right.getType()  ==  Token.FUNCTION)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	82	None	replace
241	[BUG]  [BUGGY]  if(leftLiteral  ||  undefinedLeft.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(leftLiteral  ||  undefinedLeft.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(leftLiteral  ||  undefinedLeft.getType()  ==  Token.FUNCTION)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	82	None	replace
242	[BUG]  [BUGGY]  if(rightLiteral  ||  undefinedLeft.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(rightLiteral  ||  undefinedLeft.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  ||  undefinedLeft.getType()  ==  Token.FUNCTION)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	82	None	replace
243	[BUG]  [BUGGY]  if(rightLiteral  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(rightLiteral  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  ||  left.getType()  ==  Token.FUNCTION)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	82	None	replace
244	[BUG]  [BUGGY]  if(undefinedLeft  &&  (right.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (right.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (right.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.getType()    ==    Token.NAME    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	89	None	replace
245	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.getType()  ==  Token.NAME  &&  rightLiteral.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.getType()  ==  Token.NAME  &&  rightLiteral.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.getType()  ==  Token.NAME  &&  rightLiteral.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.getType()    ==    Token.NAME    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	89	None	replace
246	[BUG]  [BUGGY]  if(undefinedLeft  ||  (left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.getType()    ==    Token.NAME    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	89	None	replace
247	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.getType()  ==  Token.NAME  &&  rightLiteral.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.getType()  ==  Token.NAME  &&  rightLiteral.equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.getType()  ==  Token.NAME  &&  rightLiteral.equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.getType()    ==    Token.NAME    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	89	None	replace
248	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.getType()    ==    Token.NAME    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	89	None	replace
249	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  undefinedLeft!=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  undefinedLeft!=  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  undefinedLeft!=  MAX_FOLD_NUMBER)  {	  if(undefinedLeft!=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
250	[BUG]  [BUGGY]  if(undefinedRight  ||  rightLiteral  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedRight  ||  rightLiteral  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedRight  ||  rightLiteral  ||  undefinedLeft)  {	  if(rightLiteral    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	67	None	replace
251	[BUG]  [BUGGY]  if(undefinedRight  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedRight  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedRight  ||  undefinedLeft)  {	  if(rightLiteral    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	67	None	replace
252	[BUG]  [BUGGY]  if(rightLiteral  ||  undefinedLeft  ||  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(rightLiteral  ||  undefinedLeft  ||  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  ||  undefinedLeft  ||  left.getString().equals( "undefined "))  {	  if(rightLiteral    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	67	None	replace
253	[BUG]  [BUGGY]  if(undefinedRight  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedRight  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedRight  ||  rightLiteral)  {	  if(rightLiteral    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	67	None	replace
254	[BUG]  [BUGGY]  if(rightLiteral  ||  undefinedLeft  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(rightLiteral  ||  undefinedLeft  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  ||  undefinedLeft  ||  left.getType()  ==  Token.FUNCTION)  {	  if(rightLiteral    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	67	None	replace
255	[BUG]  [BUGGY]  if(rightLiteral  ||  undefinedLeft  ||  right.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(rightLiteral  ||  undefinedLeft  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  ||  undefinedLeft  ||  right.getType()  ==  Token.NAME)  {	  if(rightLiteral    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	67	None	replace
256	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.equals( "undefined   ")||  rightLiteral.equals( "undefined   "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  left.equals( "undefined   ")||  rightLiteral.equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  left.equals( "undefined   ")||  rightLiteral.equals( "undefined   "))  {	  if(undefinedLeft    ||    rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
257	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral.equals( "undefined ")&&  rightLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  rightLiteral.equals( "undefined ")&&  rightLiteral.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral.equals( "undefined ")&&  rightLiteral.equals( "undefined "))  {	  if(undefinedLeft    ||    rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
258	[BUG]  [BUGGY]  if(rightLiteral  ||  left.getString().equals( "undefinedLeft "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(rightLiteral  ||  left.getString().equals( "undefinedLeft "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  ||  left.getString().equals( "undefinedLeft "))  {	  if(rightLiteral    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	31	None	replace
259	[BUG]  [BUGGY]  if(leftLiteral  ||  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(leftLiteral  ||  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(leftLiteral  ||  left.getString().equals( "undefined "))  {	  if(rightLiteral    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	31	None	replace
260	[BUG]  [BUGGY]  if(undefinedLeft  &&  left.getType()  ==  Token.NAME  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  left.getType()  ==  Token.NAME  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  left.getType()  ==  Token.NAME  ||  rightLiteral)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	95	None	replace
261	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(left.getType()  ==  Token.NAME  ||  undefinedLeft)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	95	None	replace
262	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.getType()  ==  Token.NAME  &&  rightLiteral)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  left.getType()  ==  Token.NAME  &&  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  left.getType()  ==  Token.NAME  &&  rightLiteral)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	95	None	replace
263	[BUG]  [BUGGY]  if(rightLiteral  ||  left.getType()  ==  Token.NAME  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(rightLiteral  ||  left.getType()  ==  Token.NAME  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  ||  left.getType()  ==  Token.NAME  ||  undefinedLeft)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	95	None	replace
264	[BUG]  [BUGGY]  if(undefinedLeft  ||  right.getType()  ==  Token.NAME  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  right.getType()  ==  Token.NAME  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  right.getType()  ==  Token.NAME  ||  undefinedRight)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	95	None	replace
265	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.getType()  ==  Token.NAME  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  left.getType()  ==  Token.NAME  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  left.getType()  ==  Token.NAME  ||  undefinedRight)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	95	None	replace
266	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    undefinedRight    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	87	None	replace
267	[BUG]  [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    undefinedRight    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	87	None	replace
268	[BUG]  [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    undefinedRight    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	87	None	replace
269	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    undefinedRight    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	87	None	replace
270	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  <  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  <  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  <  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    undefinedRight    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	87	None	replace
271	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral.equals(rightLiteral))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral.equals(rightLiteral))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral.equals(rightLiteral))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    undefinedRight    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	87	None	replace
272	[BUG]  [BUGGY]  if(undefinedLeft  <  n  ||  undefinedLeft  <  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  n  ||  undefinedLeft  <  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  n  ||  undefinedLeft  <  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    <    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	16	None	replace
273	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsStatement( "msg.undefined.left ",  left,  undefinedLeft);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  aughtExceptionHandler.throwAsStatement( "msg.undefined.left ",  left,  undefinedLeft);  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	aughtExceptionHandler.throwAsStatement( "msg.undefined.left ",  left,  undefinedLeft);	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    undefinedLeft);    }    	non-compiled	[CE]  orphaned  case	76	None	replace
274	[BUG]  [BUGGY]  if(undefinedLeft  &&  undefinedBoolean)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  undefinedBoolean)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  undefinedBoolean)  {	  if(undefinedLeft    ||    undefinedBoolean)    {    	non-compiled	[CE]  orphaned  case	94	None	replace
275	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedBoolean  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedBoolean  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedBoolean  ||  rightLiteral)  {	  if(undefinedLeft    ||    undefinedBoolean)    {    	non-compiled	[CE]  orphaned  case	94	None	replace
276	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedBoolean  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedBoolean  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedBoolean  ||  left.getType()  ==  Token.FUNCTION)  {	  if(undefinedLeft    ||    undefinedBoolean)    {    	non-compiled	[CE]  orphaned  case	94	None	replace
277	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedBoolean  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedBoolean  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedBoolean  ||  left.getType()  ==  Token.NAME)  {	  if(undefinedLeft    ||    undefinedBoolean)    {    	non-compiled	[CE]  orphaned  case	94	None	replace
278	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedBoolean  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedBoolean  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedBoolean  ||  left.getType()!=  Token.FUNCTION)  {	  if(undefinedLeft    ||    undefinedBoolean)    {    	non-compiled	[CE]  orphaned  case	94	None	replace
279	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedBoolean  ||  left.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedBoolean  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedBoolean  ||  left.getType()  ==  Token.VAR)  {	  if(undefinedLeft    ||    undefinedBoolean)    {    	non-compiled	[CE]  orphaned  case	94	None	replace
280	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.getType()  ==  Token.NAME  &&  rightLiteral.equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.getType()  ==  Token.NAME  &&  rightLiteral.equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.getType()  ==  Token.NAME  &&  rightLiteral.equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    right.getString().equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	64	None	replace
281	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    right.getString().equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	64	None	replace
282	[BUG]  [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  left.getString().equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  left.getString().equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")&&  left.getString().equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    right.getString().equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	64	None	replace
283	[BUG]  [BUGGY]  if(undefinedLeft  &&  (right.equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (right.equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (right.equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {	  if(undefinedLeft    &&    (rightLiteral.equals(   "undefined       ")||    rightLiteral.equals(   "undefined       ")))    {    	non-compiled	[CE]  orphaned  case	1	None	replace
284	[BUG]  [BUGGY]  if(leftLiteral  ||  undefinedLeft.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(leftLiteral  ||  undefinedLeft.getType()!=  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(leftLiteral  ||  undefinedLeft.getType()!=  Token.NAME)  {	  if(undefinedLeft    ||    left.getType()!=    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	83	None	replace
285	[BUG]  [BUGGY]  if(rightLiteral  ||  left.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(rightLiteral  ||  left.getType()!=  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  ||  left.getType()!=  Token.NAME)  {	  if(undefinedLeft    ||    left.getType()!=    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	83	None	replace
286	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  result  =  compareToUndefined(right,  op);  break;  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	result  =  compareToUndefined(right,  op);  break;	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    op);    break;    }    	non-compiled	[CE]  orphaned  case	78	None	replace
287	[BUG]  [BUGGY]  Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(left,  op);  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(left,  op);  break;  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(left,  op);  break;  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    op);    break;    }    	non-compiled	[CE]  orphaned  case	78	None	replace
288	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op);  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  result  =  compareToUndefined(left,  op);  break;  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	result  =  compareToUndefined(left,  op);  break;	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    op);    break;    }    	non-compiled	[CE]  orphaned  case	78	None	replace
289	[BUG]  [BUGGY]  if(right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(right.getString().equals( "undefined "))  {	  if(left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	32	None	replace
290	[BUG]  [BUGGY]  if(undefinedLeft.getString().equals( "undefined   "))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft.getString().equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft.getString().equals( "undefined   "))  {	  if(left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	32	None	replace
291	[BUG]  [BUGGY]  if(rightLiteral.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(rightLiteral.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral.getString().equals( "undefined "))  {	  if(left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	32	None	replace
292	[BUG]  [BUGGY]  if(left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {	  if(left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	32	None	replace
293	[BUG]  [BUGGY]  if(left.getString().equals( "undefinedLeft "))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(left.getString().equals( "undefinedLeft "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(left.getString().equals( "undefinedLeft "))  {	  if(left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	32	None	replace
294	[BUG]  [BUGGY]  if(undefinedLeft  &&  (right.getType()  ==  Token.NAME  &&  right.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (right.getType()  ==  Token.NAME  &&  right.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (right.getType()  ==  Token.NAME  &&  right.isEmpty()  &&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    &&    (right.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
295	[BUG]  [BUGGY]  if(undefinedLeft  &&  (left.isEmpty()  ||  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (left.isEmpty()  ||  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (left.isEmpty()  ||  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    &&    (right.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
296	[BUG]  [BUGGY]  if(undefinedLeft  &&  (right.getType()  ==  Token.FUNCTION  &&  right.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (right.getType()  ==  Token.FUNCTION  &&  right.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (right.getType()  ==  Token.FUNCTION  &&  right.isEmpty()  &&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    &&    (right.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
297	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral.isEmpty()  &&  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  rightLiteral.isEmpty()  &&  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral.isEmpty()  &&  left.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    rightLiteral.isEmpty()    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	12	None	replace
298	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral.isEmpty()  &&  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  leftLiteral.isEmpty()  &&  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral.isEmpty()  &&  right.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    rightLiteral.isEmpty()    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	12	None	replace
299	[BUG]  [BUGGY]  if(rightLiteral  ||  undefinedLeft.isEmpty()  &&  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(rightLiteral  ||  undefinedLeft.isEmpty()  &&  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  ||  undefinedLeft.isEmpty()  &&  right.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    rightLiteral.isEmpty()    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	12	None	replace
300	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  left.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  left.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")&&    left.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	40	None	replace
301	[BUG]  [BUGGY]  if(undefinedLeft  <=  MAX_FOLD_NUMBER  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <=  MAX_FOLD_NUMBER  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <=  MAX_FOLD_NUMBER  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    <=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
302	[BUG]  [BUGGY]  UndefinedLeft  undefinedLeft  =  undefinedLeft.compareTo(right,  undefinedLeft);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  UndefinedLeft  undefinedLeft  =  undefinedLeft.compareTo(right,  undefinedLeft);  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	UndefinedLeft  undefinedLeft  =  undefinedLeft.compareTo(right,  undefinedLeft);	  if(undefinedLeft)    {    result    =    compareToUndefined(right,    undefinedLeft);    }    	non-compiled	[CE]  orphaned  case	79	None	replace
303	[BUG]  [BUGGY]  boolean  undefinedLeft  =(rightLiteral.getString().equals( "undefined "));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  boolean  undefinedLeft  =(rightLiteral.getString().equals( "undefined "));  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	boolean  undefinedLeft  =(rightLiteral.getString().equals( "undefined "));	  boolean    undefinedLeft    =(right.getString().equals(   "undefined       "));    	non-compiled	[CE]  orphaned  case	86	None	replace
304	[BUG]  [BUGGY]  boolean  undefinedLeft  =(right.getString().equals( "undefined ")));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  boolean  undefinedLeft  =(right.getString().equals( "undefined ")));  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	boolean  undefinedLeft  =(right.getString().equals( "undefined ")));	  boolean    undefinedLeft    =(right.getString().equals(   "undefined       "));    	non-compiled	[CE]  orphaned  case	86	None	replace
305	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.isEmpty()  &&  rightLiteral.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.isEmpty()  &&  rightLiteral.equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.isEmpty()  &&  rightLiteral.equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
306	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral.equals(rightLiteral))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral.equals(rightLiteral))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral.equals(rightLiteral))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    rightLiteral.equals(rightLiteral))    {    	non-compiled	[CE]  orphaned  case	71	None	replace
307	[BUG]  [BUGGY]  if(rightLiteral  &&  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(rightLiteral  &&  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  &&  right.getString().equals( "undefined "))  {	  if(undefinedLeft    &&    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  orphaned  case	30	None	replace
308	[BUG]  [BUGGY]  if(undefinedLeft  &&  undefinedRight  ||  leftLiteral)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  undefinedRight  ||  leftLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  undefinedRight  ||  leftLiteral)  {	  if(undefinedLeft    ||    undefinedRight    ||    leftLiteral)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
309	[BUG]  [BUGGY]  if(undefinedLeft  &&  undefinedRight  &&  leftLiteral)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  undefinedRight  &&  leftLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  undefinedRight  &&  leftLiteral)  {	  if(undefinedLeft    ||    undefinedRight    ||    leftLiteral)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
310	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral  ||  leftLiteral)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  rightLiteral  ||  leftLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral  ||  leftLiteral)  {	  if(undefinedLeft    ||    undefinedRight    ||    leftLiteral)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
311	[BUG]  [BUGGY]  if(leftLiteral  ||  undefinedLeft  ||  leftLiteral)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(leftLiteral  ||  undefinedLeft  ||  leftLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(leftLiteral  ||  undefinedLeft  ||  leftLiteral)  {	  if(undefinedLeft    ||    undefinedRight    ||    leftLiteral)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
312	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    undefinedLeft    <=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
313	[BUG]  [BUGGY]  if(undefinedLeft  >>  MAX_FOLD_NUMBER_ERROR  ||  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >>  MAX_FOLD_NUMBER_ERROR  ||  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >>  MAX_FOLD_NUMBER_ERROR  ||  left.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	70	None	replace
314	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral  >  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral  >  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral  >  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    undefinedRight    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	87	None	replace
315	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    undefinedRight    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	87	None	replace
316	[BUG]  [BUGGY]  if(undefinedLeft  &&  leftLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  leftLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  leftLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined "))  {	  if(undefinedLeft    &&    leftLiteral.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	55	None	replace
317	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  undefinedRight  ||  left.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  undefinedRight  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral  ||  undefinedRight  ||  left.getType()  ==  Token.VAR)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	85	None	replace
318	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  right.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral  ||  right.getType()  ==  Token.VAR)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	85	None	replace
319	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral  ||  undefinedRight  ||  left.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  rightLiteral  ||  undefinedRight  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral  ||  undefinedRight  ||  left.getType()  ==  Token.VAR)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	85	None	replace
320	[BUG]  [BUGGY]  if(undefinedLeft  &&  undefinedRight  ||  rightLiteral  &&  undefinedRight)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  undefinedRight  ||  rightLiteral  &&  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  undefinedRight  ||  rightLiteral  &&  undefinedRight)  {	  if(undefinedLeft    ||    rightLiteral    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	93	None	replace
321	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")||  left.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")||  left.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.getString().equals( "undefined ")||  left.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	90	None	replace
322	[BUG]  [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(right,  left);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(right,  left);  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft)  {  result  =  compareToUndefined(right,  left);  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    left);    }    	non-compiled	[CE]  orphaned  case	80	None	replace
323	[BUG]  [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedRight);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedRight);  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedRight);  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    left);    }    	non-compiled	[CE]  orphaned  case	80	None	replace
324	[BUG]  [BUGGY]  if  (undefinedLeft  &&  leftLiteral  &&  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if  (undefinedLeft  &&  leftLiteral  &&  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  leftLiteral  &&  right.getString().equals( "undefined "))  {	  if    (undefinedLeft    &&    leftLiteral)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
325	[BUG]  [BUGGY]  if  (undefinedLeft  &&  leftLiteral  &&  right.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if  (undefinedLeft  &&  leftLiteral  &&  right.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  leftLiteral  &&  right.getType()  ==  Token.NAME)  {	  if    (undefinedLeft    &&    leftLiteral)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
326	[BUG]  [BUGGY]  if  (undefinedLeft  &&  leftLiteral  ||(right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if  (undefinedLeft  &&  leftLiteral  ||(right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  leftLiteral  ||(right.getString().equals( "undefined ")))  {	  if    (undefinedLeft    &&    leftLiteral)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
327	[BUG]  [BUGGY]  if(undefinedLeft  ||  right.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  right.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  right.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	88	None	replace
328	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  left.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  left.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	88	None	replace
329	[BUG]  [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  left);  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  left);  break;  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft)  {  result  =  compareToUndefined(left,  left);  break;  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    undefinedLeft);    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
330	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral.equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    rightLiteral.equals(   "undefined       "))    {    	non-compiled	[CE]  orphaned  case	92	None	replace
331	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( ".undefined "));  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( ".undefined "));  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	boolean  undefinedLeft  =  left.getString().equals( ".undefined "));	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	23	None	replace
332	[BUG]  [BUGGY]  if(undefinedRight  ||  rightLiteral.getString().equals( "undefined   "))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedRight  ||  rightLiteral.getString().equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedRight  ||  rightLiteral.getString().equals( "undefined   "))  {	  if(rightLiteral    ||    undefinedLeft.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	60	None	replace
333	[BUG]  [BUGGY]  UndefinedLeft  undefinedLeft  =  undefinedLeft.compareTo(left,  undefinedLeft);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  UndefinedLeft  undefinedLeft  =  undefinedLeft.compareTo(left,  undefinedLeft);  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	UndefinedLeft  undefinedLeft  =  undefinedLeft.compareTo(left,  undefinedLeft);	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    undefinedLeft);    }    	non-compiled	[CE]  orphaned  case	76	None	replace
334	[BUG]  [BUGGY]  if(left  ||  undefinedLeft.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(left  ||  undefinedLeft.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(left  ||  undefinedLeft.getType()  ==  Token.FUNCTION)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	82	None	replace
335	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.getString().equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  left.getString().equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  left.getString().equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {	  if(undefinedLeft    ||    (left.getString().equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
336	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  right.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral  ||  right.getType()  ==  Token.NAME)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
337	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  undefinedRight  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  undefinedRight  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral  ||  undefinedRight  ||  left.getType()  ==  Token.NAME)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
338	[BUG]  [BUGGY]  if(rightLiteral  ||  undefinedLeft  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(rightLiteral  ||  undefinedLeft  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  ||  undefinedLeft  ||  left.getType()  ==  Token.NAME)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
339	[BUG]  [BUGGY]  if(left  ||  undefinedLeft  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(left  ||  undefinedLeft  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(left  ||  undefinedLeft  ||  left.getType()  ==  Token.NAME)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
340	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	68	None	replace
341	[BUG]  [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	68	None	replace
342	[BUG]  [BUGGY]  if(undefinedRight  ||  rightLiteral.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedRight  ||  rightLiteral.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedRight  ||  rightLiteral.getType()  ==  Token.NAME)  {	  if(rightLiteral    ||    undefinedLeft.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	59	None	replace
343	[BUG]  [BUGGY]  if(undefinedLeft  &&  (right.getType()  ==  Token.NAME  &&  right.isEmpty()  ||  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (right.getType()  ==  Token.NAME  &&  right.isEmpty()  ||  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (right.getType()  ==  Token.NAME  &&  right.isEmpty()  ||  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    &&    (right.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
344	[BUG]  [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    op);    break;    }    	non-compiled	[CE]  orphaned  case	78	None	replace
345	[BUG]  [BUGGY]  if(undefinedLeft  >>  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >>  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >>  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
346	[BUG]  [BUGGY]  result  =  compareToLocal(left,  undefinedLeft);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  result  =  compareToLocal(left,  undefinedLeft);  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	result  =  compareToLocal(left,  undefinedLeft);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	20	None	replace
347	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  undefinedLeft);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  result  =  comparisonToUndefined(left,  undefinedLeft);  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	result  =  comparisonToUndefined(left,  undefinedLeft);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	20	None	replace
348	[BUG]  [BUGGY]  if(undefinedLeft  &&  left.getString().equals( "undefined ")||  rightLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  left.getString().equals( "undefined ")||  rightLiteral.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  left.getString().equals( "undefined ")||  rightLiteral.equals( "undefined "))  {	  if(undefinedLeft    &&    left.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  orphaned  case	28	None	replace
349	[BUG]  [BUGGY]  if(undefinedLeft  &&  left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {	  if(undefinedLeft    &&    left.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  orphaned  case	28	None	replace
350	[BUG]  [BUGGY]  if(rightLiteral  &&  left.getString().equals( "undefined   "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(rightLiteral  &&  left.getString().equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  &&  left.getString().equals( "undefined   "))  {	  if(rightLiteral    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	31	None	replace
351	[BUG]  [BUGGY]  if(leftLiteral  ||  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(leftLiteral  ||  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(leftLiteral  ||  right.getString().equals( "undefined "))  {	  if(rightLiteral    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	31	None	replace
352	[BUG]  [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    undefinedLeft    <=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
353	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  &&  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  &&  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  &&  right.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	72	None	replace
354	[BUG]  [BUGGY]  if(undefinedLeft  >>  MAX_FOLD_NUMBER_ERROR  &&  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >>  MAX_FOLD_NUMBER_ERROR  &&  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >>  MAX_FOLD_NUMBER_ERROR  &&  left.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	72	None	replace
355	[BUG]  [BUGGY]  if(undefinedLeft  &&  (rightLiteral.equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (rightLiteral.equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (rightLiteral.equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    right.getString().equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	64	None	replace
356	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral.equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  rightLiteral.equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral.equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    right.getString().equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	64	None	replace
357	[BUG]  [BUGGY]  if(undefinedLeft  &&  right.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  right.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  right.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    &&    (right.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	65	None	replace
358	[BUG]  [BUGGY]  if(left.getString().equals( "undefined ")||  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(left.getString().equals( "undefined ")||  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(left.getString().equals( "undefined ")||  right.getString().equals( "undefined "))  {	  if(left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	32	None	replace
359	[BUG]  [BUGGY]  if(undefinedLeft  &&  right.getType()  ==  Token.NAME  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  right.getType()  ==  Token.NAME  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  right.getType()  ==  Token.NAME  ||  rightLiteral)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	95	None	replace
360	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.getType()!=  Token.NAME  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  left.getType()!=  Token.NAME  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  left.getType()!=  Token.NAME  ||  rightLiteral)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	95	None	replace
361	[BUG]  [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	41	None	replace
362	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.equals( "undefined ")&&  left.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.equals( "undefined ")&&  left.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.equals( "undefined ")&&  left.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	38	None	replace
363	[BUG]  [BUGGY]  if(undefinedLeft  &&  (right.equals( "undefined ")||  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (right.equals( "undefined ")||  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (right.equals( "undefined ")||  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    &&    (rightLiteral.equals(   "undefined       ")&&    right.getString().equals(   "undefined       ")))    {    	non-compiled	[CE]  orphaned  case	36	None	replace
364	[BUG]  [BUGGY]  if  (undefinedLeft  &&  result  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if  (undefinedLeft  &&  result  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  result  ||  rightLiteral)  {	  if    (undefinedLeft    &&    result)    {    	non-compiled	[CE]  orphaned  case	81	None	replace
365	[BUG]  [BUGGY]  if  (undefinedRight  &&  rightLiteral.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if  (undefinedRight  &&  rightLiteral.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedRight  &&  rightLiteral.getType()  ==  Token.NAME)  {	  if    (rightLiteral    &&    undefinedLeft.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
366	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral  ||  right.getType()  ==  Token.FUNCTION)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
367	[BUG]  [BUGGY]  if(undefinedLeft  &&  undefinedRight  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  undefinedRight  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  undefinedRight  &&  right.getType()  ==  Token.FUNCTION)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
368	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  undefinedRight  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  undefinedRight  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral  ||  undefinedRight  ||  left.getType()  ==  Token.FUNCTION)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
369	[BUG]  [BUGGY]  if(undefinedLeft  &&  undefinedRight  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  undefinedRight  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  undefinedRight  &&  left.getType()  ==  Token.FUNCTION)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
370	[BUG]  [BUGGY]  if(undefinedLeft  &&  (right.equals( "undefined ")||  right.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (right.equals( "undefined ")||  right.equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (right.equals( "undefined ")||  right.equals( "undefined ")))  {	  if(undefinedLeft    &&    (rightLiteral.equals(   "undefined       ")||    rightLiteral.equals(   "undefined       ")))    {    	non-compiled	[CE]  orphaned  case	1	None	replace
371	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral  >  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral  >  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral  >  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    <=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	45	None	replace
372	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft  -  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft  -  1);  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	result  =  compareToUndefined(left,  undefinedLeft  -  1);	  result    =    compareToUndefined(left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	21	None	replace
373	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	result  =  compareToUndefined(left,  undefinedRight);	  result    =    compareToUndefined(left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	21	None	replace
374	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  undefinedRight);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  undefinedRight);  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  undefinedRight);	  result    =    compareToUndefined(left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	21	None	replace
375	[BUG]  [BUGGY]  if(rightLiteral  ||  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(rightLiteral  ||  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  ||  right.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	29	None	replace
376	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.getType()!=  Token.NAME  &&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.getType()!=  Token.NAME  &&  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.getType()!=  Token.NAME  &&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.getType()    ==    Token.NAME    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	89	None	replace
377	[BUG]  [BUGGY]  if(undefinedLeft  &&(right.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&(right.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&(right.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.getType()    ==    Token.NAME    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	89	None	replace
378	[BUG]  [BUGGY]  if(undefinedLeft  &&  rightLiteral  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  rightLiteral  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  rightLiteral  ||  left.getType()  ==  Token.NAME)  {	  if(rightLiteral    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	58	None	replace
379	[BUG]  [BUGGY]  if(undefinedRight  &&  rightLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedRight  &&  rightLiteral.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedRight  &&  rightLiteral.equals( "undefined "))  {	  if(rightLiteral    &&    undefinedLeft.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	63	None	replace
380	[BUG]  [BUGGY]  if(undefinedLeft  &&  left.isEmpty()  &  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  left.isEmpty()  &  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  left.isEmpty()  &  right.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    left.isEmpty()    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	91	None	replace
381	[BUG]  [BUGGY]  if(undefinedLeft  &&  (rightLiteral.equals( "undefined   ")||  leftLiteral.equals( "undefined   ")))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  (rightLiteral.equals( "undefined   ")||  leftLiteral.equals( "undefined   ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  (rightLiteral.equals( "undefined   ")||  leftLiteral.equals( "undefined   ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    leftLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	3	None	replace
382	[BUG]  [BUGGY]  if(undefinedLeft  >>  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >>  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >>  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	74	None	replace
383	[BUG]  [BUGGY]  if(undefinedLeft  ||  right.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  right.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  right.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	35	None	replace
384	[BUG]  [BUGGY]  if(rightLiteral  ||  undefinedLeft.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(rightLiteral  ||  undefinedLeft.getType()!=  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  ||  undefinedLeft.getType()!=  Token.NAME)  {	  if(undefinedLeft    ||    left.getType()!=    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	83	None	replace
385	[BUG]  [BUGGY]  if(undefinedLeft  >  leftLiteral)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  leftLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  leftLiteral)  {	  if(undefinedLeft    >    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
386	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  leftLiteral  ||  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLiteral  ||  right.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	84	None	replace
387	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedBoolean  ||  leftLiteral)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedBoolean  ||  leftLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedBoolean  ||  leftLiteral)  {	  if(undefinedLeft    ||    undefinedBoolean)    {    	non-compiled	[CE]  orphaned  case	94	None	replace
388	[BUG]  [BUGGY]  if(undefinedLeft  ||  (rightLiteral  &&  undefinedBoolean))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (rightLiteral  &&  undefinedBoolean))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (rightLiteral  &&  undefinedBoolean))  {	  if(undefinedLeft    ||    undefinedBoolean)    {    	non-compiled	[CE]  orphaned  case	94	None	replace
389	[BUG]  [BUGGY]  if(undefinedLeft  ==  0)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ==  0)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  0)  {	  if(undefinedLeft    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	41	None	replace
390	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  leftLiteral.equals( "undefined   "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  leftLiteral.equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  leftLiteral.equals( "undefined   "))  {	  if(undefinedLeft    &&    leftLiteral.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	55	None	replace
391	[BUG]  [BUGGY]  if(undefinedRight  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedRight  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedRight  ||  left.getType()  ==  Token.NAME)  {	  if(rightLiteral    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	58	None	replace
392	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(left.getType()  ==  Token.NAME)  {	  if(rightLiteral    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	58	None	replace
393	[BUG]  [BUGGY]  if(undefinedLeft  <=  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <=  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <=  MAX_FOLD_NUMBER  ||  left.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	74	None	replace
394	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  undefinedBoolean)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  undefinedBoolean)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  undefinedBoolean)  {	  if(undefinedLeft    ||    undefinedRight    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
395	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  undefinedResult)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  undefinedResult)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  undefinedResult)  {	  if(undefinedLeft    ||    undefinedRight    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
396	[BUG]  [BUGGY]  if(undefinedRight  ||  undefinedLeft.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedRight  ||  undefinedLeft.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedRight  ||  undefinedLeft.getType()  ==  Token.NAME)  {	  if(leftLiteral    ||    undefinedLeft.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	57	None	replace
397	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLabel.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  leftLabel.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  leftLabel.getType()  ==  Token.NAME)  {	  if(leftLiteral    ||    undefinedLeft.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	57	None	replace
398	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft)  {	  if(undefinedLeft    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
399	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedLeft)  {	  if(undefinedLeft    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
400	[BUG]  [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")&&  left.getString().equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")&&  left.getString().equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (left.getString().equals( "undefined ")&&  left.getString().equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    left.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	39	None	replace
401	[BUG]  [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	43	None	replace
402	[BUG]  [BUGGY]  boolean  undefinedLeft  =(right.getString().equals( "undefined ")||  right.getString().equals( "undefined "));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  boolean  undefinedLeft  =(right.getString().equals( "undefined ")||  right.getString().equals( "undefined "));  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	boolean  undefinedLeft  =(right.getString().equals( "undefined ")||  right.getString().equals( "undefined "));	  boolean    undefinedLeft    =(right.getString().equals(   "undefined       "));    	non-compiled	[CE]  orphaned  case	86	None	replace
403	[BUG]  [BUGGY]  boolean  undefinedLeft  =(right.getString().equals( "undefined ")||  left.getString().equals( "undefined "));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  boolean  undefinedLeft  =(right.getString().equals( "undefined ")||  left.getString().equals( "undefined "));  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	boolean  undefinedLeft  =(right.getString().equals( "undefined ")||  left.getString().equals( "undefined "));	  boolean    undefinedLeft    =(right.getString().equals(   "undefined       "));    	non-compiled	[CE]  orphaned  case	86	None	replace
404	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  (right.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  (right.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  (right.isEmpty()  &&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    &&    (right.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
405	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  (right.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  (right.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  (right.isEmpty()  &&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    &&    (right.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
406	[BUG]  [BUGGY]  if(undefinedLeft  <=  (right.isEmpty()  ||  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <=  (right.isEmpty()  ||  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <=  (right.isEmpty()  ||  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    &&    (right.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
407	[BUG]  [BUGGY]  if(undefinedLeft  >  (right.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  (right.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  (right.isEmpty()  &&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    &&    (right.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
408	[BUG]  [BUGGY]  if(undefinedLeft  ||  right.getString().equals( "undefined ")||  rightLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  right.getString().equals( "undefined ")||  rightLiteral.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  right.getString().equals( "undefined ")||  rightLiteral.equals( "undefined "))  {	  if(undefinedLeft    ||    (left.getString().equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
409	[BUG]  [BUGGY]  if  (undefinedLeft  &&  undefinedRight  &&  rightLiteral)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if  (undefinedLeft  &&  undefinedRight  &&  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if  (undefinedLeft  &&  undefinedRight  &&  rightLiteral)  {	  if    (undefinedLeft    &&    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
410	[BUG]  [BUGGY]  if(undefinedLeft  >  (right.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  (right.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  (right.getString().equals( "undefined ")&&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    &&    (right.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	65	None	replace
411	[BUG]  [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  op);  }  else  {  undefinedLeft  =  Boolean.valueOf(undefinedLeft);  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  op);  }  else  {  undefinedLeft  =  Boolean.valueOf(undefinedLeft);  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft)  {  result  =  compareToUndefined(left,  op);  }  else  {  undefinedLeft  =  Boolean.valueOf(undefinedLeft);  }	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	20	None	replace
412	[BUG]  [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  op);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  op);  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft)  {  result  =  compareToUndefined(left,  op);  }	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	20	None	replace
413	[BUG]  [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  op);  }  else  {  return  result;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  op);  }  else  {  return  result;  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft)  {  result  =  compareToUndefined(left,  op);  }  else  {  return  result;  }	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	20	None	replace
414	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER)  {  result  =  compareToUndefined(left,  undefinedLeft);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER)  {  result  =  compareToUndefined(left,  undefinedLeft);  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER)  {  result  =  compareToUndefined(left,  undefinedLeft);  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    left);    }    	non-compiled	[CE]  orphaned  case	80	None	replace
415	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight)  {  result  =  compareToUndefined(left,  left);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight)  {  result  =  compareToUndefined(left,  left);  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight)  {  result  =  compareToUndefined(left,  left);  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    left);    }    	non-compiled	[CE]  orphaned  case	80	None	replace
416	[BUG]  [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  &&  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  &&  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR  &&  right.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	72	None	replace
417	[BUG]  [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  &&  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  &&  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  MAX_FOLD_NUMBER_ERROR  &&  right.getString().equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	72	None	replace
418	[BUG]  [BUGGY]  if(undefinedLeft  <=  (rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <=  (rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <=  (rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	68	None	replace
419	[BUG]  [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined ")||  leftLiteral.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined ")||  leftLiteral.equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefined ")||  leftLiteral.equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	68	None	replace
420	[BUG]  [BUGGY]  if(undefinedLeft.equals( "undefined ")||  undefinedRight.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft.equals( "undefined ")||  undefinedRight.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft.equals( "undefined ")||  undefinedRight.equals( "undefined "))  {	  if(undefinedLeft    ||    undefinedRight.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	54	None	replace
421	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight.equals( "undefined   "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight.equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight.equals( "undefined   "))  {	  if(undefinedLeft    ||    undefinedRight.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	54	None	replace
422	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedRight.equals( "undefined   "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedRight.equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedRight.equals( "undefined   "))  {	  if(undefinedLeft    ||    undefinedRight.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	54	None	replace
423	[BUG]  [BUGGY]  if(undefinedLeft.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft.equals( "undefined "))  {	  if(undefinedLeft    ||    undefinedRight.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	54	None	replace
424	[BUG]  [BUGGY]  if(undefinedLeft  <=  1  ||  undefinedRight.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <=  1  ||  undefinedRight.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <=  1  ||  undefinedRight.equals( "undefined "))  {	  if(undefinedLeft    ||    undefinedRight.equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	54	None	replace
425	[BUG]  [BUGGY]  if(undefinedRight  ||  undefinedLeft.getString().equals( "undefined   "))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedRight  ||  undefinedLeft.getString().equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedRight  ||  undefinedLeft.getString().equals( "undefined   "))  {	  if(rightLiteral    ||    undefinedLeft.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	60	None	replace
426	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  right.getString().equals( "undefined   "))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  right.getString().equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  right.getString().equals( "undefined   "))  {	  if(undefinedLeft    &&    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  orphaned  case	30	None	replace
427	[BUG]  [BUGGY]  if(undefinedLeft  &&  right.getString().equals( "undefined ")||  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  &&  right.getString().equals( "undefined ")||  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  &&  right.getString().equals( "undefined ")||  right.getString().equals( "undefined "))  {	  if(undefinedLeft    &&    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  orphaned  case	30	None	replace
428	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight.getType()  ==  Token.NAME)  {	  if(undefinedLeft    ||    rightLiteral.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	96	None	replace
429	[BUG]  [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral.equals(rightLiteral))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral.equals(rightLiteral))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <  MAX_FOLD_NUMBER_ERROR  ||  rightLiteral.equals(rightLiteral))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    rightLiteral.equals(rightLiteral))    {    	non-compiled	[CE]  orphaned  case	71	None	replace
430	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft.equals(rightLiteral))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft.equals(rightLiteral))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft.equals(rightLiteral))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    rightLiteral.equals(rightLiteral))    {    	non-compiled	[CE]  orphaned  case	71	None	replace
431	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    left.isEmpty()    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	91	None	replace
432	[BUG]  [BUGGY]  if(undefinedLeft  <=  left.isEmpty()  &&  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <=  left.isEmpty()  &&  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <=  left.isEmpty()  &&  right.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    left.isEmpty()    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	91	None	replace
433	[BUG]  [BUGGY]  if(rightLiteral  ||  undefinedLeft  ||  (left.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(rightLiteral  ||  undefinedLeft  ||  (left.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(rightLiteral  ||  undefinedLeft  ||  (left.getString().equals( "undefined ")))  {	  if(rightLiteral    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	67	None	replace
434	[BUG]  [BUGGY]  if(undefinedLeft  ||  (left.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (left.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (left.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (rightLiteral.isEmpty()    &&    left.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
435	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.getString().equals( "undefined ")&&  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  left.getString().equals( "undefined ")&&  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  left.getString().equals( "undefined ")&&  right.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	35	None	replace
436	[BUG]  [BUGGY]  if(undefinedLeft  ||  right.getString().equals( "undefined ")||  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  right.getString().equals( "undefined ")||  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  right.getString().equals( "undefined ")||  right.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	35	None	replace
437	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  undefinedRight!=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  undefinedRight!=  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER  ||  undefinedRight!=  MAX_FOLD_NUMBER)  {	  if(undefinedLeft!=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
438	[BUG]  [BUGGY]  if(undefinedLeft!=  0)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  0)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  0)  {	  if(undefinedLeft!=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
439	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.getType()  ==  Token.NAME  ||  rightLiteral  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  left.getType()  ==  Token.NAME  ||  rightLiteral  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  left.getType()  ==  Token.NAME  ||  rightLiteral  ||  undefinedRight)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	95	None	replace
440	[BUG]  [BUGGY]  if(undefinedLeft  ||  right.getType()  ==  Token.NAME  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  right.getType()  ==  Token.NAME  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  right.getType()  ==  Token.NAME  ||  rightLiteral)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	95	None	replace
441	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLabel.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  rightLabel.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLabel.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    rightLiteral.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  orphaned  case	97	None	replace
442	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  left.getType()!=  Token.FUNCTION)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
443	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedRight  <=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedRight  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedRight  <=  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    undefinedRight    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	73	None	replace
444	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  left.getType()!=  Token.FUNCTION)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	82	None	replace
445	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  rightLiteral.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  rightLiteral.getType()  ==  Token.FUNCTION)  {	  if(undefinedLeft    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	82	None	replace
446	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedLight  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedLight  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedLight  ||  rightLiteral)  {	  if(undefinedLeft    &&    undefinedRight    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
447	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  &&  (right.getString().equals( "undefined ")||  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  &&  (right.getString().equals( "undefined ")||  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  &&  (right.getString().equals( "undefined ")||  right.getString().equals( "undefined ")))  {	  if(undefinedLeft!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	42	None	replace
448	[BUG]  [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  &&  (right.getString().equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  &&  (right.getString().equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  MAX_FOLD_NUMBER_ERROR  &&  (right.getString().equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {	  if(undefinedLeft!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	42	None	replace
449	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER)  {  result  =  compareToUndefined(left,  undefinedLeft);  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER)  {  result  =  compareToUndefined(left,  undefinedLeft);  break;  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER)  {  result  =  compareToUndefined(left,  undefinedLeft);  break;  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    undefinedLeft);    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
450	[BUG]  [BUGGY]  if(undefinedLeft!=  0)  {  result  =  compareToUndefined(left,  undefinedLeft);  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  0)  {  result  =  compareToUndefined(left,  undefinedLeft);  break;  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  0)  {  result  =  compareToUndefined(left,  undefinedLeft);  break;  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    undefinedLeft);    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
451	[BUG]  [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedRight);  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedRight);  break;  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedRight);  break;  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    undefinedLeft);    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
452	[BUG]  [BUGGY]  if(undefinedLeft!=  -1)  {  result  =  compareToUndefined(left,  undefinedLeft);  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  -1)  {  result  =  compareToUndefined(left,  undefinedLeft);  break;  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  -1)  {  result  =  compareToUndefined(left,  undefinedLeft);  break;  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    undefinedLeft);    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
453	[BUG]  [BUGGY]  boolean  undefinedLeft  =(left.getString().equals( "undefined ")||  left.getString().equals( "undefined "));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  boolean  undefinedLeft  =(left.getString().equals( "undefined ")||  left.getString().equals( "undefined "));  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	boolean  undefinedLeft  =(left.getString().equals( "undefined ")||  left.getString().equals( "undefined "));	  boolean    undefinedLeft    =(left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	22	None	replace
454	[BUG]  [BUGGY]  boolean  undefinedLeft  =(left.getString().equals( "undefined ")||  left.getString().equals( "undefinedRight "));  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  boolean  undefinedLeft  =(left.getString().equals( "undefined ")||  left.getString().equals( "undefinedRight "));  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	boolean  undefinedLeft  =(left.getString().equals( "undefined ")||  left.getString().equals( "undefinedRight "));	  boolean    undefinedLeft    =(left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	22	None	replace
455	[BUG]  [BUGGY]  boolean  undefinedLeft  =(left.getString().equals( "undefined ")));  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  boolean  undefinedLeft  =(left.getString().equals( "undefined ")));  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	boolean  undefinedLeft  =(left.getString().equals( "undefined ")));	  boolean    undefinedLeft    =(left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	22	None	replace
456	[BUG]  [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")||  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (left.getString().equals( "undefined ")||  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (left.getString().equals( "undefined ")||  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (left.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	37	None	replace
457	[BUG]  [BUGGY]  if(undefinedLeft  ==  (right.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ==  (right.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ==  (right.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    right.getString().equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	64	None	replace
458	[BUG]  [BUGGY]  if(undefinedLeft  <=  (rightLiteral.equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <=  (rightLiteral.equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <=  (rightLiteral.equals( "undefined ")&&  right.getString().equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")&&    right.getString().equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	64	None	replace
459	[BUG]  [BUGGY]  if(undefinedLeft  ||  right.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  right.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  right.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    (right.getType()    ==    Token.NAME    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	89	None	replace
460	[BUG]  [BUGGY]  if(undefinedLeft  ||  (rightLiteral.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (rightLiteral.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (rightLiteral.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.getType()    ==    Token.NAME    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	89	None	replace
461	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  (rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  (rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  (rightLiteral.equals( "undefined   ")||  rightLiteral.equals( "undefined   ")))  {	  if(undefinedLeft    &&    (rightLiteral.equals(   "undefined       ")||    rightLiteral.equals(   "undefined       ")))    {    	non-compiled	[CE]  orphaned  case	1	None	replace
462	[BUG]  [BUGGY]  if(undefinedLeft  ||(right.getString().equals( "undefined ")||  rightLiteral.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||(right.getString().equals( "undefined ")||  rightLiteral.isEmpty()  &&  right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||(right.getString().equals( "undefined ")||  rightLiteral.isEmpty()  &&  right.getString().equals( "undefined ")))  {	  if(undefinedLeft    &&    (rightLiteral.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
463	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  left.getType()!=  Token.VAR)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  left.getType()!=  Token.VAR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  left.getType()!=  Token.VAR)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	85	None	replace
464	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  leftLiteral.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  leftLiteral.getType()  ==  Token.VAR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  leftLiteral.getType()  ==  Token.VAR)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	85	None	replace
465	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.equals(left.getString()))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.equals(left.getString()))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.equals(left.getString()))  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	85	None	replace
466	[BUG]  [BUGGY]  if(undefinedRight  ||  left.getString().equals( "undefined   "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedRight  ||  left.getString().equals( "undefined   "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedRight  ||  left.getString().equals( "undefined   "))  {	  if(rightLiteral    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	31	None	replace
467	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  left.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  left.getType()!=  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  left.getType()!=  Token.NAME)  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
468	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.equals(right.getString()))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.equals(right.getString()))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.equals(right.getString()))  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
469	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER)  {  result  =  compareToUndefined(right,  undefinedLeft);  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER)  {  result  =  compareToUndefined(right,  undefinedLeft);  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER)  {  result  =  compareToUndefined(right,  undefinedLeft);  }	  if(undefinedLeft)    {    result    =    compareToUndefined(right,    undefinedLeft);    }    	non-compiled	[CE]  orphaned  case	79	None	replace
470	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {  result  =  compareToUndefined(right,  undefinedLeft);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {  result  =  compareToUndefined(right,  undefinedLeft);  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {  result  =  compareToUndefined(right,  undefinedLeft);  }	  if(undefinedLeft)    {    result    =    compareToUndefined(right,    undefinedLeft);    }    	non-compiled	[CE]  orphaned  case	79	None	replace
471	[BUG]  [BUGGY]  if(undefinedLeft!=  0)  {  result  =  compareToUndefined(right,  undefinedLeft);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  0)  {  result  =  compareToUndefined(right,  undefinedLeft);  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  0)  {  result  =  compareToUndefined(right,  undefinedLeft);  }	  if(undefinedLeft)    {    result    =    compareToUndefined(right,    undefinedLeft);    }    	non-compiled	[CE]  orphaned  case	79	None	replace
472	[BUG]  [BUGGY]  if(undefinedLeft  <=  rightLiteral.isEmpty()  &&  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <=  rightLiteral.isEmpty()  &&  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <=  rightLiteral.isEmpty()  &&  right.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    rightLiteral.isEmpty()    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	12	None	replace
473	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.equals( "undefined "))  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	84	None	replace
474	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight  ||  rightLiteral.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    undefinedRight    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  orphaned  case	84	None	replace
475	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  &&  undefinedLeft  <=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  &&  undefinedLeft  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER  &&  undefinedLeft  <=  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER    ||    undefinedLeft    <=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
476	[BUG]  [BUGGY]  if(undefinedLeft  <=  (rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <=  (rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <=  (rightLiteral.equals( "undefined ")||  rightLiteral.equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
477	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight.equals( "undefined ")||  rightLiteral.equals( "undefinedRight "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedRight.equals( "undefined ")||  rightLiteral.equals( "undefinedRight "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedRight.equals( "undefined ")||  rightLiteral.equals( "undefinedRight "))  {	  if(undefinedLeft    ||    (rightLiteral.equals(   "undefined   ")||    rightLiteral.equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
478	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedLeft  >  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedLeft  >  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER  ||  undefinedLeft  >  MAX_FOLD_NUMBER)  {	  if(undefinedLeft    >=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
479	[BUG]  [BUGGY]  if(undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined "))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR  &&  rightLiteral.equals( "undefined "))  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    &&    rightLiteral.equals(   "undefined       "))    {    	non-compiled	[CE]  orphaned  case	92	None	replace
480	[BUG]  [BUGGY]  if(undefinedLeft  <=  rightLiteral)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <=  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <=  rightLiteral)  {	  if(undefinedLeft    >    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
481	[BUG]  [BUGGY]  if(undefinedLeft  >  rightLiteral  &&  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  rightLiteral  &&  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  rightLiteral  &&  left.getString().equals( "undefined "))  {	  if(undefinedLeft    >    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
482	[BUG]  [BUGGY]  if(undefinedLeft!=  0)  {  result  =  compareToUndefined(left,  undefinedLeft);  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft!=  0)  {  result  =  compareToUndefined(left,  undefinedLeft);  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft!=  0)  {  result  =  compareToUndefined(left,  undefinedLeft);  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    undefinedLeft);    }    	non-compiled	[CE]  orphaned  case	76	None	replace
483	[BUG]  [BUGGY]  UndefinedLeft  undefinedLeft  =  (undefinedRight.getString().equals( "undefined "));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  UndefinedLeft  undefinedLeft  =  (undefinedRight.getString().equals( "undefined "));  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	UndefinedLeft  undefinedLeft  =  (undefinedRight.getString().equals( "undefined "));	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    undefinedLeft);    }    	non-compiled	[CE]  orphaned  case	76	None	replace
484	[BUG]  [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  right);  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  right);  break;  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft)  {  result  =  compareToUndefined(left,  right);  break;  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    op);    break;    }    	non-compiled	[CE]  orphaned  case	78	None	replace
485	[BUG]  [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  undefined);  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  undefined);  break;  }  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft)  {  result  =  compareToUndefined(left,  undefined);  break;  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    op);    break;    }    	non-compiled	[CE]  orphaned  case	78	None	replace
486	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    undefinedRight    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	87	None	replace
487	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR  ||  undefinedLeft  <=  MAX_FOLD_NUMBER_ERROR)  {	  if(undefinedLeft    >    MAX_FOLD_NUMBER_ERROR    ||    undefinedRight    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	87	None	replace
488	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")||  right.getString().equals( "undefinedRight ")))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.getString().equals( "undefined ")||  right.getString().equals( "undefinedRight ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.getString().equals( "undefined ")||  right.getString().equals( "undefinedRight ")))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	88	None	replace
489	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  left.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  left.getString().equals( "undefined ")&&  right.getString().equals( "undefinedRight "))  {	  if(undefinedLeft    ||    (right.getString().equals(   "undefined   ")&&    right.getString().equals(   "undefinedRight   ")))    {    	non-compiled	[CE]  orphaned  case	88	None	replace
490	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedBoolean  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedBoolean  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedBoolean  ||  undefinedRight)  {	  if(undefinedLeft    ||    undefinedBoolean)    {    	non-compiled	[CE]  orphaned  case	94	None	replace
491	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedBoolean  ||  left.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedBoolean  ||  left.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedBoolean  ||  left.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    undefinedBoolean)    {    	non-compiled	[CE]  orphaned  case	94	None	replace
492	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedBoolean  ||  (right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  undefinedBoolean  ||  (right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  undefinedBoolean  ||  (right.getString().equals( "undefined ")))  {	  if(undefinedLeft    ||    undefinedBoolean)    {    	non-compiled	[CE]  orphaned  case	94	None	replace
493	[BUG]  [BUGGY]  if(undefinedLeft  ||  right.isEmpty()  ||  right.getString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  right.isEmpty()  ||  right.getString().equals( "undefined "))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  right.isEmpty()  ||  right.getString().equals( "undefined "))  {	  if(undefinedLeft    ||    (right.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
494	[BUG]  [BUGGY]  if(undefinedLeft  ||  (right.isEmpty()  &&  right.getString().equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  ||  (right.isEmpty()  &&  right.getString().equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  ||  (right.isEmpty()  &&  right.getString().equals( "undefined ")||  rightLiteral.equals( "undefined ")))  {	  if(undefinedLeft    ||    (right.isEmpty()    &&    right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
495	[BUG]  [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  (right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  (right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  &&  (right.getString().equals( "undefined ")))  {	  if(undefinedLeft    &&    (right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	66	None	replace
496	[BUG]  [BUGGY]  if(undefinedLeft  <=  (right.getString().equals( "undefined ")))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));      [BUGGY]  if(undefinedLeft  <=  (right.getString().equals( "undefined ")))  {  [BUGGY]      result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1032	1032	3	replace	if(undefinedLeft  <=  (right.getString().equals( "undefined ")))  {	  if(undefinedLeft    &&    (right.getString().equals(   "undefined   ")))    {    	non-compiled	[CE]  orphaned  case	66	None	replace
