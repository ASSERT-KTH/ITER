bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left.getLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	add	return  left.getLastChild();	  return    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	4	3	replace
2	[BUG]  [BUGGY]  return  left.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left.getLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getLastChild();	  return    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	4	3	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	add	return  left.getFirstChild();	  return    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	4	3	replace
4	[BUG]  [BUGGY]  return  left.getFirstChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getFirstChild();	  return    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	4	3	replace
5	[BUG]  [BUGGY]  result  =  n.getLastChild();  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  n.getLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getLastChild();	  return    n.getLastChild();    	non-compiled	[CE]  incompatible  types	4	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  right.getLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	add	return  right.getLastChild();	  return    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	4	3	replace
7	[BUG]  [BUGGY]  return  right.getLastChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  right.getLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.getLastChild();	  return    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	4	3	replace
8	[BUG]  [BUGGY]  return  n.getLastChild()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getLastChild()  +  1;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getLastChild()  +  1;	  return    n.getLastChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	4	None	replace
9	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  n  =  left.getLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
10	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  n  =  right.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  right.getFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
11	[BUG]  [BUGGY]  n  =  left.getFirstChild()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  n  =  left.getFirstChild()  +  1;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getFirstChild()  +  1;	  n    =    left.getFirstChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	10	None	replace
12	[BUG]  [BUGGY]  return  right;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  right;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right;	  return    left;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
13	[BUG]  [BUGGY]  return  left.getNext();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left.getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getNext();	  return    left;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
14	[BUG]  [BUGGY]  return  left.cloneTree();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left.cloneTree();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.cloneTree();	  return    left;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
15	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left.getType()  ==  Token.GETELEM;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.GETELEM;	  return    left;    	non-compiled	[CE]  incompatible  types	2	None	replace
16	[BUG]  [BUGGY]  return  left;  Node  left  =  right.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldComparison(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left;  Node  left  =  right.getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left;    Node  left  =  right.getNext();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldComparison(Node,Node,Node)	1	None	add
17	[BUG]  [BUGGY]  return  left;  Node  left  =  left.getNext();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left;  Node  left  =  left.getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left;    Node  left  =  left.getNext();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
18	[BUG]  [BUGGY]  return  left;  Node  left  =  right.getFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left;  Node  left  =  right.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left;    Node  left  =  right.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
19	[BUG]  [BUGGY]  return  left;  Node  left  =  left.getFirstChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left;  Node  left  =  left.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left;    Node  left  =  left.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
20	[BUG]  [BUGGY]  return  left;  Node  left  =  right.getLastChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left;  Node  left  =  right.getLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left;    Node  left  =  right.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
21	[BUG]  [BUGGY]  return  left;  Node  left  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left;  Node  left  =  n.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left;    Node  left  =  n.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
22	[BUG]  [BUGGY]  return  left;  Node  left  =  right.getFirstChild();  return  left;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left;  Node  left  =  right.getFirstChild();  return  left;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left;    Node  left  =  right.getFirstChild();  return  left;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
23	[BUG]  [BUGGY]  return  left;  Node  left  =  right.getNext();  return  left;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left;  Node  left  =  right.getNext();  return  left;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left;    Node  left  =  right.getNext();  return  left;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
24	[BUG]  [BUGGY]  return  n.getNext();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getNext();	  return    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
25	[BUG]  [BUGGY]  return  left.getParent();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left.getParent();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getParent();	  return    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
26	[BUG]  [BUGGY]  return  right.getParent();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  right.getParent();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.getParent();	  return    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
27	[BUG]  [BUGGY]  n.getParent().removeChild(left);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  n.getParent().removeChild(left);  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getParent().removeChild(left);	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
28	[BUG]  [BUGGY]  n.getParent().removeChild(right);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  n.getParent().removeChild(right);  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getParent().removeChild(right);	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal());  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  right,  new  NodeTraversal());	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
30	[BUG]  [BUGGY]  Node  op  =  left.getNext();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  Node  op  =  left.getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  op  =  left.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal());  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal());	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
32	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  Node  n  =  left.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
33	[BUG]  [BUGGY]  Node  rn  =  left.getNext();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  Node  rn  =  left.getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  rn  =  left.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
34	[BUG]  [BUGGY]  return  n.getFirstChild();  Node  n  =  left.getFirstChild();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getFirstChild();  Node  n  =  left.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getFirstChild();    Node  n  =  left.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
35	[BUG]  [BUGGY]  return  n.getFirstChild();  Node  n  =  right.getFirstChild();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getFirstChild();  Node  n  =  right.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getFirstChild();    Node  n  =  right.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
36	[BUG]  [BUGGY]  return  n.getFirstChild();  Node  n  =  left.getLastChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getFirstChild();  Node  n  =  left.getLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getFirstChild();    Node  n  =  left.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
37	[BUG]  [BUGGY]  return  n.getFirstChild();  Node  n  =  left.getFirstChild();  return  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getFirstChild();  Node  n  =  left.getFirstChild();  return  n.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getFirstChild();    Node  n  =  left.getFirstChild();  return  n.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
38	[BUG]  [BUGGY]  return  n.getFirstChild();  Node  n  =  left.getNext();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getFirstChild();  Node  n  =  left.getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getFirstChild();    Node  n  =  left.getNext();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
39	[BUG]  [BUGGY]  return  n.getFirstChild();  Node  n  =  left.getLastChild();  return  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getFirstChild();  Node  n  =  left.getLastChild();  return  n.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getFirstChild();    Node  n  =  left.getLastChild();  return  n.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
40	[BUG]  [BUGGY]  return  n.getFirstChild();  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getFirstChild();  n.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getFirstChild();    n.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
41	[BUG]  [BUGGY]  return  n.getFirstChild();  Node  n  =  right.getLastChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getFirstChild();  Node  n  =  right.getLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getFirstChild();    Node  n  =  right.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
42	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  left.getFirstChild().getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext();	  result    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
43	[BUG]  [BUGGY]  result  =  n.getLastChild().getNext();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  n.getLastChild().getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getLastChild().getNext();	  result    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
44	[BUG]  [BUGGY]  result  =  right.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  right.getFirstChild().getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getFirstChild().getNext();	  result    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
45	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  n.getFirstChild().getNext()  +  1;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext()  +  1;	  result    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
46	[BUG]  [BUGGY]  result  =  n.getFirstChild().getString();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  n.getFirstChild().getString();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getString();	  result    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
47	[BUG]  [BUGGY]  result  =  left,  n.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  left,  n.getFirstChild().getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left,  n.getFirstChild().getNext();	  result    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	13	None	replace
48	[BUG]  [BUGGY]  result  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  n.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild();	  return    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
49	[BUG]  [BUGGY]  n.removeChild(right);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  n.removeChild(right);  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.removeChild(right);	  return    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
50	[BUG]  [BUGGY]  return  right.getFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  right.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.getFirstChild();	  return    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
51	[BUG]  [BUGGY]  result  =  n.getFirstChild().replaceChild(left,  right);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  n.getFirstChild().replaceChild(left,  right);  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().replaceChild(left,  right);	  result    =    n.getFirstChild().replaceChild(left,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
52	[BUG]  [BUGGY]  result  =  left.getFirstChild().replaceChild(n,  right);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  left.getFirstChild().replaceChild(n,  right);  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().replaceChild(n,  right);	  result    =    n.getFirstChild().replaceChild(left,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
53	[BUG]  [BUGGY]  result  =  left.getFirstChild().replaceChild(left,  right);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  left.getFirstChild().replaceChild(left,  right);  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().replaceChild(left,  right);	  result    =    n.getFirstChild().replaceChild(left,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
54	[BUG]  [BUGGY]  result  =  left.getFirstChild().replaceChild(n,  newNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  left.getFirstChild().replaceChild(n,  newNode);  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().replaceChild(n,  newNode);	  result    =    n.getFirstChild().replaceChild(left,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
55	[BUG]  [BUGGY]  result  =  n.getFirstChild().replaceChild(left,  left);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  n.getFirstChild().replaceChild(left,  left);  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().replaceChild(left,  left);	  result    =    n.getFirstChild().replaceChild(left,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
56	[BUG]  [BUGGY]  result  =  left.getFirstChild().replaceChild(left,  newNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  left.getFirstChild().replaceChild(left,  newNode);  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().replaceChild(left,  newNode);	  result    =    n.getFirstChild().replaceChild(left,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
57	[BUG]  [BUGGY]  return  n.getParent();  Node  n  =  left.getNext();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getParent();  Node  n  =  left.getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getParent();    Node  n  =  left.getNext();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
58	[BUG]  [BUGGY]  return  n.getParent();  Node  n  =  left.getFirstChild();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getParent();  Node  n  =  left.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getParent();    Node  n  =  left.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
59	[BUG]  [BUGGY]  return  n.getParent();  Node  n  =  left.getParent();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getParent();  Node  n  =  left.getParent();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getParent();    Node  n  =  left.getParent();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
60	[BUG]  [BUGGY]  return  n.getParent();  Node  n  =  left.getLastChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getParent();  Node  n  =  left.getLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getParent();    Node  n  =  left.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
61	[BUG]  [BUGGY]  return  n.getParent();  Node  n  =  right.getParent();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getParent();  Node  n  =  right.getParent();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getParent();    Node  n  =  right.getParent();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
62	[BUG]  [BUGGY]  return  n.getParent();  Node  n  =  right.getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getParent();  Node  n  =  right.getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getParent();    Node  n  =  right.getNext();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
63	[BUG]  [BUGGY]  return  n.getParent();  Node  n  =  right.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getParent();  Node  n  =  right.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getParent();    Node  n  =  right.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
64	[BUG]  [BUGGY]  return  n.getParent();  Node  n  =  right.getLastChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getParent();  Node  n  =  right.getLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getParent();    Node  n  =  right.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
65	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext().getNext();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  left.getFirstChild().getNext().getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext().getNext();	  result    =    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
66	[BUG]  [BUGGY]  result  =  right.getFirstChild().getNext().getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  right.getFirstChild().getNext().getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getFirstChild().getNext().getNext();	  result    =    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
67	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext().getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  n.getFirstChild().getNext().getNext()  +  1;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext().getNext()  +  1;	  result    =    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
68	[BUG]  [BUGGY]  result  =  n.getLastChild().getNext().getNext();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  n.getLastChild().getNext().getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getLastChild().getNext().getNext();	  result    =    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
69	[BUG]  [BUGGY]  result  =  left,  n.getFirstChild().getNext().getNext();  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  left,  n.getFirstChild().getNext().getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left,  n.getFirstChild().getNext().getNext();	  result    =    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  ';'  expected	15	None	replace
70	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext().getNext().getNext();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  left.getFirstChild().getNext().getNext().getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext().getNext().getNext();	  result    =    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
71	[BUG]  [BUGGY]  return  n.getLastChild();  Node  n  =  left.getFirstChild();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getLastChild();  Node  n  =  left.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getLastChild();    Node  n  =  left.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
72	[BUG]  [BUGGY]  return  n.getLastChild();  Node  n  =  left.getLastChild();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getLastChild();  Node  n  =  left.getLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getLastChild();    Node  n  =  left.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
73	[BUG]  [BUGGY]  return  n.getLastChild();  Node  n  =  left.getFirstChild();  return  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getLastChild();  Node  n  =  left.getFirstChild();  return  n.getLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getLastChild();    Node  n  =  left.getFirstChild();  return  n.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
74	[BUG]  [BUGGY]  return  n.getLastChild();  Node  n  =  right.getLastChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getLastChild();  Node  n  =  right.getLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getLastChild();    Node  n  =  right.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
75	[BUG]  [BUGGY]  return  n.getLastChild();  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getLastChild();  n.getLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getLastChild();    n.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
76	[BUG]  [BUGGY]  return  n.getLastChild();  Node  n  =  left.getLastChild();  return  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getLastChild();  Node  n  =  left.getLastChild();  return  n.getLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getLastChild();    Node  n  =  left.getLastChild();  return  n.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
77	[BUG]  [BUGGY]  return  n.getLastChild();  Node  n  =  right.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getLastChild();  Node  n  =  right.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getLastChild();    Node  n  =  right.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
78	[BUG]  [BUGGY]  return  n.getLastChild();  Node  n  =  right.getLastChild();  return  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getLastChild();  Node  n  =  right.getLastChild();  return  n.getLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getLastChild();    Node  n  =  right.getLastChild();  return  n.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
79	[BUG]  [BUGGY]  n  =  right.getNext();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  n  =  right.getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  right.getNext();	  n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
80	[BUG]  [BUGGY]  n  =  left.getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  n  =  left.getNext()  +  1;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getNext()  +  1;	  n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
81	[BUG]  [BUGGY]  n  =  left.getParent();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  n  =  left.getParent();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getParent();	  n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
82	[BUG]  [BUGGY]  n  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  n  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;	  n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
83	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
84	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  op.getType()  ==  Token.GETELEM;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  op.getType()  ==  Token.GETELEM;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.GETELEM  ||  op.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
85	[BUG]  [BUGGY]  return  n.getType()!=  Token.GETELEM;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getType()!=  Token.GETELEM;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()!=  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
86	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
87	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getParent().getType()  ==  Token.GETELEM;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getParent().getType()  ==  Token.GETELEM;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.GETELEM  ||  n.getParent().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
88	[BUG]  [BUGGY]  n.removeChild(left,  right);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  n.removeChild(left,  right);  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.removeChild(left,  right);	  n.removeChild(left);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
89	[BUG]  [BUGGY]  n.replaceChild(left,  newNode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  n.replaceChild(left,  newNode);  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.replaceChild(left,  newNode);	  n.removeChild(left);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
90	[BUG]  [BUGGY]  n.removeChild(left,  newNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  n.removeChild(left,  newNode);  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.removeChild(left,  newNode);	  n.removeChild(left);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
91	[BUG]  [BUGGY]  return  op.getType()  ==  Token.GETELEM;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  op.getType()  ==  Token.GETELEM;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  op.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
92	[BUG]  [BUGGY]  return  right.getType()  ==  Token.GETELEM;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  right.getType()  ==  Token.GETELEM;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
93	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
94	[BUG]  [BUGGY]  return  n.getFirstChild();  Node  n  =  left.getNext();  return  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getFirstChild();  Node  n  =  left.getNext();  return  n.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getFirstChild();    Node  n  =  left.getNext();  return  n.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
95	[BUG]  [BUGGY]  return  n.getFirstChild();  Node  n  =  right.getFirstChild();  return  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getFirstChild();  Node  n  =  right.getFirstChild();  return  n.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getFirstChild();    Node  n  =  right.getFirstChild();  return  n.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
96	[BUG]  [BUGGY]  result  =  left,  right.getFirstChild().getNext().getNext();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  left,  right.getFirstChild().getNext().getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left,  right.getFirstChild().getNext().getNext();	  result    =    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  ';'  expected	15	None	replace
97	[BUG]  [BUGGY]  result  =  left,  left.getFirstChild().getNext().getNext();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  left,  left.getFirstChild().getNext().getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left,  left.getFirstChild().getNext().getNext();	  result    =    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  ';'  expected	15	None	replace
98	[BUG]  [BUGGY]  result  =  n.getFirstChild().getParent();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  n.getFirstChild().getParent();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getParent();	  result    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
99	[BUG]  [BUGGY]  n.replaceChild(left,  right);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  n.replaceChild(left,  right);  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.replaceChild(left,  right);	  n.removeChild(left);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNode);  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  newNode);	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
101	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  n);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  NodeTraversal.traverse(compiler,  left,  n);  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  n);	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
102	[BUG]  [BUGGY]  Node  op  =  left.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  Node  op  =  left.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  op  =  left.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
103	[BUG]  [BUGGY]  return  left;  Node  left  =  left.getFirstChild();  return  left;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left;  Node  left  =  left.getFirstChild();  return  left;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left;    Node  left  =  left.getFirstChild();  return  left;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
104	[BUG]  [BUGGY]  return  left;  Node  left  =  left.getNext();  return  left;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left;  Node  left  =  left.getNext();  return  left;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left;    Node  left  =  left.getNext();  return  left;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
105	[BUG]  [BUGGY]  return  n.getParent();  Node  n  =  left.getNext();  return  n.getParent();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getParent();  Node  n  =  left.getNext();  return  n.getParent();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getParent();    Node  n  =  left.getNext();  return  n.getParent();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
106	[BUG]  [BUGGY]  return  n.getParent();  Node  n  =  left.getFirstChild();  return  n.getParent();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getParent();  Node  n  =  left.getFirstChild();  return  n.getParent();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getParent();    Node  n  =  left.getFirstChild();  return  n.getParent();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
107	[BUG]  [BUGGY]  return  n.getParent();  Node  n  =  left.getParent();  return  n.getParent();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getParent();  Node  n  =  left.getParent();  return  n.getParent();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getParent();    Node  n  =  left.getParent();  return  n.getParent();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
108	[BUG]  [BUGGY]  return  left.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left.removeFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.removeFirstChild();	  return    left;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
109	[BUG]  [BUGGY]  return  left.getType()  ==  Token.FUNCTION;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left.getType()  ==  Token.FUNCTION;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.FUNCTION;	  return    left;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
110	[BUG]  [BUGGY]  n  =  left.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  n  =  left.removeFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.removeFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
111	[BUG]  [BUGGY]  return  n.getLastChild();  return  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getLastChild();  return  n.getLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getLastChild();    return  n.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
112	[BUG]  [BUGGY]  return  n.getLastChild();  Node  n  =  left.getNext();  return  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getLastChild();  Node  n  =  left.getNext();  return  n.getLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getLastChild();    Node  n  =  left.getNext();  return  n.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
113	[BUG]  [BUGGY]  result  =  left.getFirstChild().replaceChild(right,  newNode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  left.getFirstChild().replaceChild(right,  newNode);  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().replaceChild(right,  newNode);	  result    =    n.getFirstChild().replaceChild(left,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
114	[BUG]  [BUGGY]  n  =  left.replaceChild(right,  newNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  n  =  left.replaceChild(right,  newNode);  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.replaceChild(right,  newNode);	  n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
115	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext().removeFirstChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  n.getFirstChild().getNext().removeFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext().removeFirstChild();	  result    =    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
116	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext().replaceChild(n,  left);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  n.getFirstChild().getNext().replaceChild(n,  left);  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext().replaceChild(n,  left);	  result    =    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
117	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext().cloneTree();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  n.getFirstChild().getNext().cloneTree();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext().cloneTree();	  result    =    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants());  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants());	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants());  break;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants());  break;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants());  break;	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
120	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  right);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  n.getParent().replaceChild(left,  right);  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getParent().replaceChild(left,  right);	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
121	[BUG]  [BUGGY]  return  n.getLastChild();  Node  n  =  right.getFirstChild();  return  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getLastChild();  Node  n  =  right.getFirstChild();  return  n.getLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getLastChild();    Node  n  =  right.getFirstChild();  return  n.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
122	[BUG]  [BUGGY]  return  n.getLastChild();  n.removeLastChild();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getLastChild();  n.removeLastChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getLastChild();    n.removeLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
123	[BUG]  [BUGGY]  n  =  left.replaceChild(right,  new  Node(Token.EMPTY));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  n  =  left.replaceChild(right,  new  Node(Token.EMPTY));  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.replaceChild(right,  new  Node(Token.EMPTY));	  n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
124	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM;  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
125	[BUG]  [BUGGY]  return  left.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left.getFirstChild().getNext();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getFirstChild().getNext();	  return    left;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
126	[BUG]  [BUGGY]  return  n.getFirstChild();  return  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getFirstChild();  return  n.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getFirstChild();    return  n.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
127	[BUG]  [BUGGY]  result  =  n.getFirstChild().removeFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  result  =  n.getFirstChild().removeFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().removeFirstChild();	  result    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
128	[BUG]  [BUGGY]  return  left;  n  =  left.getFirstChild();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  left;  n  =  left.getFirstChild();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left;    n  =  left.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
129	[BUG]  [BUGGY]  return  n.getParent();  n.getParent();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getParent();  n.getParent();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getParent();    n.getParent();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
130	[BUG]  [BUGGY]  return  n.getParent();  return  n.getParent();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:      [BUGGY]  return  n.getParent();  return  n.getParent();  [BUGGY]    }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    n.getParent();    return  n.getParent();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
