bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext().removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getNext().removeFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext().removeFirstChild();	  result    =    n.getFirstChild().getNext().removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
2	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext().removeLastChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().getNext().removeLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext().removeLastChild();	  result    =    n.getFirstChild().getNext().removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
3	[BUG]  [BUGGY]  result  =  right.getFirstChild().getNext().removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right.getFirstChild().getNext().removeFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getFirstChild().getNext().removeFirstChild();	  result    =    n.getFirstChild().getNext().removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
4	[BUG]  [BUGGY]  result  =  n.getLastChild().getNext().removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getLastChild().getNext().removeFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getLastChild().getNext().removeFirstChild();	  result    =    n.getFirstChild().getNext().removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
5	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext().replaceChild(n,  right);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().getNext().replaceChild(n,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext().replaceChild(n,  right);	  result    =    n.getFirstChild().getNext().removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
6	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  return  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.getFirstChild();  return  n.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.getFirstChild();  return  n.getFirstChild();	  return    n.getFirstChild();    Node    n    =    right.getFirstChild();    return    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
7	[BUG]  [BUGGY]  Node  n  =  right.getFirstChild();  return  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  right.getFirstChild();  return  n.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  right.getFirstChild();  return  n.getFirstChild();	  return    n.getFirstChild();    Node    n    =    right.getFirstChild();    return    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
8	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  return  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.getFirstChild();  return  n.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.getFirstChild();  return  n.getLastChild();	  return    n.getFirstChild();    Node    n    =    right.getFirstChild();    return    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
9	[BUG]  [BUGGY]  Node  n  =  right.getFirstChild();  return  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  right.getFirstChild();  return  n.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  right.getFirstChild();  return  n.getLastChild();	  return    n.getFirstChild();    Node    n    =    right.getFirstChild();    return    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
10	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  return  n.getNext();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.getFirstChild();  return  n.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.getFirstChild();  return  n.getNext();	  return    n.getFirstChild();    Node    n    =    right.getFirstChild();    return    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
11	[BUG]  [BUGGY]  n.getParent().removeChild(right,  left);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getParent().removeChild(right,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getParent().removeChild(right,  left);	  n.getParent().removeChild(right);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
12	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getParent().replaceChild(n,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getParent().replaceChild(n,  right);	  n.getParent().removeChild(right);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
13	[BUG]  [BUGGY]  n.getNext().removeChild(right);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getNext().removeChild(right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getNext().removeChild(right);	  n.getParent().removeChild(right);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal());  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  n,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    right,    new    NodeTraversal());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
15	[BUG]  [BUGGY]  Traversal.traverse(compiler,  left,  new  NodeTraversal());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Traversal.traverse(compiler,  left,  new  NodeTraversal());  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Traversal.traverse(compiler,  left,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    right,    new    NodeTraversal());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
16	[BUG]  [BUGGY]  Traverse.traverse(compiler,  left,  new  NodeTraversal());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Traverse.traverse(compiler,  left,  new  NodeTraversal());  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Traverse.traverse(compiler,  left,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    right,    new    NodeTraversal());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(),  left);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(),  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(),  left);	  NodeTraversal.traverse(compiler,    right,    new    NodeTraversal());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
18	[BUG]  [BUGGY]  Node  n  =  right.getLastChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  right.getLastChild();	  return    n.getLastChild();    Node    n    =    right.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
19	[BUG]  [BUGGY]  Node  n  =  right.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  right.getFirstChild();	  return    n.getLastChild();    Node    n    =    right.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
20	[BUG]  [BUGGY]  Node  n  =  left.getLastChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.getLastChild();	  return    n.getLastChild();    Node    n    =    right.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
21	[BUG]  [BUGGY]  n  =  right.getLastChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  right.getLastChild();	  return    n.getLastChild();    Node    n    =    right.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
22	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext().getNext().getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getNext().getNext().getNext()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext().getNext().getNext()  +  1;	  result    =    n.getFirstChild().getNext().getNext()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
23	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext().getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getNext().getNext()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext().getNext()  +  1;	  result    =    n.getFirstChild().getNext().getNext()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
24	[BUG]  [BUGGY]  result  =  n.getLastChild().getNext().getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getLastChild().getNext().getNext()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getLastChild().getNext().getNext()  +  1;	  result    =    n.getFirstChild().getNext().getNext()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
25	[BUG]  [BUGGY]  result  =  right.getFirstChild().getNext().getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right.getFirstChild().getNext().getNext()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getFirstChild().getNext().getNext()  +  1;	  result    =    n.getFirstChild().getNext().getNext()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
26	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getParent().replaceChild(left,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getParent().replaceChild(left,  newNode);	  n.getParent().replaceChild(left,    right);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
27	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  right,  newNode);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getParent().replaceChild(left,  right,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getParent().replaceChild(left,  right,  newNode);	  n.getParent().replaceChild(left,    right);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
28	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  left);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getParent().replaceChild(left,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getParent().replaceChild(left,  left);	  n.getParent().replaceChild(left,    right);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
29	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  right,  result);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getParent().replaceChild(left,  right,  result);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getParent().replaceChild(left,  right,  result);	  n.getParent().replaceChild(left,    right);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
30	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  right,  this);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getParent().replaceChild(left,  right,  this);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getParent().replaceChild(left,  right,  this);	  n.getParent().replaceChild(left,    right);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
31	[BUG]  [BUGGY]  n  =  left.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.replaceChild(n,  new  Node(Token.EMPTY));	  n    =    left.replaceChild(right,    new    Node(Token.EMPTY));    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
32	[BUG]  [BUGGY]  n  =  right.replaceChild(left,  new  Node(Token.EMPTY));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  right.replaceChild(left,  new  Node(Token.EMPTY));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  right.replaceChild(left,  new  Node(Token.EMPTY));	  n    =    left.replaceChild(right,    new    Node(Token.EMPTY));    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
33	[BUG]  [BUGGY]  n  =  left.replaceChild(right,  new  Node(Token.EMPTY,  result));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.replaceChild(right,  new  Node(Token.EMPTY,  result));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.replaceChild(right,  new  Node(Token.EMPTY,  result));	  n    =    left.replaceChild(right,    new    Node(Token.EMPTY));    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
34	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  new  Node(Token.EMPTY));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.replaceChild(left,  new  Node(Token.EMPTY));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.replaceChild(left,  new  Node(Token.EMPTY));	  n    =    left.replaceChild(right,    new    Node(Token.EMPTY));    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
35	[BUG]  [BUGGY]  n  =  left.replaceChild(right,  new  Node(Token.EMPTY),  result);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.replaceChild(right,  new  Node(Token.EMPTY),  result);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.replaceChild(right,  new  Node(Token.EMPTY),  result);	  n    =    left.replaceChild(right,    new    Node(Token.EMPTY));    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
36	[BUG]  [BUGGY]  n  =  left.replaceChild(right,  new  Node(Token.EMPTY,  true));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.replaceChild(right,  new  Node(Token.EMPTY,  true));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.replaceChild(right,  new  Node(Token.EMPTY,  true));	  n    =    left.replaceChild(right,    new    Node(Token.EMPTY));    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
37	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
38	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.GETELEM;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
39	[BUG]  [BUGGY]  return  right.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
40	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.GETELEM;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
41	[BUG]  [BUGGY]  return  right.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
42	[BUG]  [BUGGY]  Node  n  =  left.getNext();  return  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.getNext();  return  n.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.getNext();  return  n.getLastChild();	  return    n.getLastChild();    Node    n    =    left.getNext();    return    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
43	[BUG]  [BUGGY]  Node  n  =  left.getNext();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.getNext();	  return    n.getLastChild();    Node    n    =    left.getNext();    return    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
44	[BUG]  [BUGGY]  Node  n  =  left.getNext();  return  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.getNext();  return  n.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.getNext();  return  n.getFirstChild();	  return    n.getLastChild();    Node    n    =    left.getNext();    return    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
45	[BUG]  [BUGGY]  n  =  left.getNext();  return  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getNext();  return  n.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getNext();  return  n.getLastChild();	  return    n.getLastChild();    Node    n    =    left.getNext();    return    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
46	[BUG]  [BUGGY]  Node  n  =  right.getNext();  return  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  right.getNext();  return  n.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  right.getNext();  return  n.getLastChild();	  return    n.getLastChild();    Node    n    =    left.getNext();    return    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
47	[BUG]  [BUGGY]  Node  left  =  left.getNext();  return  right.getLastChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  left.getNext();  return  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  left.getNext();  return  right.getLastChild();	  return    n.getLastChild();    Node    n    =    left.getNext();    return    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
48	[BUG]  [BUGGY]  return  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  node.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  node.getLastChild();	  return    right.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
49	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  n.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  n.getFirstChild();	  return    left;    Node    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
50	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  right.getFirstChild();	  return    left;    Node    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
51	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  left.getFirstChild();	  return    left;    Node    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
52	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  n.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  n.getLastChild();	  return    left;    Node    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
53	[BUG]  [BUGGY]  node  =  left.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  node  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	node  =  left.getFirstChild();	  return    left;    Node    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
54	[BUG]  [BUGGY]  node  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  node  =  n.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	node  =  n.getFirstChild();	  return    left;    Node    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
55	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  &&  op.getType()  ==  Token.GETELEM;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()  ==  Token.GETELEM  &&  op.getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.GETELEM  &&  op.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    op.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
56	[BUG]  [BUGGY]  return  op.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  op.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  op.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    op.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
57	[BUG]  [BUGGY]  n  =  right.getParent();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  right.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  right.getParent();	  n    =    left.getParent();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
58	[BUG]  [BUGGY]  result  =  left.getLastChild().getNext().getNext();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getLastChild().getNext().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getLastChild().getNext().getNext();	  result    =    right.getFirstChild().getNext().getNext();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
59	[BUG]  [BUGGY]  result  =  right.getLastChild().getNext().getNext();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right.getLastChild().getNext().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getLastChild().getNext().getNext();	  result    =    right.getFirstChild().getNext().getNext();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
60	[BUG]  [BUGGY]  result  =  right.getFirstChild().getNext().getNext()?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right.getFirstChild().getNext().getNext()?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getFirstChild().getNext().getNext()?  Boolean.TRUE  :  Boolean.FALSE;	  result    =    right.getFirstChild().getNext().getNext();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
61	[BUG]  [BUGGY]  result  =  right.getFirstChild().getNext().getNext(),  left.getLastChild().getNext();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right.getFirstChild().getNext().getNext(),  left.getLastChild().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getFirstChild().getNext().getNext(),  left.getLastChild().getNext();	  result    =    right.getFirstChild().getNext().getNext();    	non-compiled	[CE]  ';'  expected	66	None	replace
62	[BUG]  [BUGGY]  n  =  right.getFirstChild();  return  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  right.getFirstChild();  return  n.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  right.getFirstChild();  return  n.getLastChild();	  return    n.getLastChild();    Node    n    =    right.getFirstChild();    return    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
63	[BUG]  [BUGGY]  n  =  left.getFirstChild();  return  right.getLastChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getFirstChild();  return  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getFirstChild();  return  right.getLastChild();	  return    n.getLastChild();    Node    n    =    right.getFirstChild();    return    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  return    n.getLastChild();    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	  return    n.getLastChild();    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  right);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  right);	  NodeTraversal.traverse(compiler,    left,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  n,  newNode);	  NodeTraversal.traverse(compiler,    left,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  newNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  right,  newNode);	  NodeTraversal.traverse(compiler,    left,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNode,  right);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNode,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  newNode,  right);	  NodeTraversal.traverse(compiler,    left,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNode);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  right,  newNode);	  NodeTraversal.traverse(compiler,    left,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNode,  this);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNode,  this);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  newNode,  this);	  NodeTraversal.traverse(compiler,    left,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNode,  reverse);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNode,  reverse);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  newNode,  reverse);	  NodeTraversal.traverse(compiler,    left,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
73	[BUG]  [BUGGY]  return  left.getLastChild();  Node  left  =  left.getFirstChild();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getLastChild();  Node  left  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left.getLastChild();    Node  left  =  left.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
74	[BUG]  [BUGGY]  return  left.getLastChild();  Node  left  =  left.getLastChild();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getLastChild();  Node  left  =  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left.getLastChild();    Node  left  =  left.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
75	[BUG]  [BUGGY]  return  left.getLastChild();  Node  left  =  right.getLastChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getLastChild();  Node  left  =  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left.getLastChild();    Node  left  =  right.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
76	[BUG]  [BUGGY]  return  left.getLastChild();  Node  left  =  left.getFirstChild();  return  left.getLastChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getLastChild();  Node  left  =  left.getFirstChild();  return  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left.getLastChild();    Node  left  =  left.getFirstChild();  return  left.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
77	[BUG]  [BUGGY]  return  left.getLastChild();  Node  left  =  right.getFirstChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getLastChild();  Node  left  =  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left.getLastChild();    Node  left  =  right.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
78	[BUG]  [BUGGY]  return  left.getLastChild();  Node  left  =  left.getLastChild();  return  left.getLastChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getLastChild();  Node  left  =  left.getLastChild();  return  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left.getLastChild();    Node  left  =  left.getLastChild();  return  left.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
79	[BUG]  [BUGGY]  return  left.getLastChild();  Node  left  =  right.getFirstChild();  return  left.getLastChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getLastChild();  Node  left  =  right.getFirstChild();  return  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left.getLastChild();    Node  left  =  right.getFirstChild();  return  left.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
80	[BUG]  [BUGGY]  return  left.getLastChild();  Node  left  =  right.getLastChild();  return  left.getLastChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getLastChild();  Node  left  =  right.getLastChild();  return  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left.getLastChild();    Node  left  =  right.getLastChild();  return  left.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
81	[BUG]  [BUGGY]  result  =  left,  right.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left,  right.getFirstChild().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left,  right.getFirstChild().getNext();	  result    =    left,    n.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	47	None	replace
82	[BUG]  [BUGGY]  result  =  right,  n.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right,  n.getFirstChild().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right,  n.getFirstChild().getNext();	  result    =    left,    n.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	47	None	replace
83	[BUG]  [BUGGY]  result  =  n,  left.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n,  left.getFirstChild().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n,  left.getFirstChild().getNext();	  result    =    left,    n.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	47	None	replace
84	[BUG]  [BUGGY]  result  =  right,  left.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right,  left.getFirstChild().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right,  left.getFirstChild().getNext();	  result    =    left,    n.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	47	None	replace
85	[BUG]  [BUGGY]  result  =  left,  n.getLastChild().getNext();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left,  n.getLastChild().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left,  n.getLastChild().getNext();	  result    =    left,    n.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	47	None	replace
86	[BUG]  [BUGGY]  Node  n  =  left.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.removeFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.removeFirstChild();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
87	[BUG]  [BUGGY]  Node  n  =  left.cloneTree();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.cloneTree();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
88	[BUG]  [BUGGY]  node  =  right.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  node  =  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	node  =  right.getLastChild();	  return    n.getParent();    Node    n    =    right.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
89	[BUG]  [BUGGY]  n.replaceChild(left,  newNode,  right);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.replaceChild(left,  newNode,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.replaceChild(left,  newNode,  right);	  n.replaceChild(left,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
90	[BUG]  [BUGGY]  n.replaceChild(left,  newNode,  reportCodeChange());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.replaceChild(left,  newNode,  reportCodeChange());  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.replaceChild(left,  newNode,  reportCodeChange());	  n.replaceChild(left,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
91	[BUG]  [BUGGY]  n.replaceChild(left,  newNode,  result);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.replaceChild(left,  newNode,  result);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.replaceChild(left,  newNode,  result);	  n.replaceChild(left,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
92	[BUG]  [BUGGY]  n.replaceChild(left,  newNode,  this);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.replaceChild(left,  newNode,  this);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.replaceChild(left,  newNode,  this);	  n.replaceChild(left,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
93	[BUG]  [BUGGY]  n.replaceChild(right,  newNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.replaceChild(right,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.replaceChild(right,  newNode);	  n.replaceChild(left,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
94	[BUG]  [BUGGY]  return  n;  n  =  left.getFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n;  n  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n;  n  =  left.getFirstChild();	  return    left;    n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
95	[BUG]  [BUGGY]  return  left;  n  =  right.getFirstChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left;  n  =  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left;  n  =  right.getFirstChild();	  return    left;    n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
96	[BUG]  [BUGGY]  return  right;  n  =  left.getFirstChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right;  n  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right;  n  =  left.getFirstChild();	  return    left;    n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
97	[BUG]  [BUGGY]  n.removeLastChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.removeLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.removeLastChild();	  return    n.getLastChild();    n.removeLastChild();    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
98	[BUG]  [BUGGY]  return  n.getFirstChild();  n.removeLastChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getFirstChild();  n.removeLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getFirstChild();  n.removeLastChild();	  return    n.getLastChild();    n.removeLastChild();    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
99	[BUG]  [BUGGY]  removeLastChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  removeLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	removeLastChild();	  return    n.getLastChild();    n.removeLastChild();    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
100	[BUG]  [BUGGY]  node.removeLastChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  node.removeLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	node.removeLastChild();	  return    n.getLastChild();    n.removeLastChild();    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
101	[BUG]  [BUGGY]  n.getLastChild();  n.removeLastChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getLastChild();  n.removeLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getLastChild();  n.removeLastChild();	  return    n.getLastChild();    n.removeLastChild();    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
102	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  return  left;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  right.getFirstChild();  return  left;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  right.getFirstChild();  return  left;	  return    left;    Node    left    =    right.getFirstChild();    return    left;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
103	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  return  left;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  n.getFirstChild();  return  left;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  n.getFirstChild();  return  left;	  return    left;    Node    left    =    right.getFirstChild();    return    left;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
104	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();  return  left;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  right.getLastChild();  return  left;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  right.getLastChild();  return  left;	  return    left;    Node    left    =    right.getFirstChild();    return    left;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
105	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  right.getLastChild();	  return    left;    Node    left    =    right.getFirstChild();    return    left;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
106	[BUG]  [BUGGY]  return  right.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.removeFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.removeFirstChild();	  return    left.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
107	[BUG]  [BUGGY]  return  n.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.removeFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.removeFirstChild();	  return    left.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
108	[BUG]  [BUGGY]  return  left.removeLastChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.removeLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.removeLastChild();	  return    left.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
109	[BUG]  [BUGGY]  return  left.replaceChild(n,  right);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.replaceChild(n,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.replaceChild(n,  right);	  return    left.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
110	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM;	  return    left.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
111	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.GETELEM?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.GETELEM?  Boolean.TRUE  :  Boolean.FALSE;	  return    left.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
112	[BUG]  [BUGGY]  return  left.getType()!=  Token.GETELEM;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()!=  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()!=  Token.GETELEM;	  return    left.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
113	[BUG]  [BUGGY]  Node  n  =  left.getNext();  return  n.getParent();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.getNext();  return  n.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.getNext();  return  n.getParent();	  return    n.getParent();    Node    n    =    left.getNext();    return    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
114	[BUG]  [BUGGY]  Node  n  =  right.getNext();  return  n.getParent();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  right.getNext();  return  n.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  right.getNext();  return  n.getParent();	  return    n.getParent();    Node    n    =    left.getNext();    return    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
115	[BUG]  [BUGGY]  n  =  left.getNext();  return  n.getParent();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getNext();  return  n.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getNext();  return  n.getParent();	  return    n.getParent();    Node    n    =    left.getNext();    return    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
116	[BUG]  [BUGGY]  Node  n  =  right.getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  right.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  right.getNext();	  return    n.getParent();    Node    n    =    left.getNext();    return    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
117	[BUG]  [BUGGY]  n  =  left.getNext();  return  right.getParent();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getNext();  return  right.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getNext();  return  right.getParent();	  return    n.getParent();    Node    n    =    left.getNext();    return    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
118	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext().replaceChild(n,  right);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getNext().replaceChild(n,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext().replaceChild(n,  right);	  result    =    n.getFirstChild().getNext().replaceChild(n,    left);    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
119	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext().replaceChild(n,  n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getNext().replaceChild(n,  n);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext().replaceChild(n,  n);	  result    =    n.getFirstChild().getNext().replaceChild(n,    left);    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
120	[BUG]  [BUGGY]  result  =  right.getFirstChild().getNext().replaceChild(n,  left);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right.getFirstChild().getNext().replaceChild(n,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getFirstChild().getNext().replaceChild(n,  left);	  result    =    n.getFirstChild().getNext().replaceChild(n,    left);    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
121	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext().replaceChild(n,  newNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getNext().replaceChild(n,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext().replaceChild(n,  newNode);	  result    =    n.getFirstChild().getNext().replaceChild(n,    left);    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
122	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext().replaceChild(n,  left);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getNext().replaceChild(n,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext().replaceChild(n,  left);	  result    =    n.getFirstChild().getNext().replaceChild(n,    left);    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  left.getNext();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  left.getNext();	  return    n.getParent();    Node    n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  n  =  left.getNext();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  n  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  n  =  left.getNext();	  return    n.getParent();    Node    n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  left.getNext();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  left.getNext();	  return    n.getParent();    Node    n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  left.getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  left.getNext();	  return    n.getParent();    Node    n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
127	[BUG]  [BUGGY]  Node  n  =  left.getParent();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.getParent();	  return    n.getParent();    Node    n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
128	[BUG]  [BUGGY]  result  =  right.getLastChild().getNext();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right.getLastChild().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getLastChild().getNext();	  result    =    right.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
129	[BUG]  [BUGGY]  result  =  left.getLastChild().getNext();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getLastChild().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getLastChild().getNext();	  result    =    right.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
130	[BUG]  [BUGGY]  result  =  left.getFirstChild().getParent();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getParent();	  result    =    right.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
131	[BUG]  [BUGGY]  Node  n  =  left.getParent();  return  n.getParent();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.getParent();  return  n.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.getParent();  return  n.getParent();	  return    n.getParent();    Node    n    =    left.getParent();    return    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
132	[BUG]  [BUGGY]  Node  n  =  left.getParent();  return  n.getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.getParent();  return  n.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.getParent();  return  n.getNext();	  return    n.getParent();    Node    n    =    left.getParent();    return    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
133	[BUG]  [BUGGY]  n  =  left.getParent();  return  right.getParent();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getParent();  return  right.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getParent();  return  right.getParent();	  return    n.getParent();    Node    n    =    left.getParent();    return    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
134	[BUG]  [BUGGY]  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getLastChild();	  return    n.getLastChild();    return    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
135	[BUG]  [BUGGY]  n  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  n.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  n.getFirstChild();	  return    n.getLastChild();    Node    n    =    right.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
136	[BUG]  [BUGGY]  result  =  left.getLastChild().replaceChild(n,  newNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getLastChild().replaceChild(n,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getLastChild().replaceChild(n,  newNode);	  result    =    left.getFirstChild().replaceChild(left,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
137	[BUG]  [BUGGY]  result  =  right.getFirstChild().replaceChild(left,  newNode);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right.getFirstChild().replaceChild(left,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getFirstChild().replaceChild(left,  newNode);	  result    =    left.getFirstChild().replaceChild(left,    newNode);    	non-compiled	[CE]  ';'  expected	56	None	replace
138	[BUG]  [BUGGY]  result  =  left.getLastChild().replaceChild(left,  newNode);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getLastChild().replaceChild(left,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getLastChild().replaceChild(left,  newNode);	  result    =    left.getFirstChild().replaceChild(left,    newNode);    	non-compiled	[CE]  ';'  expected	56	None	replace
139	[BUG]  [BUGGY]  result  =  right.getFirstChild().replaceChild(n,  newNode);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right.getFirstChild().replaceChild(n,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getFirstChild().replaceChild(n,  newNode);	  result    =    left.getFirstChild().replaceChild(left,    newNode);    	non-compiled	[CE]  ';'  expected	56	None	replace
140	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext()  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getNext()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext()  +  1;	  result    =    n.getFirstChild().getNext()    +    1;    	non-compiled	[CE]  ';'  expected	45	None	replace
141	[BUG]  [BUGGY]  result  =  n.getLastChild().getNext()  +  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getLastChild().getNext()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getLastChild().getNext()  +  1;	  result    =    n.getFirstChild().getNext()    +    1;    	non-compiled	[CE]  ';'  expected	45	None	replace
142	[BUG]  [BUGGY]  result  =  right.getFirstChild().getNext()  +  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right.getFirstChild().getNext()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getFirstChild().getNext()  +  1;	  result    =    n.getFirstChild().getNext()    +    1;    	non-compiled	[CE]  ';'  expected	45	None	replace
143	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext()  *  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().getNext()  *  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext()  *  1;	  result    =    n.getFirstChild().getNext()    +    1;    	non-compiled	[CE]  ';'  expected	45	None	replace
144	[BUG]  [BUGGY]  return  right.getNext();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.getNext();	  return    left.getParent();    	non-compiled	[CE]  ';'  expected	25	None	replace
145	[BUG]  [BUGGY]  return  n;  Node  left  =  right.getLastChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n;  Node  left  =  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n;  Node  left  =  right.getLastChild();	  return    left;    Node    left    =    right.getLastChild();    	non-compiled	[CE]  ';'  expected	20	None	replace
146	[BUG]  [BUGGY]  return  left;  Node  left  =  left.getLastChild();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left;  Node  left  =  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left;  Node  left  =  left.getLastChild();	  return    left;    Node    left    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	19	None	replace
147	[BUG]  [BUGGY]  Node  left  =  left.getLastChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  left.getLastChild();	  return    left;    Node    left    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	19	None	replace
148	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext()  -  1;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getNext()  -  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext()  -  1;	  result    =    left.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	42	None	replace
149	[BUG]  [BUGGY]  result  =  left.getFirstChild().getString();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getString();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getString();	  result    =    left.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	42	None	replace
150	[BUG]  [BUGGY]  n  =  left,  right.getLastChild();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left,  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left,  right.getLastChild();	  n    =    left.getLastChild();    	non-compiled	[CE]  ';'  expected	9	None	replace
151	[BUG]  [BUGGY]  n  =  right,  left.getLastChild();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  right,  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  right,  left.getLastChild();	  n    =    left.getLastChild();    	non-compiled	[CE]  ';'  expected	9	None	replace
152	[BUG]  [BUGGY]  result  =  n.getFirstChild().replaceChild(right,  newNode);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().replaceChild(right,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().replaceChild(right,  newNode);	  result    =    left.getFirstChild().replaceChild(right,    newNode);    	non-compiled	[CE]  ';'  expected	113	None	replace
153	[BUG]  [BUGGY]  result  =  n.getLastChild().replaceChild(left,  newNode);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getLastChild().replaceChild(left,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getLastChild().replaceChild(left,  newNode);	  result    =    left.getFirstChild().replaceChild(right,    newNode);    	non-compiled	[CE]  ';'  expected	113	None	replace
154	[BUG]  [BUGGY]  n  =  left.getNext()  &&  right.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getNext()  &&  right.getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getNext()  &&  right.getType()  ==  Token.FUNCTION;	  n    =    left.getNext()    ||    right.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	82	None	replace
155	[BUG]  [BUGGY]  n  =  left.getFirstChild()  ||  right.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getFirstChild()  ||  right.getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getFirstChild()  ||  right.getType()  ==  Token.FUNCTION;	  n    =    left.getNext()    ||    right.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	82	None	replace
156	[BUG]  [BUGGY]  n  =  left.getNext()  ||  right.getType()!=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getNext()  ||  right.getType()!=  Token.FUNCTION;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getNext()  ||  right.getType()!=  Token.FUNCTION;	  n    =    left.getNext()    ||    right.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	82	None	replace
157	[BUG]  [BUGGY]  n  =  right.getNext()  ||  left.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  right.getNext()  ||  left.getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  right.getNext()  ||  left.getType()  ==  Token.FUNCTION;	  n    =    left.getNext()    ||    right.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	82	None	replace
158	[BUG]  [BUGGY]  n  =  left.getParent()  ||  right.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getParent()  ||  right.getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getParent()  ||  right.getType()  ==  Token.FUNCTION;	  n    =    left.getNext()    ||    right.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	82	None	replace
159	[BUG]  [BUGGY]  n  =  left,  right.getFirstChild();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left,  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left,  right.getFirstChild();	  n    =    right.getFirstChild();    	non-compiled	[CE]  ';'  expected	10	None	replace
160	[BUG]  [BUGGY]  n.removeChild(right,  newNode);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.removeChild(right,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.removeChild(right,  newNode);	  n.removeChild(left,    newNode);    	non-compiled	[CE]  ';'  expected	90	None	replace
161	[BUG]  [BUGGY]  n.removeChild(left,  newNode  +  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.removeChild(left,  newNode  +  1);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.removeChild(left,  newNode  +  1);	  n.removeChild(left,    newNode);    	non-compiled	[CE]  ';'  expected	90	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  return    n.getParent();    Node    n    =    right.getFirstChild();    	non-compiled	[CE]  ';'  expected	63	None	replace
163	[BUG]  [BUGGY]  n  =  left.getFirstChild().getFirstChild()  +  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getFirstChild().getFirstChild()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getFirstChild().getFirstChild()  +  1;	  n    =    left.getFirstChild()    +    1;    	non-compiled	[CE]  ';'  expected	11	None	replace
164	[BUG]  [BUGGY]  n  =  left.getFirstChild().getFirstChild();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getFirstChild().getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getFirstChild().getFirstChild();	  n    =    left.getFirstChild()    +    1;    	non-compiled	[CE]  ';'  expected	11	None	replace
165	[BUG]  [BUGGY]  n  =  left.getFirstChild().getNext()  +  1;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getFirstChild().getNext()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getFirstChild().getNext()  +  1;	  n    =    left.getFirstChild()    +    1;    	non-compiled	[CE]  ';'  expected	11	None	replace
166	[BUG]  [BUGGY]  n  =  right.getFirstChild()  +  1;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  right.getFirstChild()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  right.getFirstChild()  +  1;	  n    =    left.getFirstChild()    +    1;    	non-compiled	[CE]  ';'  expected	11	None	replace
167	[BUG]  [BUGGY]  n  =  left.getLastChild()  +  1;  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getLastChild()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getLastChild()  +  1;	  n    =    left.getFirstChild()    +    1;    	non-compiled	[CE]  ';'  expected	11	None	replace
168	[BUG]  [BUGGY]  Node  n  =  right.getNext();  return  n.getFirstChild();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  right.getNext();  return  n.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  right.getNext();  return  n.getFirstChild();	  return    n.getFirstChild();    Node    n    =    left.getNext();    return    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	94	None	replace
169	[BUG]  [BUGGY]  Node  left  =  left.getNext();  return  right.getFirstChild();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  left.getNext();  return  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  left.getNext();  return  right.getFirstChild();	  return    n.getFirstChild();    Node    n    =    left.getNext();    return    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	94	None	replace
170	[BUG]  [BUGGY]  n  =  left.getNext();  return  n.getFirstChild();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getNext();  return  n.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getNext();  return  n.getFirstChild();	  return    n.getFirstChild();    Node    n    =    left.getNext();    return    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	94	None	replace
171	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext().getNext(),  right.getLastChild().getNext();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getNext().getNext(),  right.getLastChild().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext().getNext(),  right.getLastChild().getNext();	  result    =    left.getFirstChild().getNext().getNext();    	non-compiled	[CE]  ';'  expected	65	None	replace
172	[BUG]  [BUGGY]  result  =  left.getFirstChild().getParent().getNext().getNext();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getParent().getNext().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getParent().getNext().getNext();	  result    =    left.getFirstChild().getNext().getNext();    	non-compiled	[CE]  ';'  expected	65	None	replace
173	[BUG]  [BUGGY]  result  =  left,  right.getLastChild().getNext().getNext();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left,  right.getLastChild().getNext().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left,  right.getLastChild().getNext().getNext();	  result    =    left,    right.getFirstChild().getNext().getNext();    	non-compiled	[CE]  ';'  expected	96	None	replace
174	[BUG]  [BUGGY]  result  =  n,  left.getFirstChild().getNext().getNext();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n,  left.getFirstChild().getNext().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n,  left.getFirstChild().getNext().getNext();	  result    =    left,    right.getFirstChild().getNext().getNext();    	non-compiled	[CE]  ';'  expected	96	None	replace
175	[BUG]  [BUGGY]  result  =  right,  left.getFirstChild().getNext().getNext();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right,  left.getFirstChild().getNext().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right,  left.getFirstChild().getNext().getNext();	  result    =    left,    right.getFirstChild().getNext().getNext();    	non-compiled	[CE]  ';'  expected	96	None	replace
176	[BUG]  [BUGGY]  return  n.getFirstChild().getNext();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getFirstChild().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getFirstChild().getNext();	  return    left.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	125	None	replace
177	[BUG]  [BUGGY]  return  left.getLastChild().getNext();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getLastChild().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getLastChild().getNext();	  return    left.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	125	None	replace
178	[BUG]  [BUGGY]  return  right.getFirstChild().getNext();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getFirstChild().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.getFirstChild().getNext();	  return    left.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	125	None	replace
179	[BUG]  [BUGGY]  return  n.getLastChild().getNext();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getLastChild().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getLastChild().getNext();	  return    left.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	125	None	replace
180	[BUG]  [BUGGY]  return  right.getLastChild().getNext();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getLastChild().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.getLastChild().getNext();	  return    left.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	125	None	replace
181	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild().getNext()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getFirstChild().getNext()  +  1;	  return    left.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	125	None	replace
182	[BUG]  [BUGGY]  return  left.getLastChild()  +  1;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getLastChild()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getLastChild()  +  1;	  return    left.getLastChild();    	non-compiled	[CE]  ';'  expected	2	None	replace
183	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    left.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  ';'  expected	93	None	replace
184	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.GETELEM;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    left.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  ';'  expected	93	None	replace
185	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.GETELEM;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    left.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  ';'  expected	93	None	replace
186	[BUG]  [BUGGY]  result  =  left.getLastChild();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getLastChild();	  result    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	5	None	replace
187	[BUG]  [BUGGY]  result  =  right.getLastChild();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getLastChild();	  result    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	5	None	replace
188	[BUG]  [BUGGY]  result  =  n.getLastChild()  +  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getLastChild()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getLastChild()  +  1;	  result    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	5	None	replace
189	[BUG]  [BUGGY]  result  =  n.getLastChild().replaceChild(n,  left);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getLastChild().replaceChild(n,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getLastChild().replaceChild(n,  left);	  result    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	5	None	replace
190	[BUG]  [BUGGY]  result  =  n.getLastChild().cloneTree();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getLastChild().cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getLastChild().cloneTree();	  result    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	5	None	replace
191	[BUG]  [BUGGY]  Node  left  =  left.getNext();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  left.getNext();	  return    left;    Node    left    =    left.getNext();    return    left;    	non-compiled	[CE]  ';'  expected	104	None	replace
192	[BUG]  [BUGGY]  Node  left  =  left.getNext();  return  right;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  left.getNext();  return  right;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  left.getNext();  return  right;	  return    left;    Node    left    =    left.getNext();    return    left;    	non-compiled	[CE]  ';'  expected	104	None	replace
193	[BUG]  [BUGGY]  Node  left  =  right.getNext();  return  left;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  right.getNext();  return  left;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  right.getNext();  return  left;	  return    left;    Node    left    =    left.getNext();    return    left;    	non-compiled	[CE]  ';'  expected	104	None	replace
194	[BUG]  [BUGGY]  Node  left  =  right.getNext();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  right.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  right.getNext();	  return    left;    Node    left    =    left.getNext();    return    left;    	non-compiled	[CE]  ';'  expected	104	None	replace
195	[BUG]  [BUGGY]  Node  left  =  left.getNext();  return  left;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  left.getNext();  return  left;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  left.getNext();  return  left;	  return    left;    Node    left    =    left.getNext();    return    left;    	non-compiled	[CE]  ';'  expected	104	None	replace
196	[BUG]  [BUGGY]  Node  left  =  n.getNext();  return  left;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  n.getNext();  return  left;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  n.getNext();  return  left;	  return    left;    Node    left    =    left.getNext();    return    left;    	non-compiled	[CE]  ';'  expected	104	None	replace
197	[BUG]  [BUGGY]  Node  left  =  left.getNext();  if(right!=  null)return  null;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  left.getNext();  if(right!=  null)return  null;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  left.getNext();  if(right!=  null)return  null;	  return    left;    Node    left    =    left.getNext();    return    left;    	non-compiled	[CE]  ';'  expected	104	None	replace
198	[BUG]  [BUGGY]  n.getNext().removeChild(left);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getNext().removeChild(left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getNext().removeChild(left);	  n.getParent().removeChild(left);    	non-compiled	[CE]  ';'  expected	27	None	replace
199	[BUG]  [BUGGY]  n.getParent().removeChild(left,  right);  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getParent().removeChild(left,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getParent().removeChild(left,  right);	  n.getParent().removeChild(left);    	non-compiled	[CE]  unclosed  string  literal	27	None	replace
200	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left);  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getParent().replaceChild(n,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getParent().replaceChild(n,  left);	  n.getParent().removeChild(left);    	non-compiled	[CE]  unclosed  string  literal	27	None	replace
201	[BUG]  [BUGGY]  Node  n  =  left.getLastChild();  return  n.getLastChild();  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.getLastChild();  return  n.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.getLastChild();  return  n.getLastChild();	  return    n.getLastChild();    Node    n    =    left.getLastChild();    return    n.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	76	None	replace
202	[BUG]  [BUGGY]  Node  n  =  left.getLastChild();  return  n.getFirstChild();  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.getLastChild();  return  n.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.getLastChild();  return  n.getFirstChild();	  return    n.getLastChild();    Node    n    =    left.getLastChild();    return    n.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	76	None	replace
203	[BUG]  [BUGGY]  n  =  left.getFirstChild();  return  n.getLastChild();  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getFirstChild();  return  n.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getFirstChild();  return  n.getLastChild();	  return    n.getLastChild();    Node    n    =    left.getLastChild();    return    n.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	76	None	replace
204	[BUG]  [BUGGY]  result  =  left.getLastChild().replaceChild(n,  right);  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getLastChild().replaceChild(n,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getLastChild().replaceChild(n,  right);	  result    =    left.getFirstChild().replaceChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	53	None	replace
205	[BUG]  [BUGGY]  result  =  left.getLastChild().replaceChild(left,  right);  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getLastChild().replaceChild(left,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getLastChild().replaceChild(left,  right);	  result    =    left.getFirstChild().replaceChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	53	None	replace
206	[BUG]  [BUGGY]  result  =  right.getFirstChild().replaceChild(left,  left);  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right.getFirstChild().replaceChild(left,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getFirstChild().replaceChild(left,  left);	  result    =    left.getFirstChild().replaceChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	53	None	replace
207	[BUG]  [BUGGY]  result  =  n.getLastChild().replaceChild(left,  right);  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getLastChild().replaceChild(left,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getLastChild().replaceChild(left,  right);	  result    =    left.getFirstChild().replaceChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	53	None	replace
208	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext().cloneTree();  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getNext().cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext().cloneTree();	  result    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
209	[BUG]  [BUGGY]  result  =  n.getLastChild().getNext().cloneTree();  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getLastChild().getNext().cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getLastChild().getNext().cloneTree();	  result    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
210	[BUG]  [BUGGY]  result  =  right.getFirstChild().getNext().cloneTree();  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right.getFirstChild().getNext().cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getFirstChild().getNext().cloneTree();	  result    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
211	[BUG]  [BUGGY]  result  =  left.getLastChild().getNext().cloneTree();  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getLastChild().getNext().cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getLastChild().getNext().cloneTree();	  result    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
212	[BUG]  [BUGGY]  Result  result  =  left.getFirstChild().getNext().cloneTree();  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Result  result  =  left.getFirstChild().getNext().cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Result  result  =  left.getFirstChild().getNext().cloneTree();	  result    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
213	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext().cloneTree()  +  1;  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().getNext().cloneTree()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext().cloneTree()  +  1;	  result    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
214	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal());  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal());  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  unclosed  string  literal	31	None	replace
215	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  this);  [CE]  unclosed  string  literal  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  this);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  this);	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  unclosed  string  literal	31	None	replace
216	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  right);  [CE]  unclosed  string  literal  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  right);	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  unclosed  string  literal	31	None	replace
217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  reverse);  [CE]  unclosed  string  literal  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  reverse);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  reverse);	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  unclosed  string  literal	31	None	replace
218	[BUG]  [BUGGY]  result  =  n.getLastChild().getString();  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getLastChild().getString();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getLastChild().getString();	  result    =    n.getLastChild().getNext();    	non-compiled	[CE]  unclosed  string  literal	43	None	replace
219	[BUG]  [BUGGY]  return  op.getType()  ==  Token.GETELEM  ||  op.getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  op.getType()  ==  Token.GETELEM  ||  op.getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  op.getType()  ==  Token.GETELEM  ||  op.getType()  ==  Token.GETELEM;	  return    op.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	91	None	replace
220	[BUG]  [BUGGY]  result  =  op.getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  op.getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  op.getType()  ==  Token.GETELEM;	  return    op.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	91	None	replace
221	[BUG]  [BUGGY]  return  op.getType()!=  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  op.getType()!=  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  op.getType()!=  Token.GETELEM;	  return    op.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	91	None	replace
222	[BUG]  [BUGGY]  n.removeChild(right,  left);  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.removeChild(right,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.removeChild(right,  left);	  n.removeChild(right);    	non-compiled	[CE]  unclosed  string  literal	49	None	replace
223	[BUG]  [BUGGY]  n.removeChild(left,  right  +  1);  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.removeChild(left,  right  +  1);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.removeChild(left,  right  +  1);	  n.removeChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	88	None	replace
224	[BUG]  [BUGGY]  n.removeChild(left,  left);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.removeChild(left,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.removeChild(left,  left);	  n.removeChild(left,    right);    	non-compiled	[CE]  	88	None	replace
225	[BUG]  [BUGGY]  n.removeChild(left,  right,  result);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.removeChild(left,  right,  result);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.removeChild(left,  right,  result);	  n.removeChild(left,    right);    	non-compiled	[CE]  	88	None	replace
226	[BUG]  [BUGGY]  Node  op  =  left.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  op  =  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  op  =  left.getLastChild();	  Node    op    =    left.getFirstChild();    	non-compiled	[CE]  	102	None	replace
227	[BUG]  [BUGGY]  Node  op  =  right.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  op  =  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  op  =  right.getFirstChild();	  Node    op    =    left.getFirstChild();    	non-compiled	[CE]  	102	None	replace
228	[BUG]  [BUGGY]  Node  op  =  left.removeFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  op  =  left.removeFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  op  =  left.removeFirstChild();	  Node    op    =    left.getFirstChild();    	non-compiled	[CE]  	102	None	replace
229	[BUG]  [BUGGY]  Node  op  =  right.getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  op  =  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  op  =  right.getLastChild();	  Node    op    =    left.getFirstChild();    	non-compiled	[CE]  	102	None	replace
230	[BUG]  [BUGGY]  Node  op  =  left.next();  [CE]  unclosed  string  literal  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  op  =  left.next();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  op  =  left.next();	  Node    op    =    left.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	102	None	replace
231	[BUG]  [BUGGY]  return  node.getFirstChild();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  node.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  node.getFirstChild();	  return    right.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	50	None	replace
232	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  left);  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  n,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  n,  left);	  NodeTraversal.traverse(compiler,    left,    n);    	non-compiled	[CE]  unclosed  string  literal	101	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  n);  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  n);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  right,  n);	  NodeTraversal.traverse(compiler,    left,    n);    	non-compiled	[CE]  unclosed  string  literal	101	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  n);  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  right,  n);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  right,  n);	  NodeTraversal.traverse(compiler,    left,    n);    	non-compiled	[CE]  unclosed  string  literal	101	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  n,  right);  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  n,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  n,  right);	  NodeTraversal.traverse(compiler,    left,    n);    	non-compiled	[CE]  unclosed  string  literal	101	None	replace
236	[BUG]  [BUGGY]  Context.traverse(compiler,  left,  right);  [CE]  unclosed  string  literal  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Context.traverse(compiler,  left,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Context.traverse(compiler,  left,  right);	  NodeTraversal.traverse(compiler,    left,    n);    	non-compiled	[CE]  unclosed  string  literal	101	None	replace
237	[BUG]  [BUGGY]  result  =  n.getLastChild().replaceChild(n,  right);  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getLastChild().replaceChild(n,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getLastChild().replaceChild(n,  right);	  result    =    n.getFirstChild().replaceChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	51	None	replace
238	[BUG]  [BUGGY]  result  =  n.getFirstChild().replaceChild(n,  right);  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().replaceChild(n,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().replaceChild(n,  right);	  result    =    n.getFirstChild().replaceChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	51	None	replace
239	[BUG]  [BUGGY]  result  =  n.getFirstChild().replaceChild(n,  left);  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().replaceChild(n,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().replaceChild(n,  left);	  result    =    n.getFirstChild().replaceChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	51	None	replace
240	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  return  right;  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  left.getFirstChild();  return  right;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  left.getFirstChild();  return  right;	  return    left;    Node    left    =    left.getFirstChild();    return    left;    	non-compiled	[CE]  unclosed  string  literal	103	None	replace
241	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  return  left;  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  left.getFirstChild();  return  left;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  left.getFirstChild();  return  left;	  return    left;    Node    left    =    left.getFirstChild();    return    left;    	non-compiled	[CE]  unclosed  string  literal	103	None	replace
242	[BUG]  [BUGGY]  Node  left  =  left.getLastChild();  return  left;  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  left.getLastChild();  return  left;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  left.getLastChild();  return  left;	  return    left;    Node    left    =    left.getFirstChild();    return    left;    	non-compiled	[CE]  unclosed  string  literal	103	None	replace
243	[BUG]  [BUGGY]  return  n;  Node  left  =  right.getFirstChild();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n;  Node  left  =  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n;  Node  left  =  right.getFirstChild();	  return    left;    Node    left    =    right.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	18	None	replace
244	[BUG]  [BUGGY]  n.replaceChild(left,  right,  newNode);  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.replaceChild(left,  right,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.replaceChild(left,  right,  newNode);	  n.replaceChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	99	None	replace
245	[BUG]  [BUGGY]  n.replaceChild(left,  right,  result);  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.replaceChild(left,  right,  result);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.replaceChild(left,  right,  result);	  n.replaceChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	99	None	replace
246	[BUG]  [BUGGY]  n.replaceChild(left,  right,  null);  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.replaceChild(left,  right,  null);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.replaceChild(left,  right,  null);	  n.replaceChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	99	None	replace
247	[BUG]  [BUGGY]  n.replaceChild(left,  right,  this);  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.replaceChild(left,  right,  this);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.replaceChild(left,  right,  this);	  n.replaceChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	99	None	replace
248	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  &&  n.getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()  ==  Token.GETELEM  &&  n.getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.GETELEM  &&  n.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	83	None	replace
249	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getType()!=  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getType()!=  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.GETELEM  ||  n.getType()!=  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	83	None	replace
250	[BUG]  [BUGGY]  return  n.getType()!=  Token.GETELEM  &&  n.getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()!=  Token.GETELEM  &&  n.getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()!=  Token.GETELEM  &&  n.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	83	None	replace
251	[BUG]  [BUGGY]  return  n.getType()!=  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()!=  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()!=  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	83	None	replace
252	[BUG]  [BUGGY]  return  right.getLastChild();  Node  right  =  left.getFirstChild();  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getLastChild();  Node  right  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    right.getLastChild();    Node  right  =  left.getFirstChild();	  	non-compiled	[CE]  unclosed  string  literal	6	None	add
253	[BUG]  [BUGGY]  return  right.getLastChild();  Node  right  =  left.getLastChild();  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getLastChild();  Node  right  =  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    right.getLastChild();    Node  right  =  left.getLastChild();	  	non-compiled	[CE]  unclosed  string  literal	6	None	add
254	[BUG]  [BUGGY]  return  right.getLastChild();  Node  right  =  right.getLastChild();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getLastChild();  Node  right  =  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    right.getLastChild();    Node  right  =  right.getLastChild();	  	non-compiled	[CE]  unclosed  string  literal	6	None	add
255	[BUG]  [BUGGY]  return  right.getLastChild();  Node  right  =  left.getFirstChild();  return  right.getLastChild();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getLastChild();  Node  right  =  left.getFirstChild();  return  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    right.getLastChild();    Node  right  =  left.getFirstChild();  return  right.getLastChild();	  	non-compiled	[CE]  unclosed  string  literal	6	None	add
256	[BUG]  [BUGGY]  return  right.getLastChild();  Node  right  =  left.getLastChild();  return  right.getLastChild();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getLastChild();  Node  right  =  left.getLastChild();  return  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    right.getLastChild();    Node  right  =  left.getLastChild();  return  right.getLastChild();	  	non-compiled	[CE]  unclosed  string  literal	6	None	add
257	[BUG]  [BUGGY]  return  right.getLastChild();  Node  right  =  n.getLastChild();  [CE]  unclosed  string  literal  [FE]              AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getLastChild();  Node  right  =  n.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    right.getLastChild();    Node  right  =  n.getLastChild();	  	non-compiled	[CE]  unclosed  string  literal	6	None	add
258	[BUG]  [BUGGY]  return  right.getLastChild();  Node  right  =  node.getLastChild();  [CE]  unclosed  string  literal  [FE]                AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getLastChild();  Node  right  =  node.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    right.getLastChild();    Node  right  =  node.getLastChild();	  	non-compiled	[CE]  unclosed  string  literal	6	None	add
259	[BUG]  [BUGGY]  return  right.getLastChild();  Node  right  =  right.getFirstChild();  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getLastChild();  Node  right  =  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    right.getLastChild();    Node  right  =  right.getFirstChild();	  	non-compiled	[CE]  unclosed  string  literal	6	None	add
260	[BUG]  [BUGGY]  result  =  n.getFirstChild().replaceChild(n,  newNode);  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().replaceChild(n,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().replaceChild(n,  newNode);	  result    =    left.getFirstChild().replaceChild(n,    newNode);    	non-compiled	[CE]  unclosed  string  literal	54	None	replace
261	[BUG]  [BUGGY]  result  =  left.getFirstChild().removeFirstChild();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().removeFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().removeFirstChild();	  result    =    n.getFirstChild().removeFirstChild();    	non-compiled	[CE]  unclosed  string  literal	127	None	replace
262	[BUG]  [BUGGY]  result  =  n.getLastChild().removeFirstChild();  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getLastChild().removeFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getLastChild().removeFirstChild();	  result    =    n.getFirstChild().removeFirstChild();    	non-compiled	[CE]  unclosed  string  literal	127	None	replace
263	[BUG]  [BUGGY]  result  =  n.getFirstChild().removeLastChild();  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().removeLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().removeLastChild();	  result    =    n.getFirstChild().removeFirstChild();    	non-compiled	[CE]  unclosed  string  literal	127	None	replace
264	[BUG]  [BUGGY]  result  =  right.getFirstChild().removeFirstChild();  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right.getFirstChild().removeFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getFirstChild().removeFirstChild();	  result    =    n.getFirstChild().removeFirstChild();    	non-compiled	[CE]  unclosed  string  literal	127	None	replace
265	[BUG]  [BUGGY]  result  =  left.getLastChild().removeFirstChild();  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getLastChild().removeFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getLastChild().removeFirstChild();	  result    =    n.getFirstChild().removeFirstChild();    	non-compiled	[CE]  unclosed  string  literal	127	None	replace
266	[BUG]  [BUGGY]  n  =  left.replaceChild(n,  newNode);  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.replaceChild(n,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.replaceChild(n,  newNode);	  n    =    left.replaceChild(right,    newNode);    	non-compiled	[CE]  unclosed  string  literal	114	None	replace
267	[BUG]  [BUGGY]  n  =  right.replaceChild(left,  newNode);  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  right.replaceChild(left,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  right.replaceChild(left,  newNode);	  n    =    left.replaceChild(right,    newNode);    	non-compiled	[CE]  unclosed  string  literal	114	None	replace
268	[BUG]  [BUGGY]  n  =  left.replaceChild(newNode,  right);  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.replaceChild(newNode,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.replaceChild(newNode,  right);	  n    =    left.replaceChild(right,    newNode);    	non-compiled	[CE]  unclosed  string  literal	114	None	replace
269	[BUG]  [BUGGY]  n  =  left.replaceChild(n,  right);  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.replaceChild(n,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.replaceChild(n,  right);	  n    =    left.replaceChild(right,    newNode);    	non-compiled	[CE]  unclosed  string  literal	114	None	replace
270	[BUG]  [BUGGY]  n  =  n.replaceChild(left,  newNode);  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  n.replaceChild(left,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  n.replaceChild(left,  newNode);	  n    =    left.replaceChild(right,    newNode);    	non-compiled	[CE]  unclosed  string  literal	114	None	replace
271	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNode);  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.replaceChild(left,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.replaceChild(left,  newNode);	  n    =    left.replaceChild(right,    newNode);    	non-compiled	[CE]  unclosed  string  literal	114	None	replace
272	[BUG]  [BUGGY]  return  right.getType()!=  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getType()!=  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.getType()!=  Token.GETELEM;	  return    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	85	None	replace
273	[BUG]  [BUGGY]  return  n.getType()  >=  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()  >=  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  >=  Token.GETELEM;	  return    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	85	None	replace
274	[BUG]  [BUGGY]  result  =  n.getType()!=  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getType()!=  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getType()!=  Token.GETELEM;	  return    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	85	None	replace
275	[BUG]  [BUGGY]  return  left.getType()  >>  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  >>  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  >>  Token.GETELEM;	  return    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	85	None	replace
276	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  return  n.getParent();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.getFirstChild();  return  n.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.getFirstChild();  return  n.getParent();	  return    n.getParent();    Node    n    =    left.getFirstChild();    return    n.getParent();    	non-compiled	[CE]  unclosed  string  literal	106	None	replace
277	[BUG]  [BUGGY]  Node  n  =  right.getFirstChild();  return  n.getParent();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  right.getFirstChild();  return  n.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  right.getFirstChild();  return  n.getParent();	  return    n.getParent();    Node    n    =    left.getFirstChild();    return    n.getParent();    	non-compiled	[CE]  unclosed  string  literal	106	None	replace
278	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  return  right.getParent();  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  left.getFirstChild();  return  right.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  left.getFirstChild();  return  right.getParent();	  return    n.getParent();    Node    n    =    left.getFirstChild();    return    n.getParent();    	non-compiled	[CE]  unclosed  string  literal	106	None	replace
279	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  &&  n.getParent().getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()  ==  Token.GETELEM  &&  n.getParent().getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.GETELEM  &&  n.getParent().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getParent().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	87	None	replace
280	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  right.getParent().getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  right.getParent().getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.GETELEM  ||  right.getParent().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getParent().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	87	None	replace
281	[BUG]  [BUGGY]  return  n.getType()!=  Token.GETELEM  &&  n.getParent().getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()!=  Token.GETELEM  &&  n.getParent().getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()!=  Token.GETELEM  &&  n.getParent().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getParent().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	87	None	replace
282	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getNext().getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getNext().getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.GETELEM  ||  n.getNext().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getParent().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	87	None	replace
283	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getParent().getType()!=  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getParent().getType()!=  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.GETELEM  ||  n.getParent().getType()!=  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getParent().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	87	None	replace
284	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  left.getParent().getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  left.getParent().getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.GETELEM  ||  left.getParent().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getParent().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	87	None	replace
285	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  right);  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  right);	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  unclosed  string  literal	118	None	replace
286	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  PeepholeFoldConstants());  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  PeepholeFoldConstants());  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  n,  new  PeepholeFoldConstants());	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  unclosed  string  literal	118	None	replace
287	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  result);  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  result);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  result);	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  unclosed  string  literal	118	None	replace
288	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  PeepholeFoldConstants());  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  PeepholeFoldConstants());  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  right,  new  PeepholeFoldConstants());	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  unclosed  string  literal	118	None	replace
289	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  this);  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  this);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  this);	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  unclosed  string  literal	118	None	replace
290	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  PeepholeFoldConstants());  [CE]  unclosed  string  literal  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  PeepholeFoldConstants());  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  right,  new  PeepholeFoldConstants());	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  unclosed  string  literal	118	None	replace
291	[BUG]  [BUGGY]  node  =  left.getNext();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  node  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	node  =  left.getNext();	  return    left;    Node    left    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	17	None	replace
292	[BUG]  [BUGGY]  n.getParent();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getParent();	  return    n.getParent();    n.getParent();    	non-compiled	[CE]  unclosed  string  literal	129	None	replace
293	[BUG]  [BUGGY]  Node  op  =  right.getNext();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  op  =  right.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  op  =  right.getNext();	  return    n.getParent();    n.getParent();    	non-compiled	[CE]  unclosed  string  literal	129	None	replace
294	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  return  right.getFirstChild();  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  left.getFirstChild();  return  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  left.getFirstChild();  return  right.getFirstChild();	  return    n.getFirstChild();    Node    n    =    left.getFirstChild();    return    n.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	37	None	replace
295	[BUG]  [BUGGY]  return  right.getType()  ==  Token.GETELEM?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getType()  ==  Token.GETELEM?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.getType()  ==  Token.GETELEM?  Boolean.TRUE  :  Boolean.FALSE;	  return    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	92	None	replace
296	[BUG]  [BUGGY]  return  right.getType()  ==  Token.GETELEM?  left.getString()  :  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getType()  ==  Token.GETELEM?  left.getString()  :  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.getType()  ==  Token.GETELEM?  left.getString()  :  Token.GETELEM;	  return    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	92	None	replace
297	[BUG]  [BUGGY]  return  right.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM;	  return    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	92	None	replace
298	[BUG]  [BUGGY]  node  =  left.getLastChild();  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  node  =  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	node  =  left.getLastChild();	  return    n.getParent();    Node    n    =    left.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	60	None	replace
299	[BUG]  [BUGGY]  n  =  right.removeFirstChild();  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  right.removeFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  right.removeFirstChild();	  n    =    left.removeFirstChild();    	non-compiled	[CE]  unclosed  string  literal	110	None	replace
300	[BUG]  [BUGGY]  n  =  left.removeLastChild();  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.removeLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.removeLastChild();	  n    =    left.removeFirstChild();    	non-compiled	[CE]  unclosed  string  literal	110	None	replace
301	[BUG]  [BUGGY]  return  n.getFirstChild()  +  1;  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getFirstChild()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getFirstChild()  +  1;	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  unclosed  string  literal	8	None	replace
302	[BUG]  [BUGGY]  return  n.getLastChild().getNext()  +  1;  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getLastChild().getNext()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getLastChild().getNext()  +  1;	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  unclosed  string  literal	8	None	replace
303	[BUG]  [BUGGY]  return  n.getLastChild().getFirstChild();  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getLastChild().getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getLastChild().getFirstChild();	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  unclosed  string  literal	8	None	replace
304	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  PeepholeFoldConstants());  break;  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  PeepholeFoldConstants());  break;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  n,  new  PeepholeFoldConstants());  break;	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    break;    	non-compiled	[CE]  unclosed  string  literal	119	None	replace
305	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  right);  break;  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  right);  break;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  right);  break;	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    break;    	non-compiled	[CE]  unclosed  string  literal	119	None	replace
306	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  result);  break;  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  result);  break;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  result);  break;	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    break;    	non-compiled	[CE]  unclosed  string  literal	119	None	replace
307	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  this);  break;  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  this);  break;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  this);  break;	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    break;    	non-compiled	[CE]  unclosed  string  literal	119	None	replace
308	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  PeepholeFoldConstants());  break;  [CE]  unclosed  string  literal  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  PeepholeFoldConstants());  break;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  right,  new  PeepholeFoldConstants());  break;	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    break;    	non-compiled	[CE]  unclosed  string  literal	119	None	replace
309	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  reverse);  break;  [CE]  unclosed  string  literal  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  reverse);  break;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  reverse);  break;	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    break;    	non-compiled	[CE]  unclosed  string  literal	119	None	replace
310	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	86	None	replace
311	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  right.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  right.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.GETELEM  ||  right.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	86	None	replace
312	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  left.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  left.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.GETELEM  ||  left.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	86	None	replace
313	[BUG]  [BUGGY]  return  n.getType()!=  Token.GETELEM  &&  n.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()!=  Token.GETELEM  &&  n.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()!=  Token.GETELEM  &&  n.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	86	None	replace
314	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getLastChild().getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getLastChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.GETELEM  ||  n.getLastChild().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	86	None	replace
315	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  left.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  left.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.GETELEM  ||  left.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	86	None	replace
316	[BUG]  [BUGGY]  result  =  n.getNext();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getNext();	  return    n.getNext();    	non-compiled	[CE]  unclosed  string  literal	24	None	replace
317	[BUG]  [BUGGY]  Node  n  =  right.getLastChild();  return  n.getLastChild();  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  right.getLastChild();  return  n.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  right.getLastChild();  return  n.getLastChild();	  return    n.getLastChild();    Node    n    =    right.getLastChild();    return    n.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	78	None	replace
318	[BUG]  [BUGGY]  Node  n  =  right.getLastChild();  return  n.getFirstChild();  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  right.getLastChild();  return  n.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  right.getLastChild();  return  n.getFirstChild();	  return    n.getLastChild();    Node    n    =    right.getLastChild();    return    n.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	78	None	replace
319	[BUG]  [BUGGY]  return  n;  Node  left  =  right.getNext();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n;  Node  left  =  right.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n;  Node  left  =  right.getNext();	  return    left;    Node    left    =    right.getNext();    	non-compiled	[CE]  unclosed  string  literal	16	None	replace
320	[BUG]  [BUGGY]  Node  left  =  n.getNext();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  n.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  n.getNext();	  return    left;    Node    left    =    right.getNext();    	non-compiled	[CE]  unclosed  string  literal	16	None	replace
321	[BUG]  [BUGGY]  node  =  right.getNext();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  node  =  right.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	node  =  right.getNext();	  return    left;    Node    left    =    right.getNext();    	non-compiled	[CE]  unclosed  string  literal	16	None	replace
322	[BUG]  [BUGGY]  result  =  left.getFirstChild();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild();	  result    =    n.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	48	None	replace
323	[BUG]  [BUGGY]  result  =  right.getFirstChild();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getFirstChild();	  result    =    n.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	48	None	replace
324	[BUG]  [BUGGY]  return  right.cloneTree();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.cloneTree();	  return    left.cloneTree();    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
325	[BUG]  [BUGGY]  return  n.cloneTree();  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.cloneTree();	  return    left.cloneTree();    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
326	[BUG]  [BUGGY]  return  left.cloneTree()?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.cloneTree()?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.cloneTree()?  Boolean.TRUE  :  Boolean.FALSE;	  return    left.cloneTree();    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
327	[BUG]  [BUGGY]  return  left.cloneTree()?  null  :  left.cloneTree();  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.cloneTree()?  null  :  left.cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.cloneTree()?  null  :  left.cloneTree();	  return    left.cloneTree();    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
328	[BUG]  [BUGGY]  return  left.cloneTree()  &&  right.getLastChild().getString().endsWith( "__ "));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.cloneTree()  &&  right.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.cloneTree()  &&  right.getLastChild().getString().endsWith( "__ "));	  return    left.cloneTree();    	non-compiled	[CE]  	14	None	replace
329	[BUG]  [BUGGY]  return  left.cloneTree()  &&  right.getLastChild().getString().endsWith( "- "));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.cloneTree()  &&  right.getLastChild().getString().endsWith( "- "));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.cloneTree()  &&  right.getLastChild().getString().endsWith( "- "));	  return    left.cloneTree();    	non-compiled	[CE]  	14	None	replace
330	[BUG]  [BUGGY]  result  =  left.getFirstChild().replaceChild(left,  n);  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().replaceChild(left,  n);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().replaceChild(left,  n);	  result    =    n.getFirstChild().replaceChild(left,    left);    	non-compiled	[CE]  unclosed  string  literal	55	None	replace
331	[BUG]  [BUGGY]  result  =  right.getFirstChild().replaceChild(left,  right);  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right.getFirstChild().replaceChild(left,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getFirstChild().replaceChild(left,  right);	  result    =    n.getFirstChild().replaceChild(left,    left);    	non-compiled	[CE]  unclosed  string  literal	55	None	replace
332	[BUG]  [BUGGY]  result  =  n.getFirstChild().replaceChild(right,  right);  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().replaceChild(right,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().replaceChild(right,  right);	  result    =    n.getFirstChild().replaceChild(left,    left);    	non-compiled	[CE]  unclosed  string  literal	55	None	replace
333	[BUG]  [BUGGY]  Node  rn  =  right.getNext();  [CE]  unclosed  string  literal  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  rn  =  right.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  rn  =  right.getNext();	  Node    rn    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	33	None	replace
334	[BUG]  [BUGGY]  Node  rn  =  left.getFirstChild();  [CE]  unclosed  string  literal  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  rn  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  rn  =  left.getFirstChild();	  Node    rn    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	33	None	replace
335	[BUG]  [BUGGY]  Node  rn  =  left.getNext()  +  1;  [CE]  unclosed  string  literal  [FE]                                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  rn  =  left.getNext()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  rn  =  left.getNext()  +  1;	  Node    rn    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	33	None	replace
336	[BUG]  [BUGGY]  Node  rn  =  left.getLastChild();  [CE]  unclosed  string  literal  [FE]                                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  rn  =  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  rn  =  left.getLastChild();	  Node    rn    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	33	None	replace
337	[BUG]  [BUGGY]  Node  rn  =  left.removeFirstChild();  [CE]  unclosed  string  literal  [FE]                                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  rn  =  left.removeFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  rn  =  left.removeFirstChild();	  Node    rn    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	33	None	replace
338	[BUG]  [BUGGY]  Node  rn  =  left.getParent();  [CE]  unclosed  string  literal  [FE]                                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  rn  =  left.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  rn  =  left.getParent();	  Node    rn    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	33	None	replace
339	[BUG]  [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().endsWith( "__ "));  [CE]  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getNext()  &&  right.getLastChild().getString().endsWith( "__ "));	  return    left.getNext();    	non-compiled	[CE]  	13	None	replace
340	[BUG]  [BUGGY]  return  left.getNext()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getNext()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getNext()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;	  return    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	13	None	replace
341	[BUG]  [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().endsWith( "- "));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().endsWith( "- "));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getNext()  &&  right.getLastChild().getString().endsWith( "- "));	  return    left.getNext();    	non-compiled	[CE]  	13	None	replace
342	[BUG]  [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().equals( "prototype "));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().equals( "prototype "));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getNext()  &&  right.getLastChild().getString().equals( "prototype "));	  return    left.getNext();    	non-compiled	[CE]  	13	None	replace
343	[BUG]  [BUGGY]  Node  n  =  right.getParent();  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  right.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  right.getParent();	  return    n.getParent();    Node    n    =    right.getParent();    	non-compiled	[CE]  unclosed  string  literal	61	None	replace
344	[BUG]  [BUGGY]  node  =  right.getParent();  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  node  =  right.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	node  =  right.getParent();	  return    n.getParent();    Node    n    =    right.getParent();    	non-compiled	[CE]  unclosed  string  literal	61	None	replace
345	[BUG]  [BUGGY]  result  =  n.getLastChild().getParent();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getLastChild().getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getLastChild().getParent();	  result    =    n.getFirstChild().getParent();    	non-compiled	[CE]  unclosed  string  literal	98	None	replace
346	[BUG]  [BUGGY]  result  =  right.getFirstChild().getParent();  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right.getFirstChild().getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getFirstChild().getParent();	  result    =    n.getFirstChild().getParent();    	non-compiled	[CE]  unclosed  string  literal	98	None	replace
347	[BUG]  [BUGGY]  n.setParent(right);  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.setParent(right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.setParent(right);	  return    n.getParent();    return    n.getParent();    	non-compiled	[CE]  unclosed  string  literal	130	None	replace
348	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  return  right.getLastChild();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  left.getFirstChild();  return  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  left.getFirstChild();  return  right.getLastChild();	  return    n.getLastChild();    Node    n    =    left.getFirstChild();    return    n.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	73	None	replace
349	[BUG]  [BUGGY]  node.getFirstChild();  Node  n  =  left.getNext();  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  node.getFirstChild();  Node  n  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	node.getFirstChild();  Node  n  =  left.getNext();	  return    n.getFirstChild();    Node    n    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	38	None	replace
350	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  left.getNext());  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  left.getNext());  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getFirstChild()!=  left.getNext());	  return    n.getFirstChild();    Node    n    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	38	None	replace
351	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  left.getNext());  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  left.getNext());  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getFirstChild()  ==  left.getNext());	  return    n.getFirstChild();    Node    n    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	38	None	replace
352	[BUG]  [BUGGY]  result  =  right,  n.getFirstChild().getNext().getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right,  n.getFirstChild().getNext().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right,  n.getFirstChild().getNext().getNext();	  result    =    left,    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  	69	None	replace
353	[BUG]  [BUGGY]  Node  left  =  right.getNext();  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  return  left;  }  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  right.getNext();  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  return  left;  }  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  right.getNext();  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  return  left;  }	  return    left;    Node    left    =    right.getNext();    return    left;    	non-compiled	[CE]  unclosed  string  literal	23	None	replace
354	[BUG]  [BUGGY]  Node  left  =  right.getNext();  if(left!=  null)return  null;  if(right.getType()  ==  Token.FUNCTION)  {  return  left;  }  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  right.getNext();  if(left!=  null)return  null;  if(right.getType()  ==  Token.FUNCTION)  {  return  left;  }  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  right.getNext();  if(left!=  null)return  null;  if(right.getType()  ==  Token.FUNCTION)  {  return  left;  }	  return    left;    Node    left    =    right.getNext();    return    left;    	non-compiled	[CE]  unclosed  string  literal	23	None	replace
355	[BUG]  [BUGGY]  Node  left  =  right.getNext();  if(left!=  null)  {  return  left;  }  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  right.getNext();  if(left!=  null)  {  return  left;  }  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  right.getNext();  if(left!=  null)  {  return  left;  }	  return    left;    Node    left    =    right.getNext();    return    left;    	non-compiled	[CE]  unclosed  string  literal	23	None	replace
356	[BUG]  [BUGGY]  return  left.getFirstChild();  Node  left  =  left.getFirstChild();  [CE]  [FE]    AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild();  Node  left  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left.getFirstChild();    Node  left  =  left.getFirstChild();	  	non-compiled	[CE]  	3	None	add
357	[BUG]  [BUGGY]  return  left.getFirstChild();  Node  left  =  left.getLastChild();  [CE]  [FE]      AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild();  Node  left  =  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left.getFirstChild();    Node  left  =  left.getLastChild();	  	non-compiled	[CE]  	3	None	add
358	[BUG]  [BUGGY]  return  left.getFirstChild();  Node  left  =  right.getFirstChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild();  Node  left  =  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left.getFirstChild();    Node  left  =  right.getFirstChild();	  	non-compiled	[CE]  	3	None	add
359	[BUG]  [BUGGY]  return  left.getFirstChild();  Node  left  =  left.getFirstChild();  return  left.getFirstChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild();  Node  left  =  left.getFirstChild();  return  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left.getFirstChild();    Node  left  =  left.getFirstChild();  return  left.getFirstChild();	  	non-compiled	[CE]  	3	None	add
360	[BUG]  [BUGGY]  return  left.getFirstChild();  Node  left  =  right.getLastChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild();  Node  left  =  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left.getFirstChild();    Node  left  =  right.getLastChild();	  	non-compiled	[CE]  	3	None	add
361	[BUG]  [BUGGY]  return  left.getFirstChild();  Node  left  =  left.getLastChild();  return  left.getFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild();  Node  left  =  left.getLastChild();  return  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left.getFirstChild();    Node  left  =  left.getLastChild();  return  left.getFirstChild();	  	non-compiled	[CE]  	3	None	add
362	[BUG]  [BUGGY]  return  left.getFirstChild();  Node  left  =  left.getFirstChild();  return  left.getLastChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild();  Node  left  =  left.getFirstChild();  return  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left.getFirstChild();    Node  left  =  left.getFirstChild();  return  left.getLastChild();	  	non-compiled	[CE]  	3	None	add
363	[BUG]  [BUGGY]  return  left.getFirstChild();  Node  left  =  right.getFirstChild();  return  left.getFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild();  Node  left  =  right.getFirstChild();  return  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left.getFirstChild();    Node  left  =  right.getFirstChild();  return  left.getFirstChild();	  	non-compiled	[CE]  	3	None	add
364	[BUG]  [BUGGY]  Node  op  =  left.getNext()  +  1;  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  op  =  left.getNext()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  op  =  left.getNext()  +  1;	  Node    op    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	30	None	replace
365	[BUG]  [BUGGY]  Node  op  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  op  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  op  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;	  Node    op    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	30	None	replace
366	[BUG]  [BUGGY]  result  =  right.getFirstChild().getNext().getNext().getNext();  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right.getFirstChild().getNext().getNext().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getFirstChild().getNext().getNext().getNext();	  result    =    left.getFirstChild().getNext().getNext().getNext();    	non-compiled	[CE]  unclosed  string  literal	70	None	replace
367	[BUG]  [BUGGY]  result  =  left.getLastChild().getNext().getNext().getNext();  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getLastChild().getNext().getNext().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getLastChild().getNext().getNext().getNext();	  result    =    left.getFirstChild().getNext().getNext().getNext();    	non-compiled	[CE]  unclosed  string  literal	70	None	replace
368	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext().getNext().getNext();  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().getNext().getNext().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext().getNext().getNext();	  result    =    left.getFirstChild().getNext().getNext().getNext();    	non-compiled	[CE]  unclosed  string  literal	70	None	replace
369	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext().getParent().getNext().getNext();  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getNext().getParent().getNext().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext().getParent().getNext().getNext();	  result    =    left.getFirstChild().getNext().getNext().getNext();    	non-compiled	[CE]  unclosed  string  literal	70	None	replace
370	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext().getNext().getParent().getNext();  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getNext().getNext().getParent().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext().getNext().getParent().getNext();	  result    =    left.getFirstChild().getNext().getNext().getNext();    	non-compiled	[CE]  unclosed  string  literal	70	None	replace
371	[BUG]  [BUGGY]  result  =  left.getLastChild().getString();  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getLastChild().getString();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getLastChild().getString();	  result    =    n.getFirstChild().getString();    	non-compiled	[CE]  unclosed  string  literal	46	None	replace
372	[BUG]  [BUGGY]  result  =  right.getFirstChild().getString();  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  right.getFirstChild().getString();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  right.getFirstChild().getString();	  result    =    n.getFirstChild().getString();    	non-compiled	[CE]  unclosed  string  literal	46	None	replace
373	[BUG]  [BUGGY]  result  =  n.getFirstChild().getString()  +  1;  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().getString()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getString()  +  1;	  result    =    n.getFirstChild().getString();    	non-compiled	[CE]  unclosed  string  literal	46	None	replace
374	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext().getString();  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().getNext().getString();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext().getString();	  result    =    n.getFirstChild().getString();    	non-compiled	[CE]  unclosed  string  literal	46	None	replace
375	[BUG]  [BUGGY]  n  =  left.getParent()  +  1;  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getParent()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getParent()  +  1;	  n    =    left.getNext()    +    1;    	non-compiled	[CE]  unclosed  string  literal	80	None	replace
376	[BUG]  [BUGGY]  n  =  right.getNext()  +  1;  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  right.getNext()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  right.getNext()  +  1;	  n    =    left.getNext()    +    1;    	non-compiled	[CE]  unclosed  string  literal	80	None	replace
377	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  right.getNext();  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  right.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  right.getNext();	  return    n.getParent();    Node    n    =    right.getNext();    	non-compiled	[CE]  unclosed  string  literal	62	None	replace
378	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  right.getNext();  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  right.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  right.getNext();	  return    n.getParent();    Node    n    =    right.getNext();    	non-compiled	[CE]  unclosed  string  literal	62	None	replace
379	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  n  =  right.getNext();  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  n  =  right.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  n  =  right.getNext();	  return    n.getParent();    Node    n    =    right.getNext();    	non-compiled	[CE]  unclosed  string  literal	62	None	replace
380	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  right.getNext();  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  right.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  right.getNext();	  return    n.getParent();    Node    n    =    right.getNext();    	non-compiled	[CE]  unclosed  string  literal	62	None	replace
381	[BUG]  [BUGGY]  result  =  left,  left.getLastChild().getNext().getNext();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left,  left.getLastChild().getNext().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left,  left.getLastChild().getNext().getNext();	  result    =    left,    left.getFirstChild().getNext().getNext();    	non-compiled	[CE]  	97	None	replace
382	[BUG]  [BUGGY]  node  =  left.getParent();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  node  =  left.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	node  =  left.getParent();	  return    n.getParent();    Node    n    =    left.getParent();    	non-compiled	[CE]  unclosed  string  literal	59	None	replace
383	[BUG]  [BUGGY]  return  n.getFirstChild();  n.getLastChild();  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getFirstChild();  n.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getFirstChild();  n.getLastChild();	  return    n.getLastChild();    n.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	75	None	replace
384	[BUG]  [BUGGY]  n.getFirstChild();  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getFirstChild();	  return    n.getLastChild();    n.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	75	None	replace
385	[BUG]  [BUGGY]  return  right.getType()  ==  Token.FUNCTION;  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.getType()  ==  Token.FUNCTION;	  return    left.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  unclosed  string  literal	109	None	replace
386	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION;  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.FUNCTION;	  return    left.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  unclosed  string  literal	109	None	replace
387	[BUG]  [BUGGY]  return  left.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getFirstChild().getType()  ==  Token.FUNCTION;	  return    left.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  unclosed  string  literal	109	None	replace
388	[BUG]  [BUGGY]  return  left.getType()!=  Token.FUNCTION;  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()!=  Token.FUNCTION;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()!=  Token.FUNCTION;	  return    left.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  unclosed  string  literal	109	None	replace
389	[BUG]  [BUGGY]  return  left.getType()  ==  Token.FUNCTION  &&  right.getFirstChild().getString().endsWith( "_ "));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.FUNCTION  &&  right.getFirstChild().getString().endsWith( "_ "));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.FUNCTION  &&  right.getFirstChild().getString().endsWith( "_ "));	  return    left.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	109	None	replace
390	[BUG]  [BUGGY]  return  left.getType()  ==  Token.FUNCTION  &&  right.getFirstChild().getType()  ==  Token.NAME;  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.FUNCTION  &&  right.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.FUNCTION  &&  right.getFirstChild().getType()  ==  Token.NAME;	  return    left.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  unclosed  string  literal	109	None	replace
391	[BUG]  [BUGGY]  return  left.getFirstChild();  Node  n  =  right.getLastChild();  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild();  Node  n  =  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getFirstChild();  Node  n  =  right.getLastChild();	  return    n.getLastChild();    Node    n    =    right.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	74	None	replace
392	[BUG]  [BUGGY]  return  left.getNext()?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getNext()?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getNext()?  Boolean.TRUE  :  Boolean.FALSE;	  return    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	13	None	replace
393	[BUG]  [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().equals(right.getString());  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().equals(right.getString());  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getNext()  &&  right.getLastChild().getString().equals(right.getString());	  return    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	13	None	replace
394	[BUG]  [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().equals(left.getString());  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().equals(left.getString());  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getNext()  &&  right.getLastChild().getString().equals(left.getString());	  return    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	13	None	replace
395	[BUG]  [BUGGY]  return  left.getType()!=  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()!=  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()!=  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM;	  return    left.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	15	None	replace
396	[BUG]  [BUGGY]  Node  op  =  left.getFirstChild();  return  op.getLastChild();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  op  =  left.getFirstChild();  return  op.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  op  =  left.getFirstChild();  return  op.getLastChild();	  return    n.getLastChild();    Node    n    =    right.getFirstChild();    return    n.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	121	None	replace
397	[BUG]  [BUGGY]  return  right.getLastChild();  Node  right  =  left.getNext();  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getLastChild();  Node  right  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    right.getLastChild();    Node  right  =  left.getNext();	  	non-compiled	[CE]  unclosed  string  literal	6	None	add
398	[BUG]  [BUGGY]  return  right.getLastChild();  Node  right  =  left.getNext();  return  right.getLastChild();  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getLastChild();  Node  right  =  left.getNext();  return  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    right.getLastChild();    Node  right  =  left.getNext();  return  right.getLastChild();	  	non-compiled	[CE]  unclosed  string  literal	6	None	add
399	[BUG]  [BUGGY]  return  right.getLastChild();  Node  right  =  n.getLastChild();  return  right.getLastChild();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getLastChild();  Node  right  =  n.getLastChild();  return  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    right.getLastChild();    Node  right  =  n.getLastChild();  return  right.getLastChild();	  	non-compiled	[CE]  unclosed  string  literal	6	None	add
400	[BUG]  [BUGGY]  Node  op  =  left.getFirstChild();  return  op.getFirstChild();  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  op  =  left.getFirstChild();  return  op.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  op  =  left.getFirstChild();  return  op.getFirstChild();	  return    n.getFirstChild();    Node    n    =    left.getLastChild();    return    n.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	39	None	replace
401	[BUG]  [BUGGY]  n.removeChild(left);  return  n.getLastChild();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.removeChild(left);  return  n.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.removeChild(left);  return  n.getLastChild();	  return    n.getLastChild();    return    n.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	111	None	replace
402	[BUG]  [BUGGY]  n  =  left.replaceChild(newNode,  left);  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.replaceChild(newNode,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.replaceChild(newNode,  left);	  n    =    left.replaceChild(right,    newNode);    	non-compiled	[CE]  unclosed  string  literal	114	None	replace
403	[BUG]  [BUGGY]  result  =  left.getfirstChild().getNext().getNext();  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getfirstChild().getNext().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getfirstChild().getNext().getNext();	  result    =    n.getLastChild().getNext().getNext();    	non-compiled	[CE]  unclosed  string  literal	68	None	replace
404	[BUG]  [BUGGY]  result  =  left.getfirstChild().getNext();  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getfirstChild().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getfirstChild().getNext();	  result    =    n.getLastChild().getNext();    	non-compiled	[CE]  unclosed  string  literal	43	None	replace
405	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext().getNext(),  right.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getNext().getNext(),  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext().getNext(),  right.getLastChild();	  result    =    left.getFirstChild().getNext().getNext();    	non-compiled	[CE]  	65	None	replace
406	[BUG]  [BUGGY]  Preconditions.checkState(n.getParent()!=  right);  Node  n  =  left.getNext();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getParent()!=  right);  Node  n  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getParent()!=  right);  Node  n  =  left.getNext();	  return    n.getParent();    Node    n    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	57	None	replace
407	[BUG]  [BUGGY]  Preconditions.checkState(n.getParent()  ==  right);  Node  n  =  left.getNext();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getParent()  ==  right);  Node  n  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getParent()  ==  right);  Node  n  =  left.getNext();	  return    n.getParent();    Node    n    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	57	None	replace
408	[BUG]  [BUGGY]  return  left.getParent();  Node  n  =  left.getNext();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getParent();  Node  n  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getParent();  Node  n  =  left.getNext();	  return    n.getParent();    Node    n    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	57	None	replace
409	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext().replaceChild(left,  n);  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().getNext().replaceChild(left,  n);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext().replaceChild(left,  n);	  result    =    n.getFirstChild().getNext().replaceChild(n,    left);    	non-compiled	[CE]  unclosed  string  literal	116	None	replace
410	[BUG]  [BUGGY]  result  =  n.getLastChild().getNext().replaceChild(n,  left);  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getLastChild().getNext().replaceChild(n,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getLastChild().getNext().replaceChild(n,  left);	  result    =    n.getFirstChild().getNext().replaceChild(n,    left);    	non-compiled	[CE]  unclosed  string  literal	116	None	replace
411	[BUG]  [BUGGY]  TraverseFactory.traverse(compiler,  left,  new  NodeTraversal());  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  TraverseFactory.traverse(compiler,  left,  new  NodeTraversal());  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	TraverseFactory.traverse(compiler,  left,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    right,    new    NodeTraversal());    	non-compiled	[CE]  unclosed  string  literal	29	None	replace
412	[BUG]  [BUGGY]  Context.traverse(compiler,  left,  new  NodeTraversal());  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Context.traverse(compiler,  left,  new  NodeTraversal());  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Context.traverse(compiler,  left,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    right,    new    NodeTraversal());    	non-compiled	[CE]  unclosed  string  literal	29	None	replace
413	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  left.getFirstChild();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  left.getFirstChild();	  return    n.getFirstChild();    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	34	None	replace
414	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  left.getFirstChild();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  left.getFirstChild();	  return    n.getFirstChild();    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	34	None	replace
415	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  left.getFirstChild();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  left.getFirstChild();	  return    n.getFirstChild();    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	34	None	replace
416	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  left.getFirstChild();  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  left.getFirstChild();	  return    n.getFirstChild();    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	34	None	replace
417	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  n  =  left.getFirstChild();  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  n  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  n  =  left.getFirstChild();	  return    n.getFirstChild();    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	34	None	replace
418	[BUG]  [BUGGY]  return  n.getLastChild().removeFirstChild();  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getLastChild().removeFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getLastChild().removeFirstChild();	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  unclosed  string  literal	8	None	replace
419	[BUG]  [BUGGY]  return  left.getParent();  Node  n  =  right.getParent();  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getParent();  Node  n  =  right.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getParent();  Node  n  =  right.getParent();	  return    n.getParent();    Node    n    =    right.getParent();    	non-compiled	[CE]  unclosed  string  literal	61	None	replace
420	[BUG]  [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  left.getLastChild().getString().endsWith( "n ");  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  left.getLastChild().getString().endsWith( "n ");  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.getType()  ==  Token.GETELEM  &&  left.getLastChild().getString().endsWith( "n ");	  return    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	92	None	replace
421	[BUG]  [BUGGY]  return  left.getFirstChild().getLastChild();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild().getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getFirstChild().getLastChild();	  return    left.getFirstChild().getNext();    	non-compiled	[CE]  unclosed  string  literal	125	None	replace
422	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()  -  1;  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild().getNext()  -  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getFirstChild().getNext()  -  1;	  return    left.getFirstChild().getNext();    	non-compiled	[CE]  unclosed  string  literal	125	None	replace
423	[BUG]  [BUGGY]  return  left.getFirstChild().getParent();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild().getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getFirstChild().getParent();	  return    left.getFirstChild().getNext();    	non-compiled	[CE]  unclosed  string  literal	125	None	replace
424	[BUG]  [BUGGY]  return  left;  Node  left  =  n.getLastChild();  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left;  Node  left  =  n.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left;  Node  left  =  n.getLastChild();	  return    left;    Node    left    =    right.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	20	None	replace
425	[BUG]  [BUGGY]  return  left;  node  =  right.getLastChild();  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left;  node  =  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left;  node  =  right.getLastChild();	  return    left;    Node    left    =    right.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	20	None	replace
426	[BUG]  [BUGGY]  return  left.getLastChild();  left.getLastChild();  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getLastChild();  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getLastChild();  left.getLastChild();	  return    n.getLastChild();    n.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	75	None	replace
427	[BUG]  [BUGGY]  return  left.getFirstChild();  n.getLastChild();  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild();  n.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getFirstChild();  n.getLastChild();	  return    n.getLastChild();    n.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	75	None	replace
428	[BUG]  [BUGGY]  n.removeChild(left);  n.getLastChild();  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.removeChild(left);  n.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.removeChild(left);  n.getLastChild();	  return    n.getLastChild();    n.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	75	None	replace
429	[BUG]  [BUGGY]  n.removeChild(left);  n.removeLastChild();  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.removeChild(left);  n.removeLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.removeChild(left);  n.removeLastChild();	  return    n.getLastChild();    n.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	75	None	replace
430	[BUG]  [BUGGY]  return  left.getFirstChild();  left.getLastChild();  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild();  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getFirstChild();  left.getLastChild();	  return    n.getLastChild();    n.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	75	None	replace
431	[BUG]  [BUGGY]  return  n.getType()  >>  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()  >>  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  >>  Token.GETELEM;	  return    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	85	None	replace
432	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  right);  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.replaceChild(left,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.replaceChild(left,  right);	  n    =    left.removeFirstChild();    	non-compiled	[CE]  unclosed  string  literal	110	None	replace
433	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  left);  Node  n  =  left.getLastChild();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  left);  Node  n  =  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getFirstChild()  ==  left);  Node  n  =  left.getLastChild();	  return    n.getFirstChild();    Node    n    =    left.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	36	None	replace
434	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  left);  Node  n  =  left.getLastChild();  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  left);  Node  n  =  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getFirstChild()!=  left);  Node  n  =  left.getLastChild();	  return    n.getFirstChild();    Node    n    =    left.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	36	None	replace
435	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  right);  Node  n  =  left.getLastChild();  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  right);  Node  n  =  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getFirstChild()!=  right);  Node  n  =  left.getLastChild();	  return    n.getFirstChild();    Node    n    =    left.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	36	None	replace
436	[BUG]  [BUGGY]  return  left.getFirstChild();  Node  n  =  left.getLastChild();  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild();  Node  n  =  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getFirstChild();  Node  n  =  left.getLastChild();	  return    n.getFirstChild();    Node    n    =    left.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	36	None	replace
437	[BUG]  [BUGGY]  Node  n  =  left.replaceChild(left,  right);  [CE]  unclosed  string  literal  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.replaceChild(left,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.replaceChild(left,  right);	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	32	None	replace
438	[BUG]  [BUGGY]  NodeUtil.removeChild(left,  right);  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeUtil.removeChild(left,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeUtil.removeChild(left,  right);	  n.removeChild(right);    	non-compiled	[CE]  unclosed  string  literal	49	None	replace
439	[BUG]  [BUGGY]  n.addChildToFront(left);  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.addChildToFront(left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.addChildToFront(left);	  n.removeChild(right);    	non-compiled	[CE]  unclosed  string  literal	49	None	replace
440	[BUG]  [BUGGY]  return  left.getType()  ==  Token.NAME?  right  :  Node.newString(Token.NAME,  left.getString());  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.NAME?  right  :  Node.newString(Token.NAME,  left.getString());  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.NAME?  right  :  Node.newString(Token.NAME,  left.getString());	  return    right;    	non-compiled	[CE]  unclosed  string  literal	12	None	replace
441	[BUG]  [BUGGY]  return  left.getType()  ==  Token.NAME?  right  :  Node.newString(Token.NAME,  left.getLastChild());  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.NAME?  right  :  Node.newString(Token.NAME,  left.getLastChild());  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.NAME?  right  :  Node.newString(Token.NAME,  left.getLastChild());	  return    right;    	non-compiled	[CE]  unclosed  string  literal	12	None	replace
442	[BUG]  [BUGGY]  return  left.getType()  ==  Token.NAME?  right  :  Node.newString(Token.NAME,  left.getString()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.NAME?  right  :  Node.newString(Token.NAME,  left.getString()));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.NAME?  right  :  Node.newString(Token.NAME,  left.getString()));	  return    right;    	non-compiled	[CE]  	12	None	replace
443	[BUG]  [BUGGY]  return  left.getType()  ==  Token.FUNCTION?  right  :  Node.newString(Token.NAME,  left.getLastChild());  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.FUNCTION?  right  :  Node.newString(Token.NAME,  left.getLastChild());  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.FUNCTION?  right  :  Node.newString(Token.NAME,  left.getLastChild());	  return    right;    	non-compiled	[CE]  unclosed  string  literal	12	None	replace
444	[BUG]  [BUGGY]  return  left.getType()  ==  Token.FUNCTION?  right  :  Node.newString(Token.NAME,  left.getString()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.FUNCTION?  right  :  Node.newString(Token.NAME,  left.getString()));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.FUNCTION?  right  :  Node.newString(Token.NAME,  left.getString()));	  return    right;    	non-compiled	[CE]  	12	None	replace
445	[BUG]  [BUGGY]  n.removeChild(left);  return  n.getFirstChild();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.removeChild(left);  return  n.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.removeChild(left);  return  n.getFirstChild();	  return    n.getFirstChild();    return    n.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	126	None	replace
446	[BUG]  [BUGGY]  return  right;  Node  left  =  left.getNext();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right;  Node  left  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right;  Node  left  =  left.getNext();	  return    left;    Node    left    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	17	None	replace
447	[BUG]  [BUGGY]  return  n;  Node  left  =  left.getNext();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n;  Node  left  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n;  Node  left  =  left.getNext();	  return    left;    Node    left    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	17	None	replace
448	[BUG]  [BUGGY]  return  left;  node  =  left.getNext();  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left;  node  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left;  node  =  left.getNext();	  return    left;    Node    left    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	17	None	replace
449	[BUG]  [BUGGY]  return  left;  Node  left  =  left.getParent();  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left;  Node  left  =  left.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left;  Node  left  =  left.getParent();	  return    left;    Node    left    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	17	None	replace
450	[BUG]  [BUGGY]  n.replaceChild(left,  new  Node(right));  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.replaceChild(left,  new  Node(right));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.replaceChild(left,  new  Node(right));	  n.replaceChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	99	None	replace
451	[BUG]  [BUGGY]  n.replaceChild(left,  left);  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.replaceChild(left,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.replaceChild(left,  left);	  n.replaceChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	99	None	replace
452	[BUG]  [BUGGY]  n  =  left.replaceChild(right,  new  Node(Token.EMPTY)+  1);  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.replaceChild(right,  new  Node(Token.EMPTY)+  1);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.replaceChild(right,  new  Node(Token.EMPTY)+  1);	  n    =    left.replaceChild(right,    new    Node(Token.EMPTY));    	non-compiled	[CE]  unclosed  string  literal	123	None	replace
453	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  new  Node(Token.EMPTY)+  1);  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.replaceChild(left,  new  Node(Token.EMPTY)+  1);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.replaceChild(left,  new  Node(Token.EMPTY)+  1);	  n    =    left.replaceChild(right,    new    Node(Token.EMPTY));    	non-compiled	[CE]  unclosed  string  literal	123	None	replace
454	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  new  Node(Token.EMPTY),  false);  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.replaceChild(left,  new  Node(Token.EMPTY),  false);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.replaceChild(left,  new  Node(Token.EMPTY),  false);	  n    =    left.replaceChild(right,    new    Node(Token.EMPTY));    	non-compiled	[CE]  unclosed  string  literal	123	None	replace
455	[BUG]  [BUGGY]  return  left.getNext().cloneTree();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getNext().cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getNext().cloneTree();	  return    left.cloneTree();    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
456	[BUG]  [BUGGY]  return  this.left.cloneTree();  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  this.left.cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  this.left.cloneTree();	  return    left.cloneTree();    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
457	[BUG]  [BUGGY]  return  left,  right.cloneTree();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left,  right.cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left,  right.cloneTree();	  return    left.cloneTree();    	non-compiled	[CE]  	14	None	replace
458	[BUG]  [BUGGY]  return  node.cloneTree();  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  node.cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  node.cloneTree();	  return    left.cloneTree();    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
459	[BUG]  [BUGGY]  return  right;  Node  left  =  n.getFirstChild();  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right;  Node  left  =  n.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right;  Node  left  =  n.getFirstChild();	  return    left;    Node    left    =    n.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	21	None	replace
460	[BUG]  [BUGGY]  return  left;  node  =  n.getFirstChild();  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left;  node  =  n.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left;  node  =  n.getFirstChild();	  return    left;    Node    left    =    n.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	21	None	replace
461	[BUG]  [BUGGY]  return  left.getLastChild();  Node  n  =  left.getFirstChild();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getLastChild();  Node  n  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getLastChild();  Node  n  =  left.getFirstChild();	  return    n.getLastChild();    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	71	None	replace
462	[BUG]  [BUGGY]  Preconditions.checkState(n.getLastChild()!=  left);  Node  n  =  left.getFirstChild();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getLastChild()!=  left);  Node  n  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getLastChild()!=  left);  Node  n  =  left.getFirstChild();	  return    n.getLastChild();    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	71	None	replace
463	[BUG]  [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  left);  Node  n  =  left.getFirstChild();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  left);  Node  n  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getLastChild()  ==  left);  Node  n  =  left.getFirstChild();	  return    n.getLastChild();    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	71	None	replace
464	[BUG]  [BUGGY]  Preconditions.checkState(n.getLastChild()!=  right);  Node  n  =  left.getFirstChild();  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getLastChild()!=  right);  Node  n  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getLastChild()!=  right);  Node  n  =  left.getFirstChild();	  return    n.getLastChild();    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	71	None	replace
465	[BUG]  [BUGGY]  return  left.getfirstChild();  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getfirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getfirstChild();	  return    right.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	7	None	replace
466	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNode,  n);  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNode,  n);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  newNode,  n);	  NodeTraversal.traverse(compiler,    left,    newNode);    	non-compiled	[CE]  unclosed  string  literal	100	None	replace
467	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNode,  undefinedRight);  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNode,  undefinedRight);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  newNode,  undefinedRight);	  NodeTraversal.traverse(compiler,    left,    newNode);    	non-compiled	[CE]  unclosed  string  literal	100	None	replace
468	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  op.getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  op.getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.GETELEM  ||  op.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    op.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	84	None	replace
469	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.FUNCTION);  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(left.getType()  ==  Token.FUNCTION);	  return    n.getParent();    Node    n    =    left.getNext();    return    n.getParent();    	non-compiled	[CE]  unclosed  string  literal	105	None	replace
470	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext().cloneTree(left);  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().getNext().cloneTree(left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext().cloneTree(left);	  result    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
471	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext().cloneNode();  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().getNext().cloneNode();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext().cloneNode();	  result    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
472	[BUG]  [BUGGY]  Node  op  =  left.cloneTree();  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  op  =  left.cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  op  =  left.cloneTree();	  Node    op    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	30	None	replace
473	[BUG]  [BUGGY]  Node  op  =  left.getParent();  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  op  =  left.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  op  =  left.getParent();	  Node    op    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	30	None	replace
474	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  right);  Node  n  =  left.getNext();  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  right);  Node  n  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getFirstChild()!=  right);  Node  n  =  left.getNext();	  return    n.getFirstChild();    Node    n    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	38	None	replace
475	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  left);  Node  n  =  left.getNext();  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  left);  Node  n  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getFirstChild()!=  left);  Node  n  =  left.getNext();	  return    n.getFirstChild();    Node    n    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	38	None	replace
476	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  left);  Node  n  =  left.getNext();  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  left);  Node  n  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getFirstChild()  ==  left);  Node  n  =  left.getNext();	  return    n.getFirstChild();    Node    n    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	38	None	replace
477	[BUG]  [BUGGY]  return  left.getFirstChild();  Node  n  =  left.getNext();  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild();  Node  n  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getFirstChild();  Node  n  =  left.getNext();	  return    n.getFirstChild();    Node    n    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	38	None	replace
478	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT;  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.EXPR_RESULT;	  return    n.getNext();    	non-compiled	[CE]  unclosed  string  literal	24	None	replace
479	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.FUNCTION);  Node  left  =  left.getNext();  return  left;  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.FUNCTION);  Node  left  =  left.getNext();  return  left;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(left.getType()  ==  Token.FUNCTION);  Node  left  =  left.getNext();  return  left;	  return    left;    Node    left    =    left.getNext();    return    left;    	non-compiled	[CE]  unclosed  string  literal	104	None	replace
480	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.FUNCTION);  Node  left  =  left.getNext();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.FUNCTION);  Node  left  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(left.getType()  ==  Token.FUNCTION);  Node  left  =  left.getNext();	  return    left;    Node    left    =    left.getNext();    return    left;    	non-compiled	[CE]  unclosed  string  literal	104	None	replace
481	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME);  Node  left  =  left.getNext();  return  left;  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME);  Node  left  =  left.getNext();  return  left;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(left.getType()  ==  Token.NAME);  Node  left  =  left.getNext();  return  left;	  return    left;    Node    left    =    left.getNext();    return    left;    	non-compiled	[CE]  unclosed  string  literal	104	None	replace
482	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.FUNCTION);  Node  left  =  left.getNext();  return  right;  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.FUNCTION);  Node  left  =  left.getNext();  return  right;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(left.getType()  ==  Token.FUNCTION);  Node  left  =  left.getNext();  return  right;	  return    left;    Node    left    =    left.getNext();    return    left;    	non-compiled	[CE]  unclosed  string  literal	104	None	replace
483	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.VAR);  Node  left  =  left.getNext();  return  left;  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.VAR);  Node  left  =  left.getNext();  return  left;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(left.getType()  ==  Token.VAR);  Node  left  =  left.getNext();  return  left;	  return    left;    Node    left    =    left.getNext();    return    left;    	non-compiled	[CE]  unclosed  string  literal	104	None	replace
484	[BUG]  [BUGGY]  return  left.getParent();  Node  n  =  left.getFirstChild();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getParent();  Node  n  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getParent();  Node  n  =  left.getFirstChild();	  return    n.getParent();    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	58	None	replace
485	[BUG]  [BUGGY]  Node  op  =  left.replaceChild(n,  right);  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  op  =  left.replaceChild(n,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  op  =  left.replaceChild(n,  right);	  Node    op    =    left.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	102	None	replace
486	[BUG]  [BUGGY]  result  =  left,  right.getLastChild().getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left,  right.getLastChild().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left,  right.getLastChild().getNext();	  result    =    left,    n.getFirstChild().getNext();    	non-compiled	[CE]  	47	None	replace
487	[BUG]  [BUGGY]  result  =  left.getFirstChild().replaceChild(right,  left);  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().replaceChild(right,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().replaceChild(right,  left);	  result    =    n.getFirstChild().replaceChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	51	None	replace
488	[BUG]  [BUGGY]  return  left.getParent();  n.getParent();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getParent();  n.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getParent();  n.getParent();	  return    n.getParent();    n.getParent();    	non-compiled	[CE]  unclosed  string  literal	129	None	replace
489	[BUG]  [BUGGY]  return  left.getNext();  n.getParent();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getNext();  n.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getNext();  n.getParent();	  return    n.getParent();    n.getParent();    	non-compiled	[CE]  unclosed  string  literal	129	None	replace
490	[BUG]  [BUGGY]  return  n.getNext();  n.getParent();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getNext();  n.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getNext();  n.getParent();	  return    n.getParent();    n.getParent();    	non-compiled	[CE]  unclosed  string  literal	129	None	replace
491	[BUG]  [BUGGY]  n.removeChild(left);  n.getParent();  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.removeChild(left);  n.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.removeChild(left);  n.getParent();	  return    n.getParent();    n.getParent();    	non-compiled	[CE]  unclosed  string  literal	129	None	replace
492	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext().replaceChild(left,  newNode);  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().getNext().replaceChild(left,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext().replaceChild(left,  newNode);	  result    =    n.getFirstChild().getNext().removeFirstChild();    	non-compiled	[CE]  unclosed  string  literal	115	None	replace
493	[BUG]  [BUGGY]  return  left.getFirstChild();  n.getFirstChild();  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild();  n.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getFirstChild();  n.getFirstChild();	  return    n.getFirstChild();    n.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	40	None	replace
494	[BUG]  [BUGGY]  return  left.getFirstChild();  left.getFirstChild();  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild();  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getFirstChild();  left.getFirstChild();	  return    n.getFirstChild();    n.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	40	None	replace
495	[BUG]  [BUGGY]  n.removeChild(left);  n.removeChild(right);  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.removeChild(left);  n.removeChild(right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.removeChild(left);  n.removeChild(right);	  return    n.getFirstChild();    n.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	40	None	replace
496	[BUG]  [BUGGY]  n  =  left.getPrevious();  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getPrevious();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getPrevious();	  n    =    right.getNext();    	non-compiled	[CE]  unclosed  string  literal	79	None	replace
497	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  right.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  right.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.GETELEM  &&  right.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	86	None	replace
498	[BUG]  [BUGGY]  n  =  left.getNext()  +  right.getType()  ==  Token.FUNCTION;  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getNext()  +  right.getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getNext()  +  right.getType()  ==  Token.FUNCTION;	  n    =    left.getNext()    ||    right.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  unclosed  string  literal	82	None	replace
499	[BUG]  [BUGGY]  n.removeChild(left);  return  n.getParent();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.removeChild(left);  return  n.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.removeChild(left);  return  n.getParent();	  return    n.getParent();    return    n.getParent();    	non-compiled	[CE]  unclosed  string  literal	130	None	replace
500	[BUG]  [BUGGY]  n  =  left.getNext();  return  right.getFirstChild();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getNext();  return  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getNext();  return  right.getFirstChild();	  return    n.getFirstChild();    Node    n    =    left.getNext();    return    n.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	94	None	replace
501	[BUG]  [BUGGY]  n  =  left.getFirstChild().removeFirstChild();  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getFirstChild().removeFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getFirstChild().removeFirstChild();	  n    =    left.getFirstChild()    +    1;    	non-compiled	[CE]  unclosed  string  literal	11	None	replace
502	[BUG]  [BUGGY]  result  =  left,  n.getLastChild().getNext().getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left,  n.getLastChild().getNext().getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left,  n.getLastChild().getNext().getNext();	  result    =    left,    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  	69	None	replace
503	[BUG]  [BUGGY]  return  left.getType()  ==  Token.FUNCTION  &&  right.getChildCount()  >  1;  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.FUNCTION  &&  right.getChildCount()  >  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.FUNCTION  &&  right.getChildCount()  >  1;	  return    left.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  unclosed  string  literal	109	None	replace
504	[BUG]  [BUGGY]  return  left.getType()  ==  Token.FUNCTION  &&  right.getFirstChild()!=  right;  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.FUNCTION  &&  right.getFirstChild()!=  right;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.FUNCTION  &&  right.getFirstChild()!=  right;	  return    left.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  unclosed  string  literal	109	None	replace
505	[BUG]  [BUGGY]  return  left.getType()  ==  Token.FUNCTION  ||  right.getFirstChild()!=  null;  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.FUNCTION  ||  right.getFirstChild()!=  null;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.FUNCTION  ||  right.getFirstChild()!=  null;	  return    left.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  unclosed  string  literal	109	None	replace
506	[BUG]  [BUGGY]  return  left.getParent();  Node  n  =  right.getNext();  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getParent();  Node  n  =  right.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getParent();  Node  n  =  right.getNext();	  return    n.getParent();    Node    n    =    right.getNext();    	non-compiled	[CE]  unclosed  string  literal	62	None	replace
507	[BUG]  [BUGGY]  Preconditions.checkState(n.getParent()!=  right);  Node  n  =  right.getNext();  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getParent()!=  right);  Node  n  =  right.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getParent()!=  right);  Node  n  =  right.getNext();	  return    n.getParent();    Node    n    =    right.getNext();    	non-compiled	[CE]  unclosed  string  literal	62	None	replace
508	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  right.getNext();  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  right.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  right.getNext();	  return    n.getParent();    Node    n    =    right.getNext();    	non-compiled	[CE]  unclosed  string  literal	62	None	replace
509	[BUG]  [BUGGY]  return  n;  n  =  left.getLastChild();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n;  n  =  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n;  n  =  left.getLastChild();	  return    left;    n    =    left.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	128	None	replace
510	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  left.getParent();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  left.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  left.getParent();	  return    n.getParent();    Node    n    =    left.getParent();    	non-compiled	[CE]  unclosed  string  literal	59	None	replace
511	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  left.getParent();  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  left.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  left.getParent();	  return    n.getParent();    Node    n    =    left.getParent();    	non-compiled	[CE]  unclosed  string  literal	59	None	replace
512	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  left.getParent();  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  left.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  left.getParent();	  return    n.getParent();    Node    n    =    left.getParent();    	non-compiled	[CE]  unclosed  string  literal	59	None	replace
513	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  left.getParent();  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  left.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  left.getParent();	  return    n.getParent();    Node    n    =    left.getParent();    	non-compiled	[CE]  unclosed  string  literal	59	None	replace
514	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  n  =  left.getParent();  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  n  =  left.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  n  =  left.getParent();	  return    n.getParent();    Node    n    =    left.getParent();    	non-compiled	[CE]  unclosed  string  literal	59	None	replace
515	[BUG]  [BUGGY]  result  =  left.getFirstChild().replaceChild(n,  left);  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().replaceChild(n,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().replaceChild(n,  left);	  result    =    left.getFirstChild().replaceChild(n,    right);    	non-compiled	[CE]  unclosed  string  literal	52	None	replace
516	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext().getNext()  /  1;  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getNext().getNext()  /  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext().getNext()  /  1;	  result    =    n.getFirstChild().getNext().getNext()    +    1;    	non-compiled	[CE]  unclosed  string  literal	67	None	replace
517	[BUG]  [BUGGY]  TraverseFactory.traverse(compiler,  left,  right);  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  TraverseFactory.traverse(compiler,  left,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	TraverseFactory.traverse(compiler,  left,  right);	  NodeTraversal.traverse(compiler,    left,    n);    	non-compiled	[CE]  unclosed  string  literal	101	None	replace
518	[BUG]  [BUGGY]  result  =  n.getLastChild().replaceChild(left,  left);  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getLastChild().replaceChild(left,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getLastChild().replaceChild(left,  left);	  result    =    n.getFirstChild().replaceChild(left,    left);    	non-compiled	[CE]  unclosed  string  literal	55	None	replace
519	[BUG]  [BUGGY]  return  right;  Node  left  =  left.getFirstChild();  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right;  Node  left  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right;  Node  left  =  left.getFirstChild();	  return    left;    Node    left    =    left.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	19	None	replace
520	[BUG]  [BUGGY]  return  n;  Node  left  =  left.getFirstChild();  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n;  Node  left  =  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n;  Node  left  =  left.getFirstChild();	  return    left;    Node    left    =    left.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	19	None	replace
521	[BUG]  [BUGGY]  return  left;  Node  left  =  right.getParent();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left;  Node  left  =  right.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left;  Node  left  =  right.getParent();	  return    left;    Node    left    =    right.getNext();    	non-compiled	[CE]  unclosed  string  literal	16	None	replace
522	[BUG]  [BUGGY]  result  =  n;  Node  left  =  right.getNext();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n;  Node  left  =  right.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n;  Node  left  =  right.getNext();	  return    left;    Node    left    =    right.getNext();    	non-compiled	[CE]  unclosed  string  literal	16	None	replace
523	[BUG]  [BUGGY]  return  result;  Node  left  =  right.getNext();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  result;  Node  left  =  right.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  result;  Node  left  =  right.getNext();	  return    left;    Node    left    =    right.getNext();    	non-compiled	[CE]  unclosed  string  literal	16	None	replace
524	[BUG]  [BUGGY]  n.replaceChild(left,  newNode).replaceChild(n,  right);  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.replaceChild(left,  newNode).replaceChild(n,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.replaceChild(left,  newNode).replaceChild(n,  right);	  n.replaceChild(left,    newNode);    	non-compiled	[CE]  unclosed  string  literal	89	None	replace
525	[BUG]  [BUGGY]  n.replaceChild(left,  newNode).replaceChild(n,  left);  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.replaceChild(left,  newNode).replaceChild(n,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.replaceChild(left,  newNode).replaceChild(n,  left);	  n.replaceChild(left,    newNode);    	non-compiled	[CE]  unclosed  string  literal	89	None	replace
526	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  right.getParent().getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  right.getParent().getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.GETELEM  &&  right.getParent().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getParent().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	87	None	replace
527	[BUG]  [BUGGY]  Node  n  =  right.getParent();  return  n.getParent();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  right.getParent();  return  n.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  right.getParent();  return  n.getParent();	  return    n.getParent();    Node    n    =    left.getParent();    return    n.getParent();    	non-compiled	[CE]  unclosed  string  literal	107	None	replace
528	[BUG]  [BUGGY]  Node  left  =  left.getParent();  return  right.getParent();  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  left.getParent();  return  right.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  left.getParent();  return  right.getParent();	  return    n.getParent();    Node    n    =    left.getParent();    return    n.getParent();    	non-compiled	[CE]  unclosed  string  literal	107	None	replace
529	[BUG]  [BUGGY]  Node  n  =  left.getParent();  return  n.getFirstChild();  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.getParent();  return  n.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.getParent();  return  n.getFirstChild();	  return    n.getParent();    Node    n    =    left.getParent();    return    n.getParent();    	non-compiled	[CE]  unclosed  string  literal	107	None	replace
530	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  right);  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getNext().replaceChild(left,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getNext().replaceChild(left,  right);	  n.getParent().replaceChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	120	None	replace
531	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  new  Node(right));  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getParent().replaceChild(left,  new  Node(right));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getParent().replaceChild(left,  new  Node(right));	  n.getParent().replaceChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	120	None	replace
532	[BUG]  [BUGGY]  n.getName().replaceChild(left,  right);  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getName().replaceChild(left,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getName().replaceChild(left,  right);	  n.getParent().replaceChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	120	None	replace
533	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  left);  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  left);	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  unclosed  string  literal	118	None	replace
534	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.FUNCTION);  Node  left  =  right.getNext();  return  left;  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.FUNCTION);  Node  left  =  right.getNext();  return  left;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(left.getType()  ==  Token.FUNCTION);  Node  left  =  right.getNext();  return  left;	  return    left;    Node    left    =    right.getNext();    return    left;    	non-compiled	[CE]  unclosed  string  literal	23	None	replace
535	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME);  Node  left  =  right.getNext();  return  left;  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME);  Node  left  =  right.getNext();  return  left;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(left.getType()  ==  Token.NAME);  Node  left  =  right.getNext();  return  left;	  return    left;    Node    left    =    right.getNext();    return    left;    	non-compiled	[CE]  unclosed  string  literal	23	None	replace
536	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.VAR);  Node  left  =  right.getNext();  return  left;  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.VAR);  Node  left  =  right.getNext();  return  left;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(left.getType()  ==  Token.VAR);  Node  left  =  right.getNext();  return  left;	  return    left;    Node    left    =    right.getNext();    return    left;    	non-compiled	[CE]  unclosed  string  literal	23	None	replace
537	[BUG]  [BUGGY]  Preconditions.checkState(right.getType()  ==  Token.FUNCTION);  Node  left  =  right.getNext();  return  left;  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(right.getType()  ==  Token.FUNCTION);  Node  left  =  right.getNext();  return  left;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(right.getType()  ==  Token.FUNCTION);  Node  left  =  right.getNext();  return  left;	  return    left;    Node    left    =    right.getNext();    return    left;    	non-compiled	[CE]  unclosed  string  literal	23	None	replace
538	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  left);  break;  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  left);  break;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  left);  break;	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    break;    	non-compiled	[CE]  unclosed  string  literal	119	None	replace
539	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  PeepholeFoldConstants());  break;  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  PeepholeFoldConstants());  break;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  right,  new  PeepholeFoldConstants());  break;	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    break;    	non-compiled	[CE]  unclosed  string  literal	119	None	replace
540	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  false);  break;  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  false);  break;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  false);  break;	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    break;    	non-compiled	[CE]  unclosed  string  literal	119	None	replace
541	[BUG]  [BUGGY]  return  left.getFirstChild();  n.removeLastChild();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild();  n.removeLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getFirstChild();  n.removeLastChild();	  return    n.getLastChild();    n.removeLastChild();    	non-compiled	[CE]  unclosed  string  literal	122	None	replace
542	[BUG]  [BUGGY]  return  n.getType()!=  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()!=  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()!=  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	86	None	replace
543	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()!=  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()!=  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()!=  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	86	None	replace
544	[BUG]  [BUGGY]  return  n.getfirstChild();  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getfirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getfirstChild();	  return    right.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	7	None	replace
545	[BUG]  [BUGGY]  return  n.getlastChild();  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getlastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getlastChild();	  return    right.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	7	None	replace
546	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  right.getParent();  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  right.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  right.getParent();	  return    n.getParent();    Node    n    =    right.getParent();    	non-compiled	[CE]  unclosed  string  literal	61	None	replace
547	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  right.getParent();  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  right.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  right.getParent();	  return    n.getParent();    Node    n    =    right.getParent();    	non-compiled	[CE]  unclosed  string  literal	61	None	replace
548	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  right.getParent();  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  right.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  right.getParent();	  return    n.getParent();    Node    n    =    right.getParent();    	non-compiled	[CE]  unclosed  string  literal	61	None	replace
549	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  right.getParent();  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  right.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  right.getParent();	  return    n.getParent();    Node    n    =    right.getParent();    	non-compiled	[CE]  unclosed  string  literal	61	None	replace
550	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  n  =  right.getParent();  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  n  =  right.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  n  =  right.getParent();	  return    n.getParent();    Node    n    =    right.getParent();    	non-compiled	[CE]  unclosed  string  literal	61	None	replace
551	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  n  =  right.getParent();  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  n  =  right.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  n  =  right.getParent();	  return    n.getParent();    Node    n    =    right.getParent();    	non-compiled	[CE]  unclosed  string  literal	61	None	replace
552	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext(),  right);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getNext(),  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext(),  right);	  result    =    left.getFirstChild().getNext();    	non-compiled	[CE]  	42	None	replace
553	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(REPATING_A_NON_NUMBER_ERROR));  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(REPATING_A_NON_NUMBER_ERROR));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(REPATING_A_NON_NUMBER_ERROR));	  NodeTraversal.traverse(compiler,    left,    n);    	non-compiled	[CE]  unclosed  string  literal	101	None	replace
554	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(REPATING_A_NON_NUMBER_ERROR),  n);  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(REPATING_A_NON_NUMBER_ERROR),  n);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(REPATING_A_NON_NUMBER_ERROR),  n);	  NodeTraversal.traverse(compiler,    left,    n);    	non-compiled	[CE]  unclosed  string  literal	101	None	replace
555	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(REACHABLE_BITWISE_OPERAND,  right));  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(REACHABLE_BITWISE_OPERAND,  right));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(REACHABLE_BITWISE_OPERAND,  right));	  NodeTraversal.traverse(compiler,    left,    n);    	non-compiled	[CE]  unclosed  string  literal	101	None	replace
556	[BUG]  [BUGGY]  return  left.getFirstChild();  Node  left  =  left.getFirstChild();  return  right.getFirstChild();  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild();  Node  left  =  left.getFirstChild();  return  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left.getFirstChild();    Node  left  =  left.getFirstChild();  return  right.getFirstChild();	  	non-compiled	[CE]  unclosed  string  literal	3	None	add
557	[BUG]  [BUGGY]  return  left.getFirstChild();  Node  left  =  left.getFirstChild();  n.removeChild(left);  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild();  Node  left  =  left.getFirstChild();  n.removeChild(left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left.getFirstChild();    Node  left  =  left.getFirstChild();  n.removeChild(left);	  	non-compiled	[CE]  unclosed  string  literal	3	None	add
558	[BUG]  [BUGGY]  n  =  left.getFirstChild().cloneTree()  +  1;  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getFirstChild().cloneTree()  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getFirstChild().cloneTree()  +  1;	  n    =    left.getFirstChild()    +    1;    	non-compiled	[CE]  unclosed  string  literal	11	None	replace
559	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  right.getString().endsWith( "__ ")||  right.getString().endsWith( "__ "));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  right.getString().endsWith( "__ ")||  right.getString().endsWith( "__ "));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.GETELEM  &&  right.getString().endsWith( "__ ")||  right.getString().endsWith( "__ "));	  return    left.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  	15	None	replace
560	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext().getNext()  *  1;  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().getNext().getNext()  *  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext().getNext()  *  1;	  result    =    n.getFirstChild().getNext().getNext()    +    1;    	non-compiled	[CE]  unclosed  string  literal	67	None	replace
561	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext().getNext()  *  2  +  1;  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().getNext().getNext()  *  2  +  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext().getNext()  *  2  +  1;	  result    =    n.getFirstChild().getNext().getNext()    +    1;    	non-compiled	[CE]  unclosed  string  literal	67	None	replace
562	[BUG]  [BUGGY]  return  n.getType()!=  Token.GETELEM  ||  n.getParent().getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getType()!=  Token.GETELEM  ||  n.getParent().getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getType()!=  Token.GETELEM  ||  n.getParent().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getParent().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	87	None	replace
563	[BUG]  [BUGGY]  return  right.getLastChild();  Node  right  =  right.getFirstChild();  return  right.getLastChild();  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getLastChild();  Node  right  =  right.getFirstChild();  return  right.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    right.getLastChild();    Node  right  =  right.getFirstChild();  return  right.getLastChild();	  	non-compiled	[CE]  unclosed  string  literal	6	None	add
564	[BUG]  [BUGGY]  return  right.getLastChild();  Node  left  =  right.getFirstChild();  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getLastChild();  Node  left  =  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    right.getLastChild();    Node  left  =  right.getFirstChild();	  	non-compiled	[CE]  unclosed  string  literal	6	None	add
565	[BUG]  [BUGGY]  return  right.getLastChild();  Node  left  =  right.getFirstChild();  return  left.getLastChild();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getLastChild();  Node  left  =  right.getFirstChild();  return  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    right.getLastChild();    Node  left  =  right.getFirstChild();  return  left.getLastChild();	  	non-compiled	[CE]  unclosed  string  literal	6	None	add
566	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.VAR);  Node  left  =  left.getNext();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.VAR);  Node  left  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(left.getType()  ==  Token.VAR);  Node  left  =  left.getNext();	  return    left;    Node    left    =    left.getNext();    return    left;    	non-compiled	[CE]  unclosed  string  literal	104	None	replace
567	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.CALL);  Node  left  =  left.getNext();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.CALL);  Node  left  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(left.getType()  ==  Token.CALL);  Node  left  =  left.getNext();	  return    left;    Node    left    =    left.getNext();    return    left;    	non-compiled	[CE]  unclosed  string  literal	104	None	replace
568	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  n  =  left.getParent();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  n  =  left.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  n  =  left.getParent();	  return    n.getParent();    Node    n    =    left.getParent();    	non-compiled	[CE]  unclosed  string  literal	59	None	replace
569	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext().cloneTree()  ||  left.getFirstChild().getNext().cloneTree();  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().getNext().cloneTree()  ||  left.getFirstChild().getNext().cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext().cloneTree()  ||  left.getFirstChild().getNext().cloneTree();	  result    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
570	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext().cloneTree()  ||  left.getLastChild().getNext().cloneTree();  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().getNext().cloneTree()  ||  left.getLastChild().getNext().cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext().cloneTree()  ||  left.getLastChild().getNext().cloneTree();	  result    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
571	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext().cloneTree()  ||  right.getLastChild().getNext().cloneTree();  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().getNext().cloneTree()  ||  right.getLastChild().getNext().cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext().cloneTree()  ||  right.getLastChild().getNext().cloneTree();	  result    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
572	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  return  n!=  null?  right  :  n.getParent();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.getFirstChild();  return  n!=  null?  right  :  n.getParent();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.getFirstChild();  return  n!=  null?  right  :  n.getParent();	  return    n.getParent();    Node    n    =    left.getFirstChild();    return    n.getParent();    	non-compiled	[CE]  unclosed  string  literal	106	None	replace
573	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  left.getNext();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  left.getNext();	  return    n.getParent();    Node    n    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	57	None	replace
574	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  n  =  left.getNext();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  n  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  n  =  left.getNext();	  return    n.getParent();    Node    n    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	57	None	replace
575	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  n  =  left.getNext();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  n  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR);  Node  n  =  left.getNext();	  return    n.getParent();    Node    n    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	57	None	replace
576	[BUG]  [BUGGY]  result  =  n.getFirstChild().cloneTree();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().cloneTree();	  result    =    n.getFirstChild().removeFirstChild();    	non-compiled	[CE]  unclosed  string  literal	127	None	replace
577	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext().getNext().replaceChild(n,  right);  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getNext().getNext().replaceChild(n,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext().getNext().replaceChild(n,  right);	  result    =    left.getFirstChild().getNext().getNext().getNext();    	non-compiled	[CE]  unclosed  string  literal	70	None	replace
578	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext().getNext().removeFirstChild();  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getNext().getNext().removeFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext().getNext().removeFirstChild();	  result    =    left.getFirstChild().getNext().getNext().getNext();    	non-compiled	[CE]  unclosed  string  literal	70	None	replace
579	[BUG]  [BUGGY]  n  =  n.replaceChild(left,  new  Node(Token.EMPTY));  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  n.replaceChild(left,  new  Node(Token.EMPTY));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  n.replaceChild(left,  new  Node(Token.EMPTY));	  n    =    left.replaceChild(right,    new    Node(Token.EMPTY));    	non-compiled	[CE]  unclosed  string  literal	123	None	replace
580	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  new  Node(Token.EMPTY,  getValue()));  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.replaceChild(left,  new  Node(Token.EMPTY,  getValue()));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.replaceChild(left,  new  Node(Token.EMPTY,  getValue()));	  n    =    left.replaceChild(right,    new    Node(Token.EMPTY));    	non-compiled	[CE]  unclosed  string  literal	123	None	replace
581	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.getLastChild().getString().endsWith( "__ "));  [CE]  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild().getNext()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getFirstChild().getNext()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.getLastChild().getString().endsWith( "__ "));	  return    left.getFirstChild().getNext();    	non-compiled	[CE]  	125	None	replace
582	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.getLastChild().getString().endsWith( "__ "))  [CE]  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getFirstChild().getNext()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.getLastChild().getString().endsWith( "__ "))  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getFirstChild().getNext()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.getLastChild().getString().endsWith( "__ "))	  return    left.getFirstChild().getNext();    	non-compiled	[CE]  	125	None	replace
583	[BUG]  [BUGGY]  n.getParent().removeChild(left,  newNode);  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getParent().removeChild(left,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getParent().removeChild(left,  newNode);	  n.removeChild(left,    newNode);    	non-compiled	[CE]  unclosed  string  literal	90	None	replace
584	[BUG]  [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.getNext().getString().endsWith( "__ "));  [CE]  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.getNext().getString().endsWith( "__ "));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getNext()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.getNext().getString().endsWith( "__ "));	  return    left.getNext();    	non-compiled	[CE]  	13	None	replace
585	[BUG]  [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.getFirstChild().getString().endsWith( "__ "));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.getFirstChild().getString().endsWith( "__ "));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getNext()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.getFirstChild().getString().endsWith( "__ "));	  return    left.getNext();    	non-compiled	[CE]  	13	None	replace
586	[BUG]  [BUGGY]  return  op.getType()  ==  Token.GETELEM  ||  n.getParent().getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  op.getType()  ==  Token.GETELEM  ||  n.getParent().getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  op.getType()  ==  Token.GETELEM  ||  n.getParent().getType()  ==  Token.GETELEM;	  return    op.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	91	None	replace
587	[BUG]  [BUGGY]  n.replaceChild(left,  newNode).removeChild(right);  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.replaceChild(left,  newNode).removeChild(right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.replaceChild(left,  newNode).removeChild(right);	  n.replaceChild(left,    newNode);    	non-compiled	[CE]  unclosed  string  literal	89	None	replace
588	[BUG]  [BUGGY]  return  left.getLastChild();  n.removeChild(left);  [CE]  [FE]    AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getLastChild();  n.removeChild(left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left.getLastChild();    n.removeChild(left);	  	non-compiled	[CE]  	1	None	add
589	[BUG]  [BUGGY]  return  left.getLastChild();  return  left.getLastChild();  [CE]  [FE]      AssertionFailedError    [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getLastChild();  return  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return    left.getLastChild();    return  left.getLastChild();	  	non-compiled	[CE]  	1	None	add
590	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  return  n!=  null?  right  :  n.getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.getFirstChild();  return  n!=  null?  right  :  n.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.getFirstChild();  return  n!=  null?  right  :  n.getFirstChild();	  return    n.getFirstChild();    Node    n    =    left.getFirstChild();    return    n.getFirstChild();    	non-compiled	[CE]  	37	None	replace
591	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  return  n!=  null?  right  :  n.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.getFirstChild();  return  n!=  null?  right  :  n.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.getFirstChild();  return  n!=  null?  right  :  n.getLastChild();	  return    n.getFirstChild();    Node    n    =    left.getFirstChild();    return    n.getFirstChild();    	non-compiled	[CE]  	37	None	replace
592	[BUG]  [BUGGY]  result  =  n.removeFirstChild();  [CE]  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.removeFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.removeFirstChild();	  result    =    n.getFirstChild();    	non-compiled	[CE]  	48	None	replace
593	[BUG]  [BUGGY]  result  =  left.removeFirstChild();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.removeFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.removeFirstChild();	  result    =    n.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	48	None	replace
594	[BUG]  [BUGGY]  return  left.getType()  ==  Token.VAR;  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.VAR;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.VAR;	  return    right;    	non-compiled	[CE]  unclosed  string  literal	12	None	replace
595	[BUG]  [BUGGY]  n  =  right,  left.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  right,  left.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  right,  left.getFirstChild();	  n    =    right.getFirstChild();    	non-compiled	[CE]  	10	None	replace
596	[BUG]  [BUGGY]  return  left.removeFirstChild(),  right);  [CE]  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.removeFirstChild(),  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.removeFirstChild(),  right);	  return    left.removeFirstChild();    	non-compiled	[CE]  	108	None	replace
597	[BUG]  [BUGGY]  Node  rn  =  left.replaceChild(left,  right);  [CE]  unclosed  string  literal  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  rn  =  left.replaceChild(left,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  rn  =  left.replaceChild(left,  right);	  Node    rn    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	33	None	replace
598	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  right.getFirstChild();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  n  =  right.getFirstChild();	  return    n.getFirstChild();    Node    n    =    right.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	35	None	replace
599	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  right.getFirstChild();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  right.getFirstChild();	  return    n.getFirstChild();    Node    n    =    right.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	35	None	replace
600	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  right.getFirstChild();  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  right.getFirstChild();	  return    n.getFirstChild();    Node    n    =    right.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	35	None	replace
601	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  n  =  right.getFirstChild();  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  n  =  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  n  =  right.getFirstChild();	  return    n.getFirstChild();    Node    n    =    right.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	35	None	replace
602	[BUG]  [BUGGY]  n.replaceChild(left,  next);  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.replaceChild(left,  next);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.replaceChild(left,  next);	  n.replaceChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	99	None	replace
603	[BUG]  [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  left.getFirstChild().getString().endsWith( "__ ")||  left.getLastChild().getString().endsWith( "__ "));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  left.getFirstChild().getString().endsWith( "__ ")||  left.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.getType()  ==  Token.GETELEM  &&  left.getFirstChild().getString().endsWith( "__ ")||  left.getLastChild().getString().endsWith( "__ "));	  return    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  	92	None	replace
604	[BUG]  [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  left.getFirstChild().getString().endsWith( "__ ")||  left.getFirstChild().getString().endsWith( "__ "));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  left.getFirstChild().getString().endsWith( "__ ")||  left.getFirstChild().getString().endsWith( "__ "));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.getType()  ==  Token.GETELEM  &&  left.getFirstChild().getString().endsWith( "__ ")||  left.getFirstChild().getString().endsWith( "__ "));	  return    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  	92	None	replace
605	[BUG]  [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  left.getFirstChild().getString().endsWith( "__ ")||  left.getNext().getString().endsWith( "__ "));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  left.getFirstChild().getString().endsWith( "__ ")||  left.getNext().getString().endsWith( "__ "));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.getType()  ==  Token.GETELEM  &&  left.getFirstChild().getString().endsWith( "__ ")||  left.getNext().getString().endsWith( "__ "));	  return    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  	92	None	replace
606	[BUG]  [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  left.getString().endsWith( "__ ")||  left.getString().endsWith( "__ "));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  left.getString().endsWith( "__ ")||  left.getString().endsWith( "__ "));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right.getType()  ==  Token.GETELEM  &&  left.getString().endsWith( "__ ")||  left.getString().endsWith( "__ "));	  return    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  	92	None	replace
607	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  right.getFirstChild();  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  right.getFirstChild();	  return    n.getParent();    Node    n    =    right.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	63	None	replace
608	[BUG]  [BUGGY]  return  left;  node  =  right.getNext();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left;  node  =  right.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left;  node  =  right.getNext();	  return    left;    Node    left    =    right.getNext();    	non-compiled	[CE]  unclosed  string  literal	16	None	replace
609	[BUG]  [BUGGY]  return  left;  Node  left  =  right.getNext()  -  1;  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left;  Node  left  =  right.getNext()  -  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left;  Node  left  =  right.getNext()  -  1;	  return    left;    Node    left    =    right.getNext();    	non-compiled	[CE]  unclosed  string  literal	16	None	replace
610	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext().getNext(),  right.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getFirstChild().getNext().getNext(),  right.getLastChild());  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getFirstChild().getNext().getNext(),  right.getLastChild());	  result    =    left.getFirstChild().getNext().getNext();    	non-compiled	[CE]  	65	None	replace
611	[BUG]  [BUGGY]  result  =  n.getFirstChild().replaceChild(right,  left);  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().replaceChild(right,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().replaceChild(right,  left);	  result    =    n.getFirstChild().replaceChild(left,    left);    	non-compiled	[CE]  unclosed  string  literal	55	None	replace
612	[BUG]  [BUGGY]  result  =  left.getNext().replaceChild(n,  newNode);  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left.getNext().replaceChild(n,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left.getNext().replaceChild(n,  newNode);	  result    =    left.getFirstChild().replaceChild(right,    newNode);    	non-compiled	[CE]  unclosed  string  literal	113	None	replace
613	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNode,  rightLiteral);  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNode,  rightLiteral);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  newNode,  rightLiteral);	  NodeTraversal.traverse(compiler,    left,    newNode);    	non-compiled	[CE]  unclosed  string  literal	100	None	replace
614	[BUG]  [BUGGY]  return  op.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  op.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  op.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    op.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	84	None	replace
615	[BUG]  [BUGGY]  return  left;  node  =  right.getFirstChild();  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left;  node  =  right.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left;  node  =  right.getFirstChild();	  return    left;    Node    left    =    right.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	18	None	replace
616	[BUG]  [BUGGY]  return  n.getFirstChild().getType()!=  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getFirstChild().getType()!=  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getFirstChild().getType()!=  Token.GETELEM;	  return    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	85	None	replace
617	[BUG]  [BUGGY]  return  n.getFirstChild()!=  Token.GETELEM;  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  n.getFirstChild()!=  Token.GETELEM;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  n.getFirstChild()!=  Token.GETELEM;	  return    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  unclosed  string  literal	85	None	replace
618	[BUG]  [BUGGY]  n  =  left.getFirstChild();  return  n.getFirstChild();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getFirstChild();  return  n.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getFirstChild();  return  n.getFirstChild();	  return    n.getFirstChild();    Node    n    =    right.getFirstChild();    return    n.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	95	None	replace
619	[BUG]  [BUGGY]  Node  left  =  right.getNext();  if(left!=  null)return  false;  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  right.getNext();  if(left!=  null)return  false;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  right.getNext();  if(left!=  null)return  false;	  return    left;    Node    left    =    right.getNext();    return    left;    	non-compiled	[CE]  unclosed  string  literal	23	None	replace
620	[BUG]  [BUGGY]  Node  left  =  right.getNext();  if(left!=  null)return  null;  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  right.getNext();  if(left!=  null)return  null;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  right.getNext();  if(left!=  null)return  null;	  return    left;    Node    left    =    right.getNext();    return    left;    	non-compiled	[CE]  unclosed  string  literal	23	None	replace
621	[BUG]  [BUGGY]  Node  left  =  right.getParent();  return  left;  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  right.getParent();  return  left;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  right.getParent();  return  left;	  return    left;    Node    left    =    right.getNext();    return    left;    	non-compiled	[CE]  unclosed  string  literal	23	None	replace
622	[BUG]  [BUGGY]  Node  left  =  right.getNext();  if(left  ==  null)  {  return  left;  }  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  right.getNext();  if(left  ==  null)  {  return  left;  }  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  right.getNext();  if(left  ==  null)  {  return  left;  }	  return    left;    Node    left    =    right.getNext();    return    left;    	non-compiled	[CE]  unclosed  string  literal	23	None	replace
623	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  right.getLastChild());  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.replaceChild(left,  right.getLastChild());  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.replaceChild(left,  right.getLastChild());	  n    =    left.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	9	None	replace
624	[BUG]  [BUGGY]  n  =  left.getNext()  *  1;  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.getNext()  *  1;  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.getNext()  *  1;	  n    =    left.getNext()    +    1;    	non-compiled	[CE]  unclosed  string  literal	80	None	replace
625	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  left.getFirstChild());  Node  n  =  left.getNext();  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  left.getFirstChild());  Node  n  =  left.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getFirstChild()  ==  left.getFirstChild());  Node  n  =  left.getNext();	  return    n.getFirstChild();    Node    n    =    left.getNext();    	non-compiled	[CE]  unclosed  string  literal	38	None	replace
626	[BUG]  [BUGGY]  Node  n  =  left.getNext();  return  n!=  null?  right  :  n.getFirstChild();  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.getNext();  return  n!=  null?  right  :  n.getFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.getNext();  return  n!=  null?  right  :  n.getFirstChild();	  return    n.getFirstChild();    Node    n    =    left.getNext();    return    n.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	94	None	replace
627	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  right).replaceChild(n,  newNode);  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getParent().replaceChild(left,  right).replaceChild(n,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getParent().replaceChild(left,  right).replaceChild(n,  newNode);	  n.getParent().replaceChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	120	None	replace
628	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  right).replaceChild(n,  left);  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.getParent().replaceChild(left,  right).replaceChild(n,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.getParent().replaceChild(left,  right).replaceChild(n,  left);	  n.getParent().replaceChild(left,    right);    	non-compiled	[CE]  unclosed  string  literal	120	None	replace
629	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  reverse);  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  reverse);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  reverse);	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  unclosed  string  literal	118	None	replace
630	[BUG]  [BUGGY]  n.removeFirstChild();  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.removeFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.removeFirstChild();	  return    n.getLastChild();    n.removeLastChild();    	non-compiled	[CE]  unclosed  string  literal	122	None	replace
631	[BUG]  [BUGGY]  return  right;  Node  left  =  left.getLastChild();  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  right;  Node  left  =  left.getLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  right;  Node  left  =  left.getLastChild();	  return    left;    Node    left    =    right.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	20	None	replace
632	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext().replaceChild(left,  right);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().getNext().replaceChild(left,  right);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext().replaceChild(left,  right);	  result    =    n.getFirstChild().getNext().replaceChild(n,    left);    	non-compiled	[CE]  	116	None	replace
633	[BUG]  [BUGGY]  result  =  n.getFirstChild().getParent().replaceChild(n,  left);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().getParent().replaceChild(n,  left);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getParent().replaceChild(n,  left);	  result    =    n.getFirstChild().getNext().replaceChild(n,    left);    	non-compiled	[CE]  	116	None	replace
634	[BUG]  [BUGGY]  result  =  left,  right.getFirstChild().getNext().removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  left,  right.getFirstChild().getNext().removeFirstChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  left,  right.getFirstChild().getNext().removeFirstChild();	  result    =    left,    right.getFirstChild().getNext().getNext();    	non-compiled	[CE]  	96	None	replace
635	[BUG]  [BUGGY]  n  =  n.replaceChild(right,  newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  n.replaceChild(right,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  n.replaceChild(right,  newNode);	  n    =    left.replaceChild(right,    newNode);    	non-compiled	[CE]  	114	None	replace
636	[BUG]  [BUGGY]  Node  n  =  left.replaceChild(right,  new  Node(Token.EMPTY));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  n  =  left.replaceChild(right,  new  Node(Token.EMPTY));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  n  =  left.replaceChild(right,  new  Node(Token.EMPTY));	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  	32	None	replace
637	[BUG]  [BUGGY]  return  left.cloneTree()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.cloneTree();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.cloneTree()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.cloneTree()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.cloneTree();	  return    left.cloneTree();    	non-compiled	[CE]  	14	None	replace
638	[BUG]  [BUGGY]  return  left.cloneTree()  &&  right.cloneTree();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.cloneTree()  &&  right.cloneTree();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.cloneTree()  &&  right.cloneTree();	  return    left.cloneTree();    	non-compiled	[CE]  	14	None	replace
639	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  if(left!=  null)  {  return  left;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Node  left  =  right.getFirstChild();  if(left!=  null)  {  return  left;  }  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Node  left  =  right.getFirstChild();  if(left!=  null)  {  return  left;  }	  return    left;    Node    left    =    right.getFirstChild();    return    left;    	non-compiled	[CE]  	22	None	replace
640	[BUG]  [BUGGY]  n.setLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n.setLastChild();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n.setLastChild();	  return    n.getLastChild();    n.getLastChild();    	non-compiled	[CE]  	75	None	replace
641	[BUG]  [BUGGY]  n  =  left.replaceChild(right,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  n  =  left.replaceChild(right,  n);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	n  =  left.replaceChild(right,  n);	  n    =    left.removeFirstChild();    	non-compiled	[CE]  	110	None	replace
642	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext().replaceChild(n,  newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  result  =  n.getFirstChild().getNext().replaceChild(n,  newNode);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	result  =  n.getFirstChild().getNext().replaceChild(n,  newNode);	  result    =    n.getFirstChild().getNext().removeFirstChild();    	non-compiled	[CE]  	115	None	replace
643	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(),  this);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(),  this);  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(),  this);	  NodeTraversal.traverse(compiler,    right,    new    NodeTraversal());    	non-compiled	[CE]  	29	None	replace
644	[BUG]  [BUGGY]  return  left.getType()  ==  Token.FUNCTION  &&  right.getFirstChild().getString().endsWith( "__ ")||  right.getLastChild().getString().endsWith( "__ "));  [CE]  [FE]          AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.FUNCTION  &&  right.getFirstChild().getString().endsWith( "__ ")||  right.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.FUNCTION  &&  right.getFirstChild().getString().endsWith( "__ ")||  right.getLastChild().getString().endsWith( "__ "));	  return    left.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	109	None	replace
645	[BUG]  [BUGGY]  return  left.getType()  ==  Token.FUNCTION  &&  right.getString().endsWith( "__ ")||  right.getString().endsWith( "__ "));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  return  left.getType()  ==  Token.FUNCTION  &&  right.getString().endsWith( "__ ")||  right.getString().endsWith( "__ "));  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	return  left.getType()  ==  Token.FUNCTION  &&  right.getString().endsWith( "__ ")||  right.getString().endsWith( "__ "));	  return    left.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	109	None	replace
646	[BUG]  [BUGGY]  Preconditions.checkState(n.getParent()  ==  null);  Node  n  =  right.getNext();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getParent()  ==  null);  Node  n  =  right.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getParent()  ==  null);  Node  n  =  right.getNext();	  return    n.getParent();    Node    n    =    right.getNext();    	non-compiled	[CE]  	62	None	replace
647	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  n  =  right.getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  result  =  false;  break;  default:  return  n;//  don't  handle  that  op  }  break;  default:        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  n  =  right.getNext();  [BUGGY]      }  Node  newNode  =  new  Node(result  ?  Token.TRUE  :  Token.FALSE);  n.getParent().replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1061	1061	3	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  n  =  right.getNext();	  return    n.getParent();    Node    n    =    right.getNext();    	non-compiled	[CE]  	62	None	replace
