bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n  =  left.getNext()  +  1;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  n  =  left.getNext()  +  1;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getNext()  +  1;	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	11	None	replace
2	[BUG]  [BUGGY]  n  =  right.getNext();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  n  =  right.getNext();  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  right.getNext();	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	11	None	replace
3	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  n  =  left.getLastChild();  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getLastChild();	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	11	None	replace
4	[BUG]  [BUGGY]  n  =  left.getNext()  ||  right.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  n  =  left.getNext()  ||  right.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getNext()  ||  right.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	11	None	replace
5	[BUG]  [BUGGY]  n  =  left.getParent();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  n  =  left.getParent();  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getParent();	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	11	None	replace
6	[BUG]  [BUGGY]  result  =  rhType!=  lhType;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  rhType!=  lhType;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType!=  lhType;	  result    =    lhType    >>    rhType;    	non-compiled	[CE]  orphaned  case	5	None	replace
7	[BUG]  [BUGGY]  result  =  rhType  ==  lhType;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  rhType  ==  lhType;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  lhType;	  result    =    lhType    >>    rhType;    	non-compiled	[CE]  orphaned  case	5	None	replace
8	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType  ==  rhType  +  1;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  +  1;	  result    =    lhType    >>    rhType;    	non-compiled	[CE]  orphaned  case	5	None	replace
9	[BUG]  [BUGGY]  result  =  rhType  >=  lhType;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  rhType  >=  lhType;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  >=  lhType;	  result    =    lhType    >=    rhType;    	non-compiled	[CE]  orphaned  case	9	None	replace
10	[BUG]  [BUGGY]  result  =  rhType  >>  lhType;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  rhType  >>  lhType;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  >>  lhType;	  result    =    lhType    >=    rhType;    	non-compiled	[CE]  orphaned  case	9	None	replace
11	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType  ==  rhType.restrictByNotNullOrUndefined();  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType.restrictByNotNullOrUndefined();	  result    =    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	1	None	replace
12	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||  lhType  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType  ==  rhType  ||  lhType  ==  Token.FUNCTION;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  ||  lhType  ==  Token.FUNCTION;	  result    =    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	1	None	replace
13	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||  lhType  ==  Token.FALSE;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType  ==  rhType  ||  lhType  ==  Token.FALSE;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  ||  lhType  ==  Token.FALSE;	  result    =    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	1	None	replace
14	[BUG]  [BUGGY]  if(rhType  ==  null)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(rhType  ==  null)  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType  ==  null)  {  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
15	[BUG]  [BUGGY]  if(rhType  ==  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(rhType  ==  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType  ==  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  break;  }	  if(compareResult    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	13	None	replace
16	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(rhType  ==  Token.FALSE)  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType  ==  Token.FALSE)  {  break;  }	  if(compareResult    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	13	None	replace
17	[BUG]  [BUGGY]  if(lhType  ==  result)  {  break;  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(lhType  ==  result)  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType  ==  result)  {  break;  }	  if(result    ==    lhType)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
18	[BUG]  [BUGGY]  if(result  ==  rhType)  {  break;  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(result  ==  rhType)  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  rhType)  {  break;  }	  if(result    ==    lhType)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
19	[BUG]  [BUGGY]  rhType  =  lhType!=  rhType;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  rhType  =  lhType!=  rhType;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType!=  rhType;	  rhType    =    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	6	None	replace
20	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType  +  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  rhType  =  lhType  ==  rhType  +  1;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType  +  1;	  rhType    =    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	6	None	replace
21	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  rhType  =  lhType  ==  rhType.restrictByNotNullOrUndefined();  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType.restrictByNotNullOrUndefined();	  rhType    =    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	6	None	replace
22	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType.cloneTree();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  rhType  =  lhType  ==  rhType.cloneTree();  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType.cloneTree();	  rhType    =    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	6	None	replace
23	[BUG]  [BUGGY]  rhType  =  lhType  >=  rhType;  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  rhType  =  lhType  >=  rhType;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  >=  rhType;	  rhType    =    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	6	None	replace
24	[BUG]  [BUGGY]  result  =  rhType  ==  lhType;  break;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  rhType  ==  lhType;  break;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  lhType;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
25	[BUG]  [BUGGY]  result  =  lhType!=  rhType;  break;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType!=  rhType;  break;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
26	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.restrictByNotNullOrUndefined();  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType  ==  rhType.restrictByNotNullOrUndefined();  break;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType.restrictByNotNullOrUndefined();  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
27	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  1;  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType  ==  rhType  +  1;  break;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  +  1;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
28	[BUG]  [BUGGY]  result  =  lhType  ==  Token.EQ;  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType  ==  Token.EQ;  break;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  Token.EQ;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
29	[BUG]  [BUGGY]  result  =  lhType  ==  n;  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType  ==  n;  break;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  n;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
30	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  n  =  right.getFirstChild();  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  right.getFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
31	[BUG]  [BUGGY]  n  =  right.getLastChild();  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  n  =  right.getLastChild();  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  right.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
32	[BUG]  [BUGGY]  n  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  n  =  left.removeFirstChild();  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.removeFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
33	[BUG]  [BUGGY]  result  =  lhType  >>  rhType;  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType  >>  rhType;  break;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  >>  rhType;  break;	      	non-compiled	[CE]  orphaned  case	7	None	replace
34	[BUG]  [BUGGY]  result  =  lhType  >=  rhType;  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType  >=  rhType;  break;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  >=  rhType;  break;	      	non-compiled	[CE]  orphaned  case	7	None	replace
35	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType;  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  rhType  =  lhType  ==  rhType;  break;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType;  break;	      	non-compiled	[CE]  orphaned  case	7	None	replace
36	[BUG]  [BUGGY]  return  lhType  ==  rhType;  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  return  lhType  ==  rhType;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  lhType  ==  rhType;	      	non-compiled	[CE]  orphaned  case	7	None	replace
37	[BUG]  [BUGGY]  if(rhType!=  null)  {  break;  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(rhType!=  null)  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType!=  null)  {  break;  }	  if(result!=    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	8	None	replace
38	[BUG]  [BUGGY]  n  =  left!=  null?  left.getNext()  :  right.getNext();  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  n  =  left!=  null?  left.getNext()  :  right.getNext();  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left!=  null?  left.getNext()  :  right.getNext();	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	11	None	replace
39	[BUG]  [BUGGY]  n  =  left!=  null?  left.getFirstChild()  :  left.getNext();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  n  =  left!=  null?  left.getFirstChild()  :  left.getNext();  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left!=  null?  left.getFirstChild()  :  left.getNext();	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	11	None	replace
40	[BUG]  [BUGGY]  if(result  ==  null)  {  return  result;  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(result  ==  null)  {  return  result;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null)  {  return  result;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
41	[BUG]  [BUGGY]  if(compareResult!=  null)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(compareResult!=  null)  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(compareResult!=  null)  {  break;  }	  if(compareResult    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	13	None	replace
42	[BUG]  [BUGGY]  if(lhType!=  null)  {  break;  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(lhType!=  null)  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType!=  null)  {  break;  }	  if(result!=    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	8	None	replace
43	[BUG]  [BUGGY]  n  =  left!=  null?  left.getLastChild()  :  left.getLastChild();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  n  =  left!=  null?  left.getLastChild()  :  left.getLastChild();  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left!=  null?  left.getLastChild()  :  left.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
44	[BUG]  [BUGGY]  n  =  left!=  null?  left.getFirstChild()  :  left.getLastChild();  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  n  =  left!=  null?  left.getFirstChild()  :  left.getLastChild();  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left!=  null?  left.getFirstChild()  :  left.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
45	[BUG]  [BUGGY]  n  =  left!=  null?  left.getLastChild()  :  right.getLastChild();  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  n  =  left!=  null?  left.getLastChild()  :  right.getLastChild();  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left!=  null?  left.getLastChild()  :  right.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
46	[BUG]  [BUGGY]  result  =  lhType!=  rhType  +  1;  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType!=  rhType  +  1;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType  +  1;	  result    =    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	1	None	replace
47	[BUG]  [BUGGY]  result  =  op  ==  rhType;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  op  ==  rhType;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  op  ==  rhType;	  result    =    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	1	None	replace
48	[BUG]  [BUGGY]  result  =  op!=  rhType;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  op!=  rhType;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  op!=  rhType;	  result    =    lhType!=    rhType;    	non-compiled	[CE]  orphaned  case	2	None	replace
49	[BUG]  [BUGGY]  if(rhType  ==  lhType)  {  break;  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(rhType  ==  lhType)  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType  ==  lhType)  {  break;  }	  if(result    ==    lhType)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
50	[BUG]  [BUGGY]  if(op  ==  lhType)  {  break;  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(op  ==  lhType)  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(op  ==  lhType)  {  break;  }	  if(result    ==    lhType)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
51	[BUG]  [BUGGY]  rhType  =  lhType  >>  rhType;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  rhType  =  lhType  >>  rhType;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  >>  rhType;	  rhType    =    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	6	None	replace
52	[BUG]  [BUGGY]  result  =  lhType!=  rhType  +  1;  break;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType!=  rhType  +  1;  break;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType  +  1;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
53	[BUG]  [BUGGY]  if(compareResult  ==  lhType)  {  break;  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(compareResult  ==  lhType)  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(compareResult  ==  lhType)  {  break;  }	  if(result    ==    lhType)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
54	[BUG]  [BUGGY]  if(result!=  lhType)  {  break;  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(result!=  lhType)  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  lhType)  {  break;  }	  if(result    ==    lhType)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
55	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lhType  ==  rhType;  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  case  Token.CALL:  result  =  lhType  ==  rhType;  break;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	case  Token.CALL:  result  =  lhType  ==  rhType;  break;	      	non-compiled	[CE]  orphaned  case	7	None	replace
56	[BUG]  [BUGGY]  return  n.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  return  n.getFirstChild().getNext();  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  n.getFirstChild().getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
57	[BUG]  [BUGGY]  n  =  left.getFirstChild();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  n  =  left.getFirstChild();  break;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getFirstChild();  break;	      	non-compiled	[CE]  orphaned  case	7	None	replace
58	[BUG]  [BUGGY]  n  =  left.getNext();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  n  =  left.getNext();  break;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getNext();  break;	      	non-compiled	[CE]  orphaned  case	7	None	replace
59	[BUG]  [BUGGY]  if(result!=  null  &&!result.isEmpty())  {  break;  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(result!=  null  &&!result.isEmpty())  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  null  &&!result.isEmpty())  {  break;  }	  if(result!=    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	8	None	replace
60	[BUG]  [BUGGY]  if(result!=  null  &&  rhType!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(result!=  null  &&  rhType!=  Token.FUNCTION)  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  null  &&  rhType!=  Token.FUNCTION)  {  break;  }	  if(result!=    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	8	None	replace
61	[BUG]  [BUGGY]  if(result!=  null  &&  rhType!=  Token.NULL)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(result!=  null  &&  rhType!=  Token.NULL)  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  null  &&  rhType!=  Token.NULL)  {  break;  }	  if(result!=    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	8	None	replace
62	[BUG]  [BUGGY]  if(result!=  null  &&  rhType!=  Token.FALSE)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(result!=  null  &&  rhType!=  Token.FALSE)  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  null  &&  rhType!=  Token.FALSE)  {  break;  }	  if(result!=    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	8	None	replace
63	[BUG]  [BUGGY]  result  =  lhType!=  Token.EQ;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType!=  Token.EQ;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  Token.EQ;	  result    =    lhType    >>    rhType;    	non-compiled	[CE]  orphaned  case	5	None	replace
64	[BUG]  [BUGGY]  result  =  lhType!=  rhType.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType!=  rhType.restrictByNotNullOrUndefined();  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType.restrictByNotNullOrUndefined();	  result    =    lhType    >=    rhType;    	non-compiled	[CE]  orphaned  case	9	None	replace
65	[BUG]  [BUGGY]  result  =  lhType!=  rhType.restrictByNotNullOrUndefined;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType!=  rhType.restrictByNotNullOrUndefined;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType.restrictByNotNullOrUndefined;	  result    =    lhType    >=    rhType;    	non-compiled	[CE]  orphaned  case	9	None	replace
66	[BUG]  [BUGGY]  n  =  left.replaceChild(right,  newNode);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  n  =  left.replaceChild(right,  newNode);  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.replaceChild(right,  newNode);	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
67	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNode);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  n  =  left.replaceChild(left,  newNode);  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.replaceChild(left,  newNode);	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
68	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!result.booleanValue();  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType  ==  rhType  &&!result.booleanValue();  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  &&!result.booleanValue();	  result    =    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	1	None	replace
69	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!node.hasChildren();  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType  ==  rhType  &&!node.hasChildren();  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  &&!node.hasChildren();	  result    =    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	1	None	replace
70	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!result.isEmpty();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType  ==  rhType  &&!result.isEmpty();  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  &&!result.isEmpty();	  result    =    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	1	None	replace
71	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!isFunctionDeclaration(n);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType  ==  rhType  &&!isFunctionDeclaration(n);  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  &&!isFunctionDeclaration(n);	  result    =    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	1	None	replace
72	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.toString();  break;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType  ==  rhType.toString();  break;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType.toString();  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
73	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getName();  break;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  result  =  lhType  ==  rhType.getName();  break;  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType.getName();  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
74	[BUG]  [BUGGY]  if(compareResult  ==  null  ||  compareResult.equals(left))  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(compareResult  ==  null  ||  compareResult.equals(left))  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(compareResult  ==  null  ||  compareResult.equals(left))  {  break;  }	  if(compareResult    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	13	None	replace
75	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isEmpty())  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(result  ==  null  ||!result.isEmpty())  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||!result.isEmpty())  {  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
76	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isUndefined())  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(result  ==  null  ||!result.isUndefined())  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||!result.isUndefined())  {  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
77	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isUnknownType())  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(result  ==  null  ||!result.isUnknownType())  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||!result.isUnknownType())  {  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
78	[BUG]  [BUGGY]  if(result  ==  null  ||  result.equals(rhType))  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  if(result  ==  null  ||  result.equals(rhType))  {  break;  }  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||  result.equals(rhType))  {  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
79	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType.toString();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;    [BUGGY]  rhType  =  lhType  ==  rhType.toString();  [BUGGY]      case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType.toString();	  rhType    =    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	6	None	replace
