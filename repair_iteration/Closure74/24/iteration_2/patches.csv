bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  rhType!=  lhType  +  1;  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType!=  lhType  +  1;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType!=  lhType  +  1;  break;	  result    =    lhType!=    rhType    +    1;    break;    	non-compiled	[CE]  orphaned  case	52	None	replace
2	[BUG]  [BUGGY]  result  =  lhType  >>  rhType  +  1;  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  >>  rhType  +  1;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  >>  rhType  +  1;  break;	  result    =    lhType!=    rhType    +    1;    break;    	non-compiled	[CE]  orphaned  case	52	None	replace
3	[BUG]  [BUGGY]  result  =  lhType  >=  rhType  +  1;  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  >=  rhType  +  1;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  >=  rhType  +  1;  break;	  result    =    lhType!=    rhType    +    1;    break;    	non-compiled	[CE]  orphaned  case	52	None	replace
4	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  2;  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType  +  2;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  +  2;  break;	  result    =    lhType!=    rhType    +    1;    break;    	non-compiled	[CE]  orphaned  case	52	None	replace
5	[BUG]  [BUGGY]  if(lhType  ==  null)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType  ==  null)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType  ==  null)  {  break;  }	  if(rhType!=    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
6	[BUG]  [BUGGY]  if(lhType  ==  rhType)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType  ==  rhType)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType  ==  rhType)  {  break;  }	  if(rhType!=    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
7	[BUG]  [BUGGY]  if(result!=  null  ||!result.isEmpty())  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result!=  null  ||!result.isEmpty())  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  null  ||!result.isEmpty())  {  break;  }	  if(result!=    null    &&!result.isEmpty())    {    break;    }    	non-compiled	[CE]  orphaned  case	59	None	replace
8	[BUG]  [BUGGY]  if(result  ==  null  &&!result.isEmpty())  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  &&!result.isEmpty())  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  &&!result.isEmpty())  {  break;  }	  if(result!=    null    &&!result.isEmpty())    {    break;    }    	non-compiled	[CE]  orphaned  case	59	None	replace
9	[BUG]  [BUGGY]  n  =  left.getNext()  &&  right.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.getNext()  &&  right.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getNext()  &&  right.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;	  n    =    left.getNext()    ||    right.getType()    ==    Token.NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  orphaned  case	4	None	replace
10	[BUG]  [BUGGY]  n  =  left.getFirstChild()  ||  right.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.getFirstChild()  ||  right.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getFirstChild()  ||  right.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;	  n    =    left.getNext()    ||    right.getType()    ==    Token.NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  orphaned  case	4	None	replace
11	[BUG]  [BUGGY]  n  =  left.getNext()  ||  right.getType()!=  Token.NEGATING_A_NON_NUMBER_ERROR;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.getNext()  ||  right.getType()!=  Token.NEGATING_A_NON_NUMBER_ERROR;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getNext()  ||  right.getType()!=  Token.NEGATING_A_NON_NUMBER_ERROR;	  n    =    left.getNext()    ||    right.getType()    ==    Token.NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  orphaned  case	4	None	replace
12	[BUG]  [BUGGY]  n  =  right.getNext()  ||  left.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  right.getNext()  ||  left.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  right.getNext()  ||  left.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;	  n    =    left.getNext()    ||    right.getType()    ==    Token.NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  orphaned  case	4	None	replace
13	[BUG]  [BUGGY]  n  =  left.getNext()  &&  right.getType()!=  Token.NEGATING_A_NON_NUMBER_ERROR;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.getNext()  &&  right.getType()!=  Token.NEGATING_A_NON_NUMBER_ERROR;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getNext()  &&  right.getType()!=  Token.NEGATING_A_NON_NUMBER_ERROR;	  n    =    left.getNext()    ||    right.getType()    ==    Token.NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  orphaned  case	4	None	replace
14	[BUG]  [BUGGY]  n  =  left.getParent()  ||  right.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.getParent()  ||  right.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getParent()  ||  right.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;	  n    =    left.getNext()    ||    right.getType()    ==    Token.NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  orphaned  case	4	None	replace
15	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.replaceChild(left,  right);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.replaceChild(left,  right);	  n    =    left.replaceChild(left,    newNode);    	non-compiled	[CE]  orphaned  case	67	None	replace
16	[BUG]  [BUGGY]  n  =  right.replaceChild(left,  newNode);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  right.replaceChild(left,  newNode);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  right.replaceChild(left,  newNode);	  n    =    left.replaceChild(left,    newNode);    	non-compiled	[CE]  orphaned  case	67	None	replace
17	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNode,  result);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.replaceChild(left,  newNode,  result);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.replaceChild(left,  newNode,  result);	  n    =    left.replaceChild(left,    newNode);    	non-compiled	[CE]  orphaned  case	67	None	replace
18	[BUG]  [BUGGY]  n  =  left.replaceChild(n,  newNode);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.replaceChild(n,  newNode);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.replaceChild(n,  newNode);	  n    =    left.replaceChild(left,    newNode);    	non-compiled	[CE]  orphaned  case	67	None	replace
19	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNode,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.replaceChild(left,  newNode,  right);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.replaceChild(left,  newNode,  right);	  n    =    left.replaceChild(left,    newNode);    	non-compiled	[CE]  orphaned  case	67	None	replace
20	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||!isFunctionDeclaration(n);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType  ||!isFunctionDeclaration(n);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  ||!isFunctionDeclaration(n);	  result    =    lhType    ==    rhType    &&!isFunctionDeclaration(n);    	non-compiled	[CE]  orphaned  case	71	None	replace
21	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  &&!isFunctionDeclaration(n);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  ==  lhType  &&!isFunctionDeclaration(n);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  lhType  &&!isFunctionDeclaration(n);	  result    =    lhType    ==    rhType    &&!isFunctionDeclaration(n);    	non-compiled	[CE]  orphaned  case	71	None	replace
22	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!isFunctionDeclaration(right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType  &&!isFunctionDeclaration(right);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  &&!isFunctionDeclaration(right);	  result    =    lhType    ==    rhType    &&!isFunctionDeclaration(n);    	non-compiled	[CE]  orphaned  case	71	None	replace
23	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||!result.isEmpty();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType  ||!result.isEmpty();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  ||!result.isEmpty();	  result    =    lhType    ==    rhType    &&!result.isEmpty();    	non-compiled	[CE]  orphaned  case	70	None	replace
24	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  &&!result.isEmpty();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  ==  lhType  &&!result.isEmpty();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  lhType  &&!result.isEmpty();	  result    =    lhType    ==    rhType    &&!result.isEmpty();    	non-compiled	[CE]  orphaned  case	70	None	replace
25	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!result.isNullOrEmpty();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType  &&!result.isNullOrEmpty();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  &&!result.isNullOrEmpty();	  result    =    lhType    ==    rhType    &&!result.isEmpty();    	non-compiled	[CE]  orphaned  case	70	None	replace
26	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  2;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType  +  2;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  +  2;	  result    =    lhType!=    rhType    +    1;    	non-compiled	[CE]  orphaned  case	46	None	replace
27	[BUG]  [BUGGY]  result  =  rhType!=  lhType  +  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType!=  lhType  +  1;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType!=  lhType  +  1;	  result    =    lhType!=    rhType    +    1;    	non-compiled	[CE]  orphaned  case	46	None	replace
28	[BUG]  [BUGGY]  result  =  lhType  >>  rhType  +  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  >>  rhType  +  1;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  >>  rhType  +  1;	  result    =    lhType!=    rhType    +    1;    	non-compiled	[CE]  orphaned  case	46	None	replace
29	[BUG]  [BUGGY]  result  =  lhType  >=  rhType  +  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  >=  rhType  +  1;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  >=  rhType  +  1;	  result    =    lhType!=    rhType    +    1;    	non-compiled	[CE]  orphaned  case	46	None	replace
30	[BUG]  [BUGGY]  result  =  lhType!=  rhType  +  2;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  rhType  +  2;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType  +  2;	  result    =    lhType!=    rhType    +    1;    	non-compiled	[CE]  orphaned  case	46	None	replace
31	[BUG]  [BUGGY]  if(lhType  ==  Token.FALSE)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType  ==  Token.FALSE)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType  ==  Token.FALSE)  {  break;  }	  if(rhType    ==    Token.FALSE)    {    break;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
32	[BUG]  [BUGGY]  if(op  ==  Token.FALSE)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(op  ==  Token.FALSE)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(op  ==  Token.FALSE)  {  break;  }	  if(rhType    ==    Token.FALSE)    {    break;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
33	[BUG]  [BUGGY]  if(result  ==  Token.FALSE)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  Token.FALSE)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  Token.FALSE)  {  break;  }	  if(rhType    ==    Token.FALSE)    {    break;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
34	[BUG]  [BUGGY]  if(lhType!=  Token.FALSE)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType!=  Token.FALSE)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType!=  Token.FALSE)  {  break;  }	  if(rhType    ==    Token.FALSE)    {    break;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
35	[BUG]  [BUGGY]  if(lhType  ==  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType  ==  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType  ==  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {  break;  }	  if(rhType    ==    Token.FALSE)    {    break;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
36	[BUG]  [BUGGY]  if(lhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  break;  }	  if(rhType    ==    Token.FALSE)    {    break;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
37	[BUG]  [BUGGY]  if(lhType  ==  Token.FALSE  ||  rhType  ==  Token.UNKNOWN)  {  break;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType  ==  Token.FALSE  ||  rhType  ==  Token.UNKNOWN)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType  ==  Token.FALSE  ||  rhType  ==  Token.UNKNOWN)  {  break;  }	  if(rhType    ==    Token.FALSE)    {    break;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
38	[BUG]  [BUGGY]  if(lhType!=  rhType)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType!=  rhType)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType!=  rhType)  {  break;  }	  if(lhType    ==    result)    {    break;    }    	non-compiled	[CE]  orphaned  case	17	None	replace
39	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType!=  Token.FALSE)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType!=  Token.FALSE)  {  break;  }	  if(compareResult!=    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	41	None	replace
40	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||!result.booleanValue();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType  ||!result.booleanValue();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  ||!result.booleanValue();	  result    =    lhType    ==    rhType    &&!result.booleanValue();    	non-compiled	[CE]  orphaned  case	68	None	replace
41	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  &&!result.booleanValue();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  ==  lhType  &&!result.booleanValue();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  lhType  &&!result.booleanValue();	  result    =    lhType    ==    rhType    &&!result.booleanValue();    	non-compiled	[CE]  orphaned  case	68	None	replace
42	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!result.booleanValue();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  rhType  &&!result.booleanValue();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType  &&!result.booleanValue();	  result    =    lhType    ==    rhType    &&!result.booleanValue();    	non-compiled	[CE]  orphaned  case	68	None	replace
43	[BUG]  [BUGGY]  n  =  right.removeFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  right.removeFirstChild();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  right.removeFirstChild();	  n    =    left.removeFirstChild();    	non-compiled	[CE]  orphaned  case	32	None	replace
44	[BUG]  [BUGGY]  n  =  left.removeLastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.removeLastChild();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.removeLastChild();	  n    =    left.removeFirstChild();    	non-compiled	[CE]  orphaned  case	32	None	replace
45	[BUG]  [BUGGY]  result  =  rhType!=  Token.EQ;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType!=  Token.EQ;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType!=  Token.EQ;	  result    =    lhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	63	None	replace
46	[BUG]  [BUGGY]  result  =  rhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  ==  Token.EQ;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  Token.EQ;	  result    =    lhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	63	None	replace
47	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&  lhType  ==  Token.FALSE;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType  &&  lhType  ==  Token.FALSE;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  &&  lhType  ==  Token.FALSE;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FALSE;    	non-compiled	[CE]  orphaned  case	13	None	replace
48	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  ||  lhType  ==  Token.FALSE;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  ==  lhType  ||  lhType  ==  Token.FALSE;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  lhType  ||  lhType  ==  Token.FALSE;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FALSE;    	non-compiled	[CE]  orphaned  case	13	None	replace
49	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||  lhType  ==  Token.FIELD;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType  ||  lhType  ==  Token.FIELD;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  ||  lhType  ==  Token.FIELD;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FALSE;    	non-compiled	[CE]  orphaned  case	13	None	replace
50	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||  lhType!=  Token.FALSE;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType  ||  lhType!=  Token.FALSE;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  ||  lhType!=  Token.FALSE;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FALSE;    	non-compiled	[CE]  orphaned  case	13	None	replace
51	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  +  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  ==  lhType  +  1;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  lhType  +  1;	  result    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  orphaned  case	8	None	replace
52	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  3;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType  +  3;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  +  3;	  result    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  orphaned  case	8	None	replace
53	[BUG]  [BUGGY]  rhType  =  lhType!=  rhType.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType!=  rhType.restrictByNotNullOrUndefined();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType!=  rhType.restrictByNotNullOrUndefined();	  rhType    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	21	None	replace
54	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType.restrictByNotEmpty();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType.restrictByNotEmpty();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType.restrictByNotEmpty();	  rhType    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	21	None	replace
55	[BUG]  [BUGGY]  rhType  =  result  ==  rhType.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  result  ==  rhType.restrictByNotNullOrUndefined();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  result  ==  rhType.restrictByNotNullOrUndefined();	  rhType    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	21	None	replace
56	[BUG]  [BUGGY]  rhType  =  result  ==  lhType.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  result  ==  lhType.restrictByNotNullOrUndefined();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  result  ==  lhType.restrictByNotNullOrUndefined();	  rhType    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	21	None	replace
57	[BUG]  [BUGGY]  case  Token.CALL:  result  =  rhType  ==  lhType;  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  case  Token.CALL:  result  =  rhType  ==  lhType;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	case  Token.CALL:  result  =  rhType  ==  lhType;  break;	  case    Token.CALL:    result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	55	None	replace
58	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lhType!=  rhType;  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  case  Token.CALL:  result  =  lhType!=  rhType;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	case  Token.CALL:  result  =  lhType!=  rhType;  break;	  case    Token.CALL:    result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	55	None	replace
59	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lhType  ==  Token.CALL;  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  case  Token.CALL:  result  =  lhType  ==  Token.CALL;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	case  Token.CALL:  result  =  lhType  ==  Token.CALL;  break;	  case    Token.CALL:    result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	55	None	replace
60	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lhType  >=  rhType;  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  case  Token.CALL:  result  =  lhType  >=  rhType;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	case  Token.CALL:  result  =  lhType  >=  rhType;  break;	  case    Token.CALL:    result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	55	None	replace
61	[BUG]  [BUGGY]  rhType  =  lhType!=  rhType.toString();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType!=  rhType.toString();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType!=  rhType.toString();	  rhType    =    lhType    ==    rhType.toString();    	non-compiled	[CE]  orphaned  case	79	None	replace
62	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType.trim();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType.trim();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType.trim();	  rhType    =    lhType    ==    rhType.toString();    	non-compiled	[CE]  orphaned  case	79	None	replace
63	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.toString();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType.toString();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType.toString();	  rhType    =    lhType    ==    rhType.toString();    	non-compiled	[CE]  orphaned  case	79	None	replace
64	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType.getRawClass();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType.getRawClass();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType.getRawClass();	  rhType    =    lhType    ==    rhType.toString();    	non-compiled	[CE]  orphaned  case	79	None	replace
65	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  +  1;  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  ==  lhType  +  1;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  lhType  +  1;  break;	  result    =    lhType    ==    rhType    +    1;    break;    	non-compiled	[CE]  orphaned  case	27	None	replace
66	[BUG]  [BUGGY]  result  =  rhType  ==  rhType;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  ==  rhType;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  rhType;	  result    =    rhType    >=    lhType;    	non-compiled	[CE]  orphaned  case	9	None	replace
67	[BUG]  [BUGGY]  result  =  rhType!=  rhType;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType!=  rhType;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType!=  rhType;	  result    =    rhType    >=    lhType;    	non-compiled	[CE]  orphaned  case	9	None	replace
68	[BUG]  [BUGGY]  if(lhType  ==  null  ||  rhType  ==  null)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType  ==  null  ||  rhType  ==  null)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType  ==  null  ||  rhType  ==  null)  {  break;  }	  if(rhType    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	14	None	replace
69	[BUG]  [BUGGY]  if(lhType  ==  null  ||  rhType!=  null)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType  ==  null  ||  rhType!=  null)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType  ==  null  ||  rhType!=  null)  {  break;  }	  if(rhType    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	14	None	replace
70	[BUG]  [BUGGY]  if(op  ==  rhType)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(op  ==  rhType)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(op  ==  rhType)  {  break;  }	  if(op    ==    lhType)    {    break;    }    	non-compiled	[CE]  orphaned  case	50	None	replace
71	[BUG]  [BUGGY]  if(lhType  ==  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType  ==  Token.FUNCTION)  {  break;  }	  if(op    ==    lhType)    {    break;    }    	non-compiled	[CE]  orphaned  case	50	None	replace
72	[BUG]  [BUGGY]  result  =  rhType!=  lhType;  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType!=  lhType;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType!=  lhType;  break;	  result    =    lhType    >=    rhType;    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
73	[BUG]  [BUGGY]  result  =  rhType  >=  lhType;  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  >=  lhType;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  >=  lhType;  break;	  result    =    lhType    >=    rhType;    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
74	[BUG]  [BUGGY]  if(rhType!=  null  &&  result!=  Token.FALSE)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType!=  null  &&  result!=  Token.FALSE)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType!=  null  &&  result!=  Token.FALSE)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.FALSE)    {    break;    }    	non-compiled	[CE]  orphaned  case	62	None	replace
75	[BUG]  [BUGGY]  if(result  ==  null  &&  rhType!=  Token.FALSE)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  &&  rhType!=  Token.FALSE)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  &&  rhType!=  Token.FALSE)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.FALSE)    {    break;    }    	non-compiled	[CE]  orphaned  case	62	None	replace
76	[BUG]  [BUGGY]  if(lhType!=  null  &&  rhType!=  Token.FALSE)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType!=  null  &&  rhType!=  Token.FALSE)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType!=  null  &&  rhType!=  Token.FALSE)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.FALSE)    {    break;    }    	non-compiled	[CE]  orphaned  case	62	None	replace
77	[BUG]  [BUGGY]  if(result  ==  null  &&  lhType!=  Token.FALSE)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  &&  lhType!=  Token.FALSE)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  &&  lhType!=  Token.FALSE)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.FALSE)    {    break;    }    	non-compiled	[CE]  orphaned  case	62	None	replace
78	[BUG]  [BUGGY]  n  =  left.getFirstChild().getNext()  +  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.getFirstChild().getNext()  +  1;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getFirstChild().getNext()  +  1;	  n    =    left.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	1	None	replace
79	[BUG]  [BUGGY]  n  =  left.getParent()  +  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.getParent()  +  1;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getParent()  +  1;	  n    =    left.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	1	None	replace
80	[BUG]  [BUGGY]  n  =  left.getFirstChild()  +  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.getFirstChild()  +  1;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getFirstChild()  +  1;	  n    =    left.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	1	None	replace
81	[BUG]  [BUGGY]  n  =  right.getNext()  +  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  right.getNext()  +  1;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  right.getNext()  +  1;	  n    =    left.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	1	None	replace
82	[BUG]  [BUGGY]  result  =  rhType!=  op;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType!=  op;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType!=  op;	  result    =    op!=    rhType;    	non-compiled	[CE]  orphaned  case	48	None	replace
83	[BUG]  [BUGGY]  n  =  left!=  null?  left.getFirstChild()  :  right.getLastChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left!=  null?  left.getFirstChild()  :  right.getLastChild();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left!=  null?  left.getFirstChild()  :  right.getLastChild();	  n    =    left!=    null?    left.getLastChild()    :    right.getLastChild();    	non-compiled	[CE]  orphaned  case	45	None	replace
84	[BUG]  [BUGGY]  n  =  left!=  null?  right.getLastChild()  :  left.getLastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left!=  null?  right.getLastChild()  :  left.getLastChild();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left!=  null?  right.getLastChild()  :  left.getLastChild();	  n    =    left!=    null?    left.getLastChild()    :    right.getLastChild();    	non-compiled	[CE]  orphaned  case	45	None	replace
85	[BUG]  [BUGGY]  n  =  left  ==  null?  left.getFirstChild()  :  right.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left  ==  null?  left.getFirstChild()  :  right.getLastChild();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left  ==  null?  left.getFirstChild()  :  right.getLastChild();	  n    =    left!=    null?    left.getLastChild()    :    right.getLastChild();    	non-compiled	[CE]  orphaned  case	45	None	replace
86	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType.clone();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType.clone();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType.clone();	  rhType    =    lhType    ==    rhType.cloneTree();    	non-compiled	[CE]  orphaned  case	22	None	replace
87	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType.cloneChildren();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType.cloneChildren();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType.cloneChildren();	  rhType    =    lhType    ==    rhType.cloneTree();    	non-compiled	[CE]  orphaned  case	22	None	replace
88	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType.cloneChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType.cloneChild();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType.cloneChild();	  rhType    =    lhType    ==    rhType.cloneTree();    	non-compiled	[CE]  orphaned  case	22	None	replace
89	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType.clonePath();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType.clonePath();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType.clonePath();	  rhType    =    lhType    ==    rhType.cloneTree();    	non-compiled	[CE]  orphaned  case	22	None	replace
90	[BUG]  [BUGGY]  result  =  lhType  ==  n;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  n;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  n;	  result    =    rhType    >>    lhType;    	non-compiled	[CE]  orphaned  case	10	None	replace
91	[BUG]  [BUGGY]  result  =  lhType!=  rhType.restrictByNotNullOrUndefined();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  rhType.restrictByNotNullOrUndefined();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType.restrictByNotNullOrUndefined();  break;	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    break;    	non-compiled	[CE]  orphaned  case	26	None	replace
92	[BUG]  [BUGGY]  result  =  rhType  ==  lhType.restrictByNotNullOrUndefined();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  ==  lhType.restrictByNotNullOrUndefined();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  lhType.restrictByNotNullOrUndefined();  break;	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    break;    	non-compiled	[CE]  orphaned  case	26	None	replace
93	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.restrictByNonNullOrUndefined();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType.restrictByNonNullOrUndefined();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType.restrictByNonNullOrUndefined();  break;	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    break;    	non-compiled	[CE]  orphaned  case	26	None	replace
94	[BUG]  [BUGGY]  result  =  rhType!=  lhType.restrictByNotNullOrUndefined();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType!=  lhType.restrictByNotNullOrUndefined();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType!=  lhType.restrictByNotNullOrUndefined();  break;	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    break;    	non-compiled	[CE]  orphaned  case	26	None	replace
95	[BUG]  [BUGGY]  result  =  rhType  ==  op;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  ==  op;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  op;	  result    =    op    ==    rhType;    	non-compiled	[CE]  orphaned  case	47	None	replace
96	[BUG]  [BUGGY]  n  =  left.getLastChild();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.getLastChild();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getLastChild();  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	57	None	replace
97	[BUG]  [BUGGY]  n  =  right.getFirstChild();  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  right.getFirstChild();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  right.getFirstChild();  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	57	None	replace
98	[BUG]  [BUGGY]  n  =  right.getLastChild();  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  right.getLastChild();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  right.getLastChild();  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	57	None	replace
99	[BUG]  [BUGGY]  n  =  left.removeFirstChild();  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.removeFirstChild();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.removeFirstChild();  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	57	None	replace
100	[BUG]  [BUGGY]  n  =  right.getParent();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  right.getParent();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  right.getParent();	  n    =    right.getNext();    	non-compiled	[CE]  orphaned  case	2	None	replace
101	[BUG]  [BUGGY]  return  rhType  ==  lhType;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  rhType  ==  lhType;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  rhType  ==  lhType;	  return    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	36	None	replace
102	[BUG]  [BUGGY]  return  result  ==  rhType;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  result  ==  rhType;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  result  ==  rhType;	  return    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	36	None	replace
103	[BUG]  [BUGGY]  return  result  ==  lhType;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  result  ==  lhType;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  result  ==  lhType;	  return    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	36	None	replace
104	[BUG]  [BUGGY]  return  n  ==  lhType;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  n  ==  lhType;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  n  ==  lhType;	  return    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	36	None	replace
105	[BUG]  [BUGGY]  return  lhType!=  rhType;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  lhType!=  rhType;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  lhType!=  rhType;	  return    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	36	None	replace
106	[BUG]  [BUGGY]  if(result  ==  null  ||  result.equals(lhType))  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  ||  result.equals(lhType))  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||  result.equals(lhType))  {  break;  }	  if(result    ==    null    ||    result.equals(rhType))    {    break;    }    	non-compiled	[CE]  orphaned  case	78	None	replace
107	[BUG]  [BUGGY]  if(result  ==  null  &&  result.equals(rhType))  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  &&  result.equals(rhType))  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  &&  result.equals(rhType))  {  break;  }	  if(result    ==    null    ||    result.equals(rhType))    {    break;    }    	non-compiled	[CE]  orphaned  case	78	None	replace
108	[BUG]  [BUGGY]  if(result!=  null  ||  result.equals(lhType))  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result!=  null  ||  result.equals(lhType))  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  null  ||  result.equals(lhType))  {  break;  }	  if(result    ==    null    ||    result.equals(rhType))    {    break;    }    	non-compiled	[CE]  orphaned  case	78	None	replace
109	[BUG]  [BUGGY]  if(result!=  null  ||  result.equals(rhType))  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result!=  null  ||  result.equals(rhType))  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  null  ||  result.equals(rhType))  {  break;  }	  if(result    ==    null    ||    result.equals(rhType))    {    break;    }    	non-compiled	[CE]  orphaned  case	78	None	replace
110	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.restrictByNotNullOrUndefined;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType.restrictByNotNullOrUndefined;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType.restrictByNotNullOrUndefined;	  result    =    lhType!=    rhType.restrictByNotNullOrUndefined;    	non-compiled	[CE]  orphaned  case	65	None	replace
111	[BUG]  [BUGGY]  result  =  rhType!=  lhType.restrictByNotNullOrUndefined;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType!=  lhType.restrictByNotNullOrUndefined;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType!=  lhType.restrictByNotNullOrUndefined;	  result    =    lhType!=    rhType.restrictByNotNullOrUndefined;    	non-compiled	[CE]  orphaned  case	65	None	replace
112	[BUG]  [BUGGY]  result  =  lhType  >>  rhType.restrictByNotNullOrUndefined;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  >>  rhType.restrictByNotNullOrUndefined;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  >>  rhType.restrictByNotNullOrUndefined;	  result    =    lhType!=    rhType.restrictByNotNullOrUndefined;    	non-compiled	[CE]  orphaned  case	65	None	replace
113	[BUG]  [BUGGY]  result  =  lhType  >=  rhType.restrictByNotNullOrUndefined;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  >=  rhType.restrictByNotNullOrUndefined;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  >=  rhType.restrictByNotNullOrUndefined;	  result    =    lhType!=    rhType.restrictByNotNullOrUndefined;    	non-compiled	[CE]  orphaned  case	65	None	replace
114	[BUG]  [BUGGY]  result  =  rhType  ==  lhType.restrictByNotNullOrUndefined;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  ==  lhType.restrictByNotNullOrUndefined;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  lhType.restrictByNotNullOrUndefined;	  result    =    lhType!=    rhType.restrictByNotNullOrUndefined;    	non-compiled	[CE]  orphaned  case	65	None	replace
115	[BUG]  [BUGGY]  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  break;  }	  if(rhType    ==    Token.FUNCTION    ||    rhType    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	15	None	replace
116	[BUG]  [BUGGY]  if(lhType!=  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType!=  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType!=  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  break;  }	  if(rhType    ==    Token.FUNCTION    ||    rhType    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	15	None	replace
117	[BUG]  [BUGGY]  if(op  ==  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(op  ==  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(op  ==  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  break;  }	  if(rhType    ==    Token.FUNCTION    ||    rhType    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	15	None	replace
118	[BUG]  [BUGGY]  if(rhType  ==  Token.FUNCTION  ||  lhType  ==  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType  ==  Token.FUNCTION  ||  lhType  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType  ==  Token.FUNCTION  ||  lhType  ==  Token.FUNCTION)  {  break;  }	  if(rhType    ==    Token.FUNCTION    ||    rhType    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	15	None	replace
119	[BUG]  [BUGGY]  if(rhType  ==  Token.FUNCTION  &&  rhType  ==  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType  ==  Token.FUNCTION  &&  rhType  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType  ==  Token.FUNCTION  &&  rhType  ==  Token.FUNCTION)  {  break;  }	  if(rhType    ==    Token.FUNCTION    ||    rhType    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	15	None	replace
120	[BUG]  [BUGGY]  if(lhType  ==  Token.FUNCTION  ||  rhType!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType  ==  Token.FUNCTION  ||  rhType!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType  ==  Token.FUNCTION  ||  rhType!=  Token.FUNCTION)  {  break;  }	  if(rhType    ==    Token.FUNCTION    ||    rhType    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	15	None	replace
121	[BUG]  [BUGGY]  n  =  left.replaceChild(right,  newNode,  result);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.replaceChild(right,  newNode,  result);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.replaceChild(right,  newNode,  result);	  n    =    left.replaceChild(right,    newNode);    	non-compiled	[CE]  orphaned  case	66	None	replace
122	[BUG]  [BUGGY]  n  =  left.replaceChild(n,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.replaceChild(n,  right);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.replaceChild(n,  right);	  n    =    left.replaceChild(right,    newNode);    	non-compiled	[CE]  orphaned  case	66	None	replace
123	[BUG]  [BUGGY]  n  =  left.replaceChild(newNode,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.replaceChild(newNode,  right);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.replaceChild(newNode,  right);	  n    =    left.replaceChild(right,    newNode);    	non-compiled	[CE]  orphaned  case	66	None	replace
124	[BUG]  [BUGGY]  rhType  =  lhType!=  rhType;  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType!=  rhType;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType!=  rhType;  break;	  rhType    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	35	None	replace
125	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType  +  1;  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType  +  1;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType  +  1;  break;	  rhType    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	35	None	replace
126	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType.cloneTree();  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType.cloneTree();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType.cloneTree();  break;	  rhType    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	35	None	replace
127	[BUG]  [BUGGY]  rhType  =  lhType  >>  rhType;  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  >>  rhType;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  >>  rhType;  break;	  rhType    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	35	None	replace
128	[BUG]  [BUGGY]  rhType  =  lhType  >=  rhType;  break;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  >=  rhType;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  >=  rhType;  break;	  rhType    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	35	None	replace
129	[BUG]  [BUGGY]  if(lhType  ==  null  ||!result.isEmpty())  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType  ==  null  ||!result.isEmpty())  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType  ==  null  ||!result.isEmpty())  {  break;  }	  if(result    ==    null    ||!result.isEmpty())    {    break;    }    	non-compiled	[CE]  orphaned  case	75	None	replace
130	[BUG]  [BUGGY]  if(rhType  ==  null  ||!result.isEmpty())  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType  ==  null  ||!result.isEmpty())  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType  ==  null  ||!result.isEmpty())  {  break;  }	  if(result    ==    null    ||!result.isEmpty())    {    break;    }    	non-compiled	[CE]  orphaned  case	75	None	replace
131	[BUG]  [BUGGY]  result  =  rhType!=  lhType.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType!=  lhType.restrictByNotNullOrUndefined();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType!=  lhType.restrictByNotNullOrUndefined();	  result    =    lhType!=    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	64	None	replace
132	[BUG]  [BUGGY]  result  =  lhType  >>  rhType.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  >>  rhType.restrictByNotNullOrUndefined();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  >>  rhType.restrictByNotNullOrUndefined();	  result    =    lhType!=    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	64	None	replace
133	[BUG]  [BUGGY]  result  =  lhType  >=  rhType.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  >=  rhType.restrictByNotNullOrUndefined();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  >=  rhType.restrictByNotNullOrUndefined();	  result    =    lhType!=    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	64	None	replace
134	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmpty();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmpty();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType.restrictByNotEmpty();	  result    =    lhType!=    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	64	None	replace
135	[BUG]  [BUGGY]  result  =  rhType!=  null.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType!=  null.restrictByNotNullOrUndefined();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType!=  null.restrictByNotNullOrUndefined();	  result    =    lhType!=    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	64	None	replace
136	[BUG]  [BUGGY]  if(result  ==  null  ||  compareResult.equals(left))  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  ||  compareResult.equals(left))  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||  compareResult.equals(left))  {  break;  }	  if(compareResult    ==    null    ||    compareResult.equals(left))    {    break;    }    	non-compiled	[CE]  orphaned  case	74	None	replace
137	[BUG]  [BUGGY]  if(compareResult  ==  null  ||  compareResult.equals(right))  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(compareResult  ==  null  ||  compareResult.equals(right))  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(compareResult  ==  null  ||  compareResult.equals(right))  {  break;  }	  if(compareResult    ==    null    ||    compareResult.equals(left))    {    break;    }    	non-compiled	[CE]  orphaned  case	74	None	replace
138	[BUG]  [BUGGY]  if(compareResult  ==  null  ||  compareResult.equals(rhType))  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(compareResult  ==  null  ||  compareResult.equals(rhType))  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(compareResult  ==  null  ||  compareResult.equals(rhType))  {  break;  }	  if(compareResult    ==    null    ||    compareResult.equals(left))    {    break;    }    	non-compiled	[CE]  orphaned  case	74	None	replace
139	[BUG]  [BUGGY]  if(compareResult  ==  null  &&  compareResult.equals(left))  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(compareResult  ==  null  &&  compareResult.equals(left))  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(compareResult  ==  null  &&  compareResult.equals(left))  {  break;  }	  if(compareResult    ==    null    ||    compareResult.equals(left))    {    break;    }    	non-compiled	[CE]  orphaned  case	74	None	replace
140	[BUG]  [BUGGY]  if(compareResult  ==  null  ||  compareResult.equals(n))  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(compareResult  ==  null  ||  compareResult.equals(n))  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(compareResult  ==  null  ||  compareResult.equals(n))  {  break;  }	  if(compareResult    ==    null    ||    compareResult.equals(left))    {    break;    }    	non-compiled	[CE]  orphaned  case	74	None	replace
141	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&  lhType  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType  &&  lhType  ==  Token.FUNCTION;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  &&  lhType  ==  Token.FUNCTION;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	12	None	replace
142	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  ||  lhType  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  ==  lhType  ||  lhType  ==  Token.FUNCTION;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  lhType  ||  lhType  ==  Token.FUNCTION;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	12	None	replace
143	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||  lhType!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType  ||  lhType!=  Token.FUNCTION;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  ||  lhType!=  Token.FUNCTION;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	12	None	replace
144	[BUG]  [BUGGY]  result  =  lhType  ==  rhType)||  lhType  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType)||  lhType  ==  Token.FUNCTION;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType)||  lhType  ==  Token.FUNCTION;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	12	None	replace
145	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&  lhType  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  rhType  &&  lhType  ==  Token.FUNCTION;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType  &&  lhType  ==  Token.FUNCTION;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	12	None	replace
146	[BUG]  [BUGGY]  n  =  left.getNext()  +  1;  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.getNext()  +  1;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getNext()  +  1;  break;	  n    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	58	None	replace
147	[BUG]  [BUGGY]  n  =  right.getNext();  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  right.getNext();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  right.getNext();  break;	  n    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	58	None	replace
148	[BUG]  [BUGGY]  n  =  left.getParent();  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.getParent();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getParent();  break;	  n    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	58	None	replace
149	[BUG]  [BUGGY]  n  =  left  ==  null?  left.getFirstChild()  :  left.getLastChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left  ==  null?  left.getFirstChild()  :  left.getLastChild();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left  ==  null?  left.getFirstChild()  :  left.getLastChild();	  n    =    left!=    null?    left.getFirstChild()    :    left.getLastChild();    	non-compiled	[CE]  orphaned  case	44	None	replace
150	[BUG]  [BUGGY]  if(lhType!=  null  &&  rhType!=  Token.NULL)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType!=  null  &&  rhType!=  Token.NULL)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType!=  null  &&  rhType!=  Token.NULL)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.NULL)    {    break;    }    	non-compiled	[CE]  orphaned  case	61	None	replace
151	[BUG]  [BUGGY]  if(result  ==  null  &&  rhType!=  Token.NULL)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  &&  rhType!=  Token.NULL)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  &&  rhType!=  Token.NULL)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.NULL)    {    break;    }    	non-compiled	[CE]  orphaned  case	61	None	replace
152	[BUG]  [BUGGY]  if(rhType!=  null  &&  result!=  Token.NULL)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType!=  null  &&  result!=  Token.NULL)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType!=  null  &&  result!=  Token.NULL)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.NULL)    {    break;    }    	non-compiled	[CE]  orphaned  case	61	None	replace
153	[BUG]  [BUGGY]  if(result  ==  null  ||  rhType!=  Token.NULL)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  ||  rhType!=  Token.NULL)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||  rhType!=  Token.NULL)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.NULL)    {    break;    }    	non-compiled	[CE]  orphaned  case	61	None	replace
154	[BUG]  [BUGGY]  if(rhType!=  null  &&  result!=  null)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType!=  null  &&  result!=  null)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType!=  null  &&  result!=  null)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.NULL)    {    break;    }    	non-compiled	[CE]  orphaned  case	61	None	replace
155	[BUG]  [BUGGY]  if(compareResult  ==  rhType)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(compareResult  ==  rhType)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(compareResult  ==  rhType)  {  break;  }	  if(compareResult    ==    lhType)    {    break;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
156	[BUG]  [BUGGY]  if(lhType  ==  compareResult)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType  ==  compareResult)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType  ==  compareResult)  {  break;  }	  if(compareResult    ==    lhType)    {    break;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
157	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.cloneTree();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType.cloneTree();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType.cloneTree();	  result    =    rhType    ==    lhType;    	non-compiled	[CE]  orphaned  case	7	None	replace
158	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  &&!node.hasChildren();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  ==  lhType  &&!node.hasChildren();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  lhType  &&!node.hasChildren();	  result    =    lhType    ==    rhType    &&!node.hasChildren();    	non-compiled	[CE]  orphaned  case	69	None	replace
159	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||!node.hasChildren();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType  ||!node.hasChildren();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  ||!node.hasChildren();	  result    =    lhType    ==    rhType    &&!node.hasChildren();    	non-compiled	[CE]  orphaned  case	69	None	replace
160	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +&!node.hasChildren();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType  +&!node.hasChildren();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  +&!node.hasChildren();	  result    =    lhType    ==    rhType    &&!node.hasChildren();    	non-compiled	[CE]  orphaned  case	69	None	replace
161	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!node.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType  &&!node.restrictByNotNullOrUndefined();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  &&!node.restrictByNotNullOrUndefined();	  result    =    lhType    ==    rhType    &&!node.hasChildren();    	non-compiled	[CE]  orphaned  case	69	None	replace
162	[BUG]  [BUGGY]  n  =  left.getfirstChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.getfirstChild();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getfirstChild();	  n    =    right.getLastChild();    	non-compiled	[CE]  orphaned  case	31	None	replace
163	[BUG]  [BUGGY]  if(lhType  ==  null  ||!result.isUndefined())  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType  ==  null  ||!result.isUndefined())  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType  ==  null  ||!result.isUndefined())  {  break;  }	  if(result    ==    null    ||!result.isUndefined())    {    break;    }    	non-compiled	[CE]  orphaned  case	76	None	replace
164	[BUG]  [BUGGY]  if(result!=  null  ||!result.isUndefined())  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result!=  null  ||!result.isUndefined())  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  null  ||!result.isUndefined())  {  break;  }	  if(result    ==    null    ||!result.isUndefined())    {    break;    }    	non-compiled	[CE]  orphaned  case	76	None	replace
165	[BUG]  [BUGGY]  if(lhType!=  null  ||!result.isUndefined())  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType!=  null  ||!result.isUndefined())  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType!=  null  ||!result.isUndefined())  {  break;  }	  if(result    ==    null    ||!result.isUndefined())    {    break;    }    	non-compiled	[CE]  orphaned  case	76	None	replace
166	[BUG]  [BUGGY]  result  =  rhType  ==  lhType.toString();  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  ==  lhType.toString();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  lhType.toString();  break;	  result    =    lhType    ==    rhType.toString();    break;    	non-compiled	[CE]  orphaned  case	72	None	replace
167	[BUG]  [BUGGY]  result  =  lhType!=  rhType.toString();  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  rhType.toString();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType.toString();  break;	  result    =    lhType    ==    rhType.toString();    break;    	non-compiled	[CE]  orphaned  case	72	None	replace
168	[BUG]  [BUGGY]  result  =  rhType  ==  lhType.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  ==  lhType.restrictByNotNullOrUndefined();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  lhType.restrictByNotNullOrUndefined();	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	11	None	replace
169	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.restrictStrictlyNullOrUndefined();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType.restrictStrictlyNullOrUndefined();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType.restrictStrictlyNullOrUndefined();	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	11	None	replace
170	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType  +  2;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType  +  2;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType  +  2;	  rhType    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  orphaned  case	20	None	replace
171	[BUG]  [BUGGY]  rhType  =  lhType!=  rhType  +  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType!=  rhType  +  1;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType!=  rhType  +  1;	  rhType    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  orphaned  case	20	None	replace
172	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType  +  3;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType  +  3;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType  +  3;	  rhType    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  orphaned  case	20	None	replace
173	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType  +  4;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType  +  4;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType  +  4;	  rhType    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  orphaned  case	20	None	replace
174	[BUG]  [BUGGY]  result  =  rhType  ==  lhType.getName();  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  ==  lhType.getName();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  lhType.getName();  break;	  result    =    lhType    ==    rhType.getName();    break;    	non-compiled	[CE]  orphaned  case	73	None	replace
175	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getQualifiedName();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType.getQualifiedName();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType.getQualifiedName();  break;	  result    =    lhType    ==    rhType.getName();    break;    	non-compiled	[CE]  orphaned  case	73	None	replace
176	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getSimpleName();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType.getSimpleName();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType.getSimpleName();  break;	  result    =    lhType    ==    rhType.getName();    break;    	non-compiled	[CE]  orphaned  case	73	None	replace
177	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getRaw();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType.getRaw();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType.getRaw();  break;	  result    =    lhType    ==    rhType.getName();    break;    	non-compiled	[CE]  orphaned  case	73	None	replace
178	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getReturnType();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType.getReturnType();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType.getReturnType();  break;	  result    =    lhType    ==    rhType.getName();    break;    	non-compiled	[CE]  orphaned  case	73	None	replace
179	[BUG]  [BUGGY]  if(rhType!=  null  &&  result!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType!=  null  &&  result!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType!=  null  &&  result!=  Token.FUNCTION)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	60	None	replace
180	[BUG]  [BUGGY]  if(result  ==  null  &&  rhType!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  &&  rhType!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  &&  rhType!=  Token.FUNCTION)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	60	None	replace
181	[BUG]  [BUGGY]  if(lhType!=  null  &&  rhType!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType!=  null  &&  rhType!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType!=  null  &&  rhType!=  Token.FUNCTION)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	60	None	replace
182	[BUG]  [BUGGY]  if(rhType!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType!=  Token.FUNCTION)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	60	None	replace
183	[BUG]  [BUGGY]  if(lhType!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType!=  Token.FUNCTION)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	60	None	replace
184	[BUG]  [BUGGY]  n  =  left!=  null?  left.getLastChild()  :  left.getFirstChild();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left!=  null?  left.getLastChild()  :  left.getFirstChild();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left!=  null?  left.getLastChild()  :  left.getFirstChild();	  n    =    left!=    null?    left.getLastChild()    :    left.getLastChild();    	non-compiled	[CE]  orphaned  case	43	None	replace
185	[BUG]  [BUGGY]  result  =  rhType  ==  Token.EQ;  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  ==  Token.EQ;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  Token.EQ;  break;	  result    =    lhType    ==    Token.EQ;    break;    	non-compiled	[CE]  orphaned  case	28	None	replace
186	[BUG]  [BUGGY]  n  =  left!=  null?  left.getFirstChild()  :  right.getNext();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left!=  null?  left.getFirstChild()  :  right.getNext();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left!=  null?  left.getFirstChild()  :  right.getNext();	  n    =    left!=    null?    left.getFirstChild()    :    left.getNext();    	non-compiled	[CE]  orphaned  case	39	None	replace
187	[BUG]  [BUGGY]  n  =  left  ==  null?  left.getFirstChild()  :  left.getNext();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left  ==  null?  left.getFirstChild()  :  left.getNext();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left  ==  null?  left.getFirstChild()  :  left.getNext();	  n    =    left!=    null?    left.getFirstChild()    :    left.getNext();    	non-compiled	[CE]  orphaned  case	39	None	replace
188	[BUG]  [BUGGY]  n  =  left  ==  null?  left.getFirstChild()  :  right.getNext();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left  ==  null?  left.getFirstChild()  :  right.getNext();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left  ==  null?  left.getFirstChild()  :  right.getNext();	  n    =    left!=    null?    left.getFirstChild()    :    left.getNext();    	non-compiled	[CE]  orphaned  case	39	None	replace
189	[BUG]  [BUGGY]  if(lhType  ==  null  ||!result.isUnknownType())  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType  ==  null  ||!result.isUnknownType())  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType  ==  null  ||!result.isUnknownType())  {  break;  }	  if(result    ==    null    ||!result.isUnknownType())    {    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
190	[BUG]  [BUGGY]  if(result!=  null  ||!result.isUnknownType())  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result!=  null  ||!result.isUnknownType())  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  null  ||!result.isUnknownType())  {  break;  }	  if(result    ==    null    ||!result.isUnknownType())    {    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
191	[BUG]  [BUGGY]  if(rhType  ==  null  ||!result.isUnknownType())  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType  ==  null  ||!result.isUnknownType())  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType  ==  null  ||!result.isUnknownType())  {  break;  }	  if(result    ==    null    ||!result.isUnknownType())    {    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
192	[BUG]  [BUGGY]  n  =  left  ==  null?  left.getNext()  :  right.getNext();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left  ==  null?  left.getNext()  :  right.getNext();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left  ==  null?  left.getNext()  :  right.getNext();	  n    =    left!=    null?    left.getNext()    :    right.getNext();    	non-compiled	[CE]  orphaned  case	38	None	replace
193	[BUG]  [BUGGY]  n  =  left!=  null?  right.getNext()  :  left.getNext();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left!=  null?  right.getNext()  :  left.getNext();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left!=  null?  right.getNext()  :  left.getNext();	  n    =    left!=    null?    left.getNext()    :    right.getNext();    	non-compiled	[CE]  orphaned  case	38	None	replace
194	[BUG]  [BUGGY]  n  =  left  ==  null?  right.getNext()  :  left.getNext();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left  ==  null?  right.getNext()  :  left.getNext();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left  ==  null?  right.getNext()  :  left.getNext();	  n    =    left!=    null?    left.getNext()    :    right.getNext();    	non-compiled	[CE]  orphaned  case	38	None	replace
195	[BUG]  [BUGGY]  n  =  left.cloneTree();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.cloneTree();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.cloneTree();	  n    =    left.getParent();    	non-compiled	[CE]  orphaned  case	5	None	replace
196	[BUG]  [BUGGY]  return  left.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  left.getFirstChild().getNext();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  left.getFirstChild().getNext();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  orphaned  case	56	None	replace
197	[BUG]  [BUGGY]  return  n.getLastChild().getNext();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  n.getLastChild().getNext();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  n.getLastChild().getNext();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  orphaned  case	56	None	replace
198	[BUG]  [BUGGY]  return  left.getLastChild().getNext();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  left.getLastChild().getNext();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  left.getLastChild().getNext();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  orphaned  case	56	None	replace
199	[BUG]  [BUGGY]  return  right.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  right.getFirstChild().getNext();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  right.getFirstChild().getNext();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  orphaned  case	56	None	replace
200	[BUG]  [BUGGY]  return  rn.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  rn.getFirstChild().getNext();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  rn.getFirstChild().getNext();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  orphaned  case	56	None	replace
201	[BUG]  [BUGGY]  return  n.getFirstChild().getNext()  +  1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  n.getFirstChild().getNext()  +  1;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  n.getFirstChild().getNext()  +  1;	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  orphaned  case	56	None	replace
202	[BUG]  [BUGGY]  result  =  n  ==  lhType;  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  n  ==  lhType;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  n  ==  lhType;  break;	  result    =    lhType    ==    n;    break;    	non-compiled	[CE]  orphaned  case	29	None	replace
203	[BUG]  [BUGGY]  if(lhType  ==  op)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType  ==  op)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType  ==  op)  {  break;  }	  if(op    ==    lhType)    {    break;    }    	non-compiled	[CE]  orphaned  case	50	None	replace
204	[BUG]  [BUGGY]  if(type  ==  Token.FALSE)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(type  ==  Token.FALSE)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(type  ==  Token.FALSE)  {  break;  }	  if(rhType    ==    Token.FALSE)    {    break;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
205	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  &&!result)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType!=  Token.FALSE  &&!result)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType!=  Token.FALSE  &&!result)  {  break;  }	  if(rhType    ==    Token.FALSE)    {    break;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
206	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!node.hasChildren();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  rhType  &&!node.hasChildren();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType  &&!node.hasChildren();	  result    =    lhType    ==    rhType    &&!node.hasChildren();    	non-compiled	[CE]  orphaned  case	69	None	replace
207	[BUG]  [BUGGY]  rhType  =  lhType  >>  rhType  +  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  >>  rhType  +  1;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  >>  rhType  +  1;	  rhType    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  orphaned  case	20	None	replace
208	[BUG]  [BUGGY]  return  op  ==  rhType;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  op  ==  rhType;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  op  ==  rhType;	  return    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	36	None	replace
209	[BUG]  [BUGGY]  return  lhType  ==  rhType  +  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  lhType  ==  rhType  +  1;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  lhType  ==  rhType  +  1;	  return    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	36	None	replace
210	[BUG]  [BUGGY]  if(compareResult!=  rhType)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(compareResult!=  rhType)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(compareResult!=  rhType)  {  break;  }	  if(compareResult    ==    lhType)    {    break;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
211	[BUG]  [BUGGY]  lhType  ==  rhType)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  lhType  ==  rhType)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	lhType  ==  rhType)  {  break;  }	  if(rhType    ==    lhType)    {    break;    }    	non-compiled	[CE]  orphaned  case	49	None	replace
212	[BUG]  [BUGGY]  if(rhType!=  null  &&  rhType!=  Token.FALSE)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType!=  null  &&  rhType!=  Token.FALSE)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType!=  null  &&  rhType!=  Token.FALSE)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.FALSE)    {    break;    }    	non-compiled	[CE]  orphaned  case	62	None	replace
213	[BUG]  [BUGGY]  if(result!=  null  &&  lhType!=  Token.FALSE)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result!=  null  &&  lhType!=  Token.FALSE)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  null  &&  lhType!=  Token.FALSE)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.FALSE)    {    break;    }    	non-compiled	[CE]  orphaned  case	62	None	replace
214	[BUG]  [BUGGY]  result  =  lhType!=  rhType  +  2;  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  rhType  +  2;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType  +  2;  break;	  result    =    lhType    ==    rhType    +    1;    break;    	non-compiled	[CE]  orphaned  case	27	None	replace
215	[BUG]  [BUGGY]  result  =  lhType  >>  rhType  +  2;  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  >>  rhType  +  2;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  >>  rhType  +  2;  break;	  result    =    lhType    ==    rhType    +    1;    break;    	non-compiled	[CE]  orphaned  case	27	None	replace
216	[BUG]  [BUGGY]  n  =  left.getFirstChild().getNext();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.getFirstChild().getNext();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getFirstChild().getNext();	  n    =    left.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	1	None	replace
217	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!isFunctionDeclaration(left);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType  &&!isFunctionDeclaration(left);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  &&!isFunctionDeclaration(left);	  result    =    lhType    ==    rhType    &&!isFunctionDeclaration(n);    	non-compiled	[CE]  orphaned  case	71	None	replace
218	[BUG]  [BUGGY]  rhType  =  lhType!=  rhType.cloneTree();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType!=  rhType.cloneTree();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType!=  rhType.cloneTree();	  rhType    =    lhType    ==    rhType.cloneTree();    	non-compiled	[CE]  orphaned  case	22	None	replace
219	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType.cloneBoolean();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType.cloneBoolean();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType.cloneBoolean();	  rhType    =    lhType    ==    rhType.cloneTree();    	non-compiled	[CE]  orphaned  case	22	None	replace
220	[BUG]  [BUGGY]  result  =  rhType  >>  rhType;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  >>  rhType;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  >>  rhType;	  result    =    rhType    >=    lhType;    	non-compiled	[CE]  orphaned  case	9	None	replace
221	[BUG]  [BUGGY]  result  =  rhType!=  rhType;  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType!=  rhType;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType!=  rhType;  break;	  result    =    rhType    ==    lhType;    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
222	[BUG]  [BUGGY]  result  =  lhType  >>  rhType  +  2;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  >>  rhType  +  2;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  >>  rhType  +  2;	  result    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  orphaned  case	8	None	replace
223	[BUG]  [BUGGY]  rhType  =  lhType  [Delete]  rhType;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  [Delete]  rhType;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  [Delete]  rhType;	  rhType    =    lhType    >>    rhType;    	non-compiled	[CE]  orphaned  case	51	None	replace
224	[BUG]  [BUGGY]  if(rhType!=  null  &&  rhType!=  Token.NULL)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType!=  null  &&  rhType!=  Token.NULL)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType!=  null  &&  rhType!=  Token.NULL)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.NULL)    {    break;    }    	non-compiled	[CE]  orphaned  case	61	None	replace
225	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!compareResult.booleanValue();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType  &&!compareResult.booleanValue();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  &&!compareResult.booleanValue();	  result    =    lhType    ==    rhType    &&!result.booleanValue();    	non-compiled	[CE]  orphaned  case	68	None	replace
226	[BUG]  [BUGGY]  result  =  lhType!=  rhType.toString();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  rhType.toString();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType.toString();	  result    =    lhType    ==    rhType.toString();    break;    	non-compiled	[CE]  orphaned  case	72	None	replace
227	[BUG]  [BUGGY]  if(rhType  ==  null  ||!result.isUndefined())  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType  ==  null  ||!result.isUndefined())  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType  ==  null  ||!result.isUndefined())  {  break;  }	  if(result    ==    null    ||!result.isUndefined())    {    break;    }    	non-compiled	[CE]  orphaned  case	76	None	replace
228	[BUG]  [BUGGY]  if(result!=  null  &&!result.isUndefined())  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result!=  null  &&!result.isUndefined())  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  null  &&!result.isUndefined())  {  break;  }	  if(result    ==    null    ||!result.isUndefined())    {    break;    }    	non-compiled	[CE]  orphaned  case	76	None	replace
229	[BUG]  [BUGGY]  if(result!=  null  &&!result.isUnknownType())  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result!=  null  &&!result.isUnknownType())  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  null  &&!result.isUnknownType())  {  break;  }	  if(result    ==    null    ||!result.isUnknownType())    {    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
230	[BUG]  [BUGGY]  result  =  result;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  result;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  result;	  if(result    ==    null)    {    return    result;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
231	[BUG]  [BUGGY]  if(result!=  null)  {  return  result;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result!=  null)  {  return  result;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  null)  {  return  result;  }	  if(result    ==    null)    {    return    result;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
232	[BUG]  [BUGGY]  result  =  result  ==  null?  false  :  result;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  result  ==  null?  false  :  result;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  result  ==  null?  false  :  result;	  if(result    ==    null)    {    return    result;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
233	[BUG]  [BUGGY]  result  =  result!=  null?  result  :  result;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  result!=  null?  result  :  result;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  result!=  null?  result  :  result;	  if(result    ==    null)    {    return    result;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
234	[BUG]  [BUGGY]  result  =  rhType  >>  Token.EQ;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  >>  Token.EQ;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  >>  Token.EQ;	  result    =    lhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	63	None	replace
235	[BUG]  [BUGGY]  result  =  lhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  Token.EQ;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  Token.EQ;	  result    =    lhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	63	None	replace
236	[BUG]  [BUGGY]  if(rhType!=  null  &&  rhType!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType!=  null  &&  rhType!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType!=  null  &&  rhType!=  Token.FUNCTION)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	60	None	replace
237	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lhType  >>  rhType;  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  case  Token.CALL:  result  =  lhType  >>  rhType;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	case  Token.CALL:  result  =  lhType  >>  rhType;  break;	  case    Token.CALL:    result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	55	None	replace
238	[BUG]  [BUGGY]  Case  Token.CALL:  result  =  lhType!=  rhType;  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  Case  Token.CALL:  result  =  lhType!=  rhType;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	Case  Token.CALL:  result  =  lhType!=  rhType;  break;	  case    Token.CALL:    result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	55	None	replace
239	[BUG]  [BUGGY]  result  =  rhType!=  null?  rhType.restrictByNotNullOrUndefined()  :  lhType;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType!=  null?  rhType.restrictByNotNullOrUndefined()  :  lhType;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType!=  null?  rhType.restrictByNotNullOrUndefined()  :  lhType;	  result    =    lhType!=    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	64	None	replace
240	[BUG]  [BUGGY]  result  =  op!=  rhType.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  op!=  rhType.restrictByNotNullOrUndefined();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  op!=  rhType.restrictByNotNullOrUndefined();	  result    =    lhType!=    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	64	None	replace
241	[BUG]  [BUGGY]  result  =  rhType  >>  lhType;  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  >>  lhType;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  >>  lhType;  break;	  result    =    lhType    >=    rhType;    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
242	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  rn);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.replaceChild(left,  rn);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.replaceChild(left,  rn);	  n    =    left.removeFirstChild();    	non-compiled	[CE]  orphaned  case	32	None	replace
243	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType.getRawType();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType.getRawType();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType.getRawType();	  rhType    =    lhType    ==    rhType.toString();    	non-compiled	[CE]  orphaned  case	79	None	replace
244	[BUG]  [BUGGY]  result  =  lhType  >>  rhType.restrictByNotNullOrUndefined();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  >>  rhType.restrictByNotNullOrUndefined();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  >>  rhType.restrictByNotNullOrUndefined();  break;	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    break;    	non-compiled	[CE]  orphaned  case	26	None	replace
245	[BUG]  [BUGGY]  n  =  right!=  null?  left.getNext()  :  right.getNext();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  right!=  null?  left.getNext()  :  right.getNext();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  right!=  null?  left.getNext()  :  right.getNext();	  n    =    right.getNext();    	non-compiled	[CE]  orphaned  case	2	None	replace
246	[BUG]  [BUGGY]  n  =  right!=  null?  left.getFirstChild()  :  right.getNext();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  right!=  null?  left.getFirstChild()  :  right.getNext();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  right!=  null?  left.getFirstChild()  :  right.getNext();	  n    =    right.getNext();    	non-compiled	[CE]  orphaned  case	2	None	replace
247	[BUG]  [BUGGY]  n  =  right!=  null?  right.getNext()  :  left.getNext();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  right!=  null?  right.getNext()  :  left.getNext();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  right!=  null?  right.getNext()  :  left.getNext();	  n    =    right.getNext();    	non-compiled	[CE]  orphaned  case	2	None	replace
248	[BUG]  [BUGGY]  n  =  left.getlastChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.getlastChild();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getlastChild();	  n    =    right.getLastChild();    	non-compiled	[CE]  orphaned  case	31	None	replace
249	[BUG]  [BUGGY]  if(compareResult!=  null  ||  compareResult.equals(left))  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(compareResult!=  null  ||  compareResult.equals(left))  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(compareResult!=  null  ||  compareResult.equals(left))  {  break;  }	  if(compareResult    ==    null    ||    compareResult.equals(left))    {    break;    }    	non-compiled	[CE]  orphaned  case	74	None	replace
250	[BUG]  [BUGGY]  if(compareResult!=  null  &&  compareResult.equals(left))  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(compareResult!=  null  &&  compareResult.equals(left))  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(compareResult!=  null  &&  compareResult.equals(left))  {  break;  }	  if(compareResult    ==    null    ||    compareResult.equals(left))    {    break;    }    	non-compiled	[CE]  orphaned  case	74	None	replace
251	[BUG]  [BUGGY]  if(compareResult  ==  null  ||  equals(left))  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(compareResult  ==  null  ||  equals(left))  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(compareResult  ==  null  ||  equals(left))  {  break;  }	  if(compareResult    ==    null    ||    compareResult.equals(left))    {    break;    }    	non-compiled	[CE]  orphaned  case	74	None	replace
252	[BUG]  [BUGGY]  result  =  op!=  rhType.restrictByNotNullOrUndefined;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  op!=  rhType.restrictByNotNullOrUndefined;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  op!=  rhType.restrictByNotNullOrUndefined;	  result    =    lhType!=    rhType.restrictByNotNullOrUndefined;    	non-compiled	[CE]  orphaned  case	65	None	replace
253	[BUG]  [BUGGY]  n  =  left.removeFirst();  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.removeFirst();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.removeFirst();  break;	  n    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	58	None	replace
254	[BUG]  [BUGGY]  n  =  left.getFirst()  ||  right.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.getFirst()  ||  right.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getFirst()  ||  right.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;	  n    =    left.getNext()    ||    right.getType()    ==    Token.NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  orphaned  case	4	None	replace
255	[BUG]  [BUGGY]  n  =  left.getNext()  +  right.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.getNext()  +  right.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.getNext()  +  right.getType()  ==  Token.NEGATING_A_NON_NUMBER_ERROR;	  n    =    left.getNext()    ||    right.getType()    ==    Token.NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  orphaned  case	4	None	replace
256	[BUG]  [BUGGY]  return  n.getFirstChild().getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  n.getFirstChild().getLastChild();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  n.getFirstChild().getLastChild();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  orphaned  case	56	None	replace
257	[BUG]  [BUGGY]  return  left.getFirstChild().getParent();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  left.getFirstChild().getParent();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  left.getFirstChild().getParent();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  orphaned  case	56	None	replace
258	[BUG]  [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType!=  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  break;  }	  if(rhType    ==    Token.FUNCTION    ||    rhType    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	15	None	replace
259	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!result.isEmpty();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  rhType  &&!result.isEmpty();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType  &&!result.isEmpty();	  result    =    lhType    ==    rhType    &&!result.isEmpty();    	non-compiled	[CE]  orphaned  case	70	None	replace
260	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!result.isNone();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType  &&!result.isNone();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  &&!result.isNone();	  result    =    lhType    ==    rhType    &&!result.isEmpty();    	non-compiled	[CE]  orphaned  case	70	None	replace
261	[BUG]  [BUGGY]  result  =  lhType!=  rhType.getName();  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  rhType.getName();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType.getName();  break;	  result    =    lhType    ==    rhType.getName();    break;    	non-compiled	[CE]  orphaned  case	73	None	replace
262	[BUG]  [BUGGY]  result  =  op!=  lhType;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  op!=  lhType;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  op!=  lhType;	  result    =    rhType!=    lhType;    	non-compiled	[CE]  orphaned  case	6	None	replace
263	[BUG]  [BUGGY]  n  =  left.replaceChild(right,  newNode);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.replaceChild(right,  newNode);  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.replaceChild(right,  newNode);  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	57	None	replace
264	[BUG]  [BUGGY]  rhType  =  lhType  ==  n.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  n.restrictByNotNullOrUndefined();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  n.restrictByNotNullOrUndefined();	  rhType    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	21	None	replace
265	[BUG]  [BUGGY]  n  =  left.replaceChild(newNode,  left);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.replaceChild(newNode,  left);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.replaceChild(newNode,  left);	  n    =    left.replaceChild(right,    newNode);    	non-compiled	[CE]  orphaned  case	66	None	replace
266	[BUG]  [BUGGY]  n  =  left.replaceChild(right,  newNode)-  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.replaceChild(right,  newNode)-  1;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.replaceChild(right,  newNode)-  1;	  n    =    left.replaceChild(right,    newNode);    	non-compiled	[CE]  orphaned  case	66	None	replace
267	[BUG]  [BUGGY]  n  =  left.replaceChild(right,  newNode)+  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.replaceChild(right,  newNode)+  1;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.replaceChild(right,  newNode)+  1;	  n    =    left.replaceChild(right,    newNode);    	non-compiled	[CE]  orphaned  case	66	None	replace
268	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNode).replaceChild(n,  newNode);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.replaceChild(left,  newNode).replaceChild(n,  newNode);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.replaceChild(left,  newNode).replaceChild(n,  newNode);	  n    =    left.replaceChild(left,    newNode);    	non-compiled	[CE]  orphaned  case	67	None	replace
269	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNode)-  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.replaceChild(left,  newNode)-  1;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.replaceChild(left,  newNode)-  1;	  n    =    left.replaceChild(left,    newNode);    	non-compiled	[CE]  orphaned  case	67	None	replace
270	[BUG]  [BUGGY]  result  =  op!=  rhType;  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  op!=  rhType;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  op!=  rhType;  break;	  result    =    lhType!=    rhType;    break;    	non-compiled	[CE]  orphaned  case	25	None	replace
271	[BUG]  [BUGGY]  if(result!=  null  &&  result.equals(rhType))  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result!=  null  &&  result.equals(rhType))  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  null  &&  result.equals(rhType))  {  break;  }	  if(result    ==    null    ||    result.equals(rhType))    {    break;    }    	non-compiled	[CE]  orphaned  case	78	None	replace
272	[BUG]  [BUGGY]  result  =  op  ==  lhType;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  op  ==  lhType;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  op  ==  lhType;	  result    =    rhType    ==    lhType;    	non-compiled	[CE]  orphaned  case	7	None	replace
273	[BUG]  [BUGGY]  result  =  result!=  null  &&!result.isEmpty())  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  result!=  null  &&!result.isEmpty())  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  result!=  null  &&!result.isEmpty())  {  break;  }	  if(result!=    null    &&!result.isEmpty())    {    break;    }    	non-compiled	[CE]  orphaned  case	59	None	replace
274	[BUG]  [BUGGY]  n  =  left  ==  null?  left.getLastChild()  :  left.getFirstChild();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left  ==  null?  left.getLastChild()  :  left.getFirstChild();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left  ==  null?  left.getLastChild()  :  left.getFirstChild();	  n    =    left!=    null?    left.getLastChild()    :    left.getLastChild();    	non-compiled	[CE]  orphaned  case	43	None	replace
275	[BUG]  [BUGGY]  result  =  rhType  ==  n;  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  ==  n;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  n;  break;	  result    =    lhType    ==    n;    break;    	non-compiled	[CE]  orphaned  case	29	None	replace
276	[BUG]  [BUGGY]  if(rhType!=  lhType)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType!=  lhType)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType!=  lhType)  {  break;  }	  if(result!=    lhType)    {    break;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
277	[BUG]  [BUGGY]  if(lhType!=  result)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType!=  result)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType!=  result)  {  break;  }	  if(result!=    lhType)    {    break;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
278	[BUG]  [BUGGY]  if(result!=  rhType)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result!=  rhType)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  rhType)  {  break;  }	  if(result!=    lhType)    {    break;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
279	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  &&  lhType  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  ==  lhType  &&  lhType  ==  Token.FUNCTION;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  lhType  &&  lhType  ==  Token.FUNCTION;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	12	None	replace
280	[BUG]  [BUGGY]  result  =  lhType  ==  n  ||  lhType  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  n  ||  lhType  ==  Token.FUNCTION;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  n  ||  lhType  ==  Token.FUNCTION;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	12	None	replace
281	[BUG]  [BUGGY]  result  =  lhType  [Delete]  rhType;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  [Delete]  rhType;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  [Delete]  rhType;	  result    =    op!=    rhType;    	non-compiled	[CE]  orphaned  case	48	None	replace
282	[BUG]  [BUGGY]  if(op  ==  null)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(op  ==  null)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(op  ==  null)  {  break;  }	  if(rhType    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	14	None	replace
283	[BUG]  [BUGGY]  n  =  left  ==  null?  right.getLastChild()  :  left.getLastChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left  ==  null?  right.getLastChild()  :  left.getLastChild();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left  ==  null?  right.getLastChild()  :  left.getLastChild();	  n    =    left!=    null?    left.getLastChild()    :    right.getLastChild();    	non-compiled	[CE]  orphaned  case	45	None	replace
284	[BUG]  [BUGGY]  n  =  left!=  null?  right.getFirstChild()  :  right.getLastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left!=  null?  right.getFirstChild()  :  right.getLastChild();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left!=  null?  right.getFirstChild()  :  right.getLastChild();	  n    =    left!=    null?    left.getLastChild()    :    right.getLastChild();    	non-compiled	[CE]  orphaned  case	45	None	replace
285	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&  lhType  ==  Token.FALSE;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  rhType  &&  lhType  ==  Token.FALSE;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType  &&  lhType  ==  Token.FALSE;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FALSE;    	non-compiled	[CE]  orphaned  case	13	None	replace
286	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  &&  lhType  ==  Token.FALSE;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  rhType  ==  lhType  &&  lhType  ==  Token.FALSE;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  rhType  ==  lhType  &&  lhType  ==  Token.FALSE;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FALSE;    	non-compiled	[CE]  orphaned  case	13	None	replace
287	[BUG]  [BUGGY]  result  =  op  ==  rhType.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  op  ==  rhType.restrictByNotNullOrUndefined();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  op  ==  rhType.restrictByNotNullOrUndefined();	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	11	None	replace
288	[BUG]  [BUGGY]  result  =  lhType  ==  n.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  n.restrictByNotNullOrUndefined();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  n.restrictByNotNullOrUndefined();	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	11	None	replace
289	[BUG]  [BUGGY]  n  =  left  ==  null?  left.getLastChild()  :  left.getLastChild();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left  ==  null?  left.getLastChild()  :  left.getLastChild();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left  ==  null?  left.getLastChild()  :  left.getLastChild();	  n    =    left!=    null?    left.getLastChild()    :    left.getLastChild();    	non-compiled	[CE]  orphaned  case	43	None	replace
290	[BUG]  [BUGGY]  n  =  left!=  null?  right.getFirstChild()  :  left.getNext();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left!=  null?  right.getFirstChild()  :  left.getNext();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left!=  null?  right.getFirstChild()  :  left.getNext();	  n    =    left!=    null?    left.getFirstChild()    :    left.getNext();    	non-compiled	[CE]  orphaned  case	39	None	replace
291	[BUG]  [BUGGY]  if(result!=  null  &&!result.isEmpty()  &&  result.equals(rhType))  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result!=  null  &&!result.isEmpty()  &&  result.equals(rhType))  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  null  &&!result.isEmpty()  &&  result.equals(rhType))  {  break;  }	  if(result!=    null    &&!result.isEmpty())    {    break;    }    	non-compiled	[CE]  orphaned  case	59	None	replace
292	[BUG]  [BUGGY]  if(result!=  null  &&!result.isEmpty()  &&  lhType!=  rhType)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result!=  null  &&!result.isEmpty()  &&  lhType!=  rhType)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  null  &&!result.isEmpty()  &&  lhType!=  rhType)  {  break;  }	  if(result!=    null    &&!result.isEmpty())    {    break;    }    	non-compiled	[CE]  orphaned  case	59	None	replace
293	[BUG]  [BUGGY]  result  =  lhType!=  Token.EQ;  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  Token.EQ;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  Token.EQ;  break;	  result    =    lhType!=    rhType;    break;    	non-compiled	[CE]  orphaned  case	25	None	replace
294	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  rhType    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	21	None	replace
295	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement();	  rhType    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	21	None	replace
296	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement	  rhType    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	21	None	replace
297	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  rhType    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	21	None	replace
298	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement();	  rhType    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	21	None	replace
299	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!isFunctionDeclaration(n);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  rhType  &&!isFunctionDeclaration(n);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType  &&!isFunctionDeclaration(n);	  result    =    lhType    ==    rhType    &&!isFunctionDeclaration(n);    	non-compiled	[CE]  orphaned  case	71	None	replace
300	[BUG]  [BUGGY]  if(lhType!=  null  &&  rhType!=  Token.UNKNOWN)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType!=  null  &&  rhType!=  Token.UNKNOWN)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType!=  null  &&  rhType!=  Token.UNKNOWN)  {  break;  }	  if(lhType!=    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
301	[BUG]  [BUGGY]  if(rhType  ==  result)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType  ==  result)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType  ==  result)  {  break;  }	  if(result    ==    rhType)    {    break;    }    	non-compiled	[CE]  orphaned  case	18	None	replace
302	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNode,  this);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.replaceChild(left,  newNode,  this);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.replaceChild(left,  newNode,  this);	  n    =    left.replaceChild(left,    newNode);    	non-compiled	[CE]  orphaned  case	67	None	replace
303	[BUG]  [BUGGY]  if(result!=  null  &&  rhType  ==  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result!=  null  &&  rhType  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  null  &&  rhType  ==  Token.FUNCTION)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	60	None	replace
304	[BUG]  [BUGGY]  if(rhType  ==  null  ||!result.booleanValue())  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType  ==  null  ||!result.booleanValue())  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType  ==  null  ||!result.booleanValue())  {  break;  }	  if(rhType    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	14	None	replace
305	[BUG]  [BUGGY]  result  =  lhType!=  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement;	  result    =    lhType!=    rhType.restrictByNotNullOrUndefined;    	non-compiled	[CE]  orphaned  case	65	None	replace
306	[BUG]  [BUGGY]  result  =  lhType!=  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType!=    rhType.restrictByNotNullOrUndefined;    	non-compiled	[CE]  orphaned  case	65	None	replace
307	[BUG]  [BUGGY]  result  =  lhType!=  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  result    =    lhType!=    rhType.restrictByNotNullOrUndefined;    	non-compiled	[CE]  orphaned  case	65	None	replace
308	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isEmpty()  ||  lhType!=  rhType)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  ||!result.isEmpty()  ||  lhType!=  rhType)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||!result.isEmpty()  ||  lhType!=  rhType)  {  break;  }	  if(result    ==    null    ||!result.isEmpty())    {    break;    }    	non-compiled	[CE]  orphaned  case	75	None	replace
309	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isEmpty()  ||  result!=  null)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  ||!result.isEmpty()  ||  result!=  null)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||!result.isEmpty()  ||  result!=  null)  {  break;  }	  if(result    ==    null    ||!result.isEmpty())    {    break;    }    	non-compiled	[CE]  orphaned  case	75	None	replace
310	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isEmpty()  ||  lhType  ==  rhType)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  ||!result.isEmpty()  ||  lhType  ==  rhType)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||!result.isEmpty()  ||  lhType  ==  rhType)  {  break;  }	  if(result    ==    null    ||!result.isEmpty())    {    break;    }    	non-compiled	[CE]  orphaned  case	75	None	replace
311	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isEmpty()  ||  result  ==  null)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  ||!result.isEmpty()  ||  result  ==  null)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||!result.isEmpty()  ||  result  ==  null)  {  break;  }	  if(result    ==    null    ||!result.isEmpty())    {    break;    }    	non-compiled	[CE]  orphaned  case	75	None	replace
312	[BUG]  [BUGGY]  result  =  lhType!=  rhType  ||  lhType  ==  Token.FALSE;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  rhType  ||  lhType  ==  Token.FALSE;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType  ||  lhType  ==  Token.FALSE;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FALSE;    	non-compiled	[CE]  orphaned  case	13	None	replace
313	[BUG]  [BUGGY]  result  =  lhType  ==  Token.FUNCTION  ||  lhType  ==  Token.FALSE;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  Token.FUNCTION  ||  lhType  ==  Token.FALSE;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  Token.FUNCTION  ||  lhType  ==  Token.FALSE;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FALSE;    	non-compiled	[CE]  orphaned  case	13	None	replace
314	[BUG]  [BUGGY]  result  =  lhType  ==  Token.TRUE  ||  lhType  ==  Token.FALSE;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  Token.TRUE  ||  lhType  ==  Token.FALSE;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  Token.TRUE  ||  lhType  ==  Token.FALSE;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FALSE;    	non-compiled	[CE]  orphaned  case	13	None	replace
315	[BUG]  [BUGGY]  result  =  lhType  ==  Token.FALSE  ||  lhType  ==  Token.TRUE;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  Token.FALSE  ||  lhType  ==  Token.TRUE;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  Token.FALSE  ||  lhType  ==  Token.TRUE;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FALSE;    	non-compiled	[CE]  orphaned  case	13	None	replace
316	[BUG]  [BUGGY]  if(rhType  ==  lh)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType  ==  lh)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType  ==  lh)  {  break;  }	  if(lhType    ==    result)    {    break;    }    	non-compiled	[CE]  orphaned  case	17	None	replace
317	[BUG]  [BUGGY]  return  n.getFirstChild().getNext().getNext();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  n.getFirstChild().getNext().getNext();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  n.getFirstChild().getNext().getNext();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  orphaned  case	56	None	replace
318	[BUG]  [BUGGY]  return  n.getFirstChild().getNext().cloneTree();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  n.getFirstChild().getNext().cloneTree();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  n.getFirstChild().getNext().cloneTree();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  orphaned  case	56	None	replace
319	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isUnknownType()  ||  lhType!=  rhType)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  ||!result.isUnknownType()  ||  lhType!=  rhType)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||!result.isUnknownType()  ||  lhType!=  rhType)  {  break;  }	  if(result    ==    null    ||!result.isUnknownType())    {    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
320	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isUnknownType()  ||  rhType!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  ||!result.isUnknownType()  ||  rhType!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||!result.isUnknownType()  ||  rhType!=  Token.FUNCTION)  {  break;  }	  if(result    ==    null    ||!result.isUnknownType())    {    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
321	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isUnknownType()  ||  result.equals(rhType))  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  ||!result.isUnknownType()  ||  result.equals(rhType))  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||!result.isUnknownType()  ||  result.equals(rhType))  {  break;  }	  if(result    ==    null    ||!result.isUnknownType())    {    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
322	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isUnknownType()  ||  rhType!=  Token.FALSE)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  ||!result.isUnknownType()  ||  rhType!=  Token.FALSE)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||!result.isUnknownType()  ||  rhType!=  Token.FALSE)  {  break;  }	  if(result    ==    null    ||!result.isUnknownType())    {    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
323	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isUnknownType()  ||  rhType!=  Token.NULL)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  ||!result.isUnknownType()  ||  rhType!=  Token.NULL)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||!result.isUnknownType()  ||  rhType!=  Token.NULL)  {  break;  }	  if(result    ==    null    ||!result.isUnknownType())    {    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
324	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType  *  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType  *  1;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType  *  1;	  rhType    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  orphaned  case	20	None	replace
325	[BUG]  [BUGGY]  result  =  lhType!=  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  result    =    lhType!=    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	64	None	replace
326	[BUG]  [BUGGY]  result  =  lhType!=  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement();	  result    =    lhType!=    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	64	None	replace
327	[BUG]  [BUGGY]  result  =  lhType!=  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined();	  result    =    lhType!=    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	64	None	replace
328	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNode);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.replaceChild(left,  newNode);  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.replaceChild(left,  newNode);  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	57	None	replace
329	[BUG]  [BUGGY]  if(compareResult!=  null  &&  result.equals(rhType))  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(compareResult!=  null  &&  result.equals(rhType))  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(compareResult!=  null  &&  result.equals(rhType))  {  break;  }	  if(compareResult!=    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	41	None	replace
330	[BUG]  [BUGGY]  if(compareResult!=  null  &&  result.booleanValue())  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(compareResult!=  null  &&  result.booleanValue())  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(compareResult!=  null  &&  result.booleanValue())  {  break;  }	  if(compareResult!=    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	41	None	replace
331	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType.restrictByNotNullOrUndefined();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType.restrictByNotNullOrUndefined();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType.restrictByNotNullOrUndefined();  break;	  rhType    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	35	None	replace
332	[BUG]  [BUGGY]  rhType  =  lhType  ==  rhType.restrictByNotNullOrUndefined;  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  rhType  =  lhType  ==  rhType.restrictByNotNullOrUndefined;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	rhType  =  lhType  ==  rhType.restrictByNotNullOrUndefined;  break;	  rhType    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	35	None	replace
333	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    break;    	non-compiled	[CE]  orphaned  case	26	None	replace
334	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    break;    	non-compiled	[CE]  orphaned  case	26	None	replace
335	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    break;    	non-compiled	[CE]  orphaned  case	26	None	replace
336	[BUG]  [BUGGY]  return  lhType  ==  rhType  &&!result.booleanValue();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  lhType  ==  rhType  &&!result.booleanValue();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  lhType  ==  rhType  &&!result.booleanValue();	  return    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	36	None	replace
337	[BUG]  [BUGGY]  return  lhType  ==  rhType  &&!result.isEmpty();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  lhType  ==  rhType  &&!result.isEmpty();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  lhType  ==  rhType  &&!result.isEmpty();	  return    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	36	None	replace
338	[BUG]  [BUGGY]  return  n  ==  rhType;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  n  ==  rhType;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  n  ==  rhType;	  return    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	36	None	replace
339	[BUG]  [BUGGY]  return  lhType  ==  rhType  &&!isFunctionDeclaration(n);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  lhType  ==  rhType  &&!isFunctionDeclaration(n);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  lhType  ==  rhType  &&!isFunctionDeclaration(n);	  return    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	36	None	replace
340	[BUG]  [BUGGY]  return  lhType  ==  rhType  &&!op.equals(rhType);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  return  lhType  ==  rhType  &&!op.equals(rhType);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	return  lhType  ==  rhType  &&!op.equals(rhType);	  return    lhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	36	None	replace
341	[BUG]  [BUGGY]  if(result!=  null  &&  rhType  ==  Token.FALSE)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result!=  null  &&  rhType  ==  Token.FALSE)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  null  &&  rhType  ==  Token.FALSE)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.FALSE)    {    break;    }    	non-compiled	[CE]  orphaned  case	62	None	replace
342	[BUG]  [BUGGY]  if(lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.FALSE)    {    break;    }    	non-compiled	[CE]  orphaned  case	62	None	replace
343	[BUG]  [BUGGY]  if(lhType!=  lhType)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(lhType!=  lhType)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(lhType!=  lhType)  {  break;  }	  if(result!=    lhType)    {    break;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
344	[BUG]  [BUGGY]  if(compareResult!=  lhType)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(compareResult!=  lhType)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(compareResult!=  lhType)  {  break;  }	  if(result!=    lhType)    {    break;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
345	[BUG]  [BUGGY]  result  =  lhType  ==  Integer.MIN_VALUE;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  Integer.MIN_VALUE;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  Integer.MIN_VALUE;	  result    =    lhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	63	None	replace
346	[BUG]  [BUGGY]  result  =  lhType  ==  Integer.MAX_VALUE;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  Integer.MAX_VALUE;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  Integer.MAX_VALUE;	  result    =    lhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	63	None	replace
347	[BUG]  [BUGGY]  result  =  lhType  ==  Integer.valueOf(rhType);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  Integer.valueOf(rhType);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  Integer.valueOf(rhType);	  result    =    lhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	63	None	replace
348	[BUG]  [BUGGY]  if(result!=  null  &&  rhType  ==  Token.NULL)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result!=  null  &&  rhType  ==  Token.NULL)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  null  &&  rhType  ==  Token.NULL)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.NULL)    {    break;    }    	non-compiled	[CE]  orphaned  case	61	None	replace
349	[BUG]  [BUGGY]  if(result!=  null  &&  lhType!=  Token.NULL)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result!=  null  &&  lhType!=  Token.NULL)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result!=  null  &&  lhType!=  Token.NULL)  {  break;  }	  if(result!=    null    &&    rhType!=    Token.NULL)    {    break;    }    	non-compiled	[CE]  orphaned  case	61	None	replace
350	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.cloneTree();  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType.cloneTree();  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType.cloneTree();  break;	  result    =    lhType    ==    rhType.toString();    break;    	non-compiled	[CE]  orphaned  case	72	None	replace
351	[BUG]  [BUGGY]  result  =  lhType!=  rhType  ||  lhType  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType!=  rhType  ||  lhType  ==  Token.FUNCTION;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType!=  rhType  ||  lhType  ==  Token.FUNCTION;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	12	None	replace
352	[BUG]  [BUGGY]  result  =  lhType  ==  Token.FUNCTION  ||  lhType  ==  Token.TYPE;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  Token.FUNCTION  ||  lhType  ==  Token.TYPE;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  Token.FUNCTION  ||  lhType  ==  Token.TYPE;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	12	None	replace
353	[BUG]  [BUGGY]  result  =  lhType  ==  Token.FUNCTION  ||  lhType  ==  Token.ALWAYS;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  Token.FUNCTION  ||  lhType  ==  Token.ALWAYS;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  Token.FUNCTION  ||  lhType  ==  Token.ALWAYS;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	12	None	replace
354	[BUG]  [BUGGY]  result  =  lhType  ==  Token.FUNCTION  ||  lhType  ==  Token.LONG;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  Token.FUNCTION  ||  lhType  ==  Token.LONG;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  Token.FUNCTION  ||  lhType  ==  Token.LONG;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	12	None	replace
355	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement();	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	11	None	replace
356	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement();	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	11	None	replace
357	[BUG]  [BUGGY]  n  =  left!=  null?  right.getLastChild()  :  left.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left!=  null?  right.getLastChild()  :  left.getFirstChild();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left!=  null?  right.getLastChild()  :  left.getFirstChild();	  n    =    left!=    null?    left.getLastChild()    :    right.getLastChild();    	non-compiled	[CE]  orphaned  case	45	None	replace
358	[BUG]  [BUGGY]  n  =  left  ==  null?  left.getLastChild()  :  right.getLastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left  ==  null?  left.getLastChild()  :  right.getLastChild();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left  ==  null?  left.getLastChild()  :  right.getLastChild();	  n    =    left!=    null?    left.getLastChild()    :    right.getLastChild();    	non-compiled	[CE]  orphaned  case	45	None	replace
359	[BUG]  [BUGGY]  if(rhType  ==  Token.FUNCTION  ||  op  ==  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(rhType  ==  Token.FUNCTION  ||  op  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(rhType  ==  Token.FUNCTION  ||  op  ==  Token.FUNCTION)  {  break;  }	  if(rhType    ==    Token.FUNCTION    ||    rhType    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	15	None	replace
360	[BUG]  [BUGGY]  result  =  lhType  >>  Token.EQ;  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  >>  Token.EQ;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  >>  Token.EQ;  break;	  result    =    lhType    ==    Token.EQ;    break;    	non-compiled	[CE]  orphaned  case	28	None	replace
361	[BUG]  [BUGGY]  result  =  lhType  >=  Token.EQ;  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  >=  Token.EQ;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  >=  Token.EQ;  break;	  result    =    lhType    ==    Token.EQ;    break;    	non-compiled	[CE]  orphaned  case	28	None	replace
362	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isUndefined()  ||  lhType!=  rhType)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  ||!result.isUndefined()  ||  lhType!=  rhType)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||!result.isUndefined()  ||  lhType!=  rhType)  {  break;  }	  if(result    ==    null    ||!result.isUndefined())    {    break;    }    	non-compiled	[CE]  orphaned  case	76	None	replace
363	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isNone())  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  ||!result.isNone())  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||!result.isNone())  {  break;  }	  if(result    ==    null    ||!result.isUndefined())    {    break;    }    	non-compiled	[CE]  orphaned  case	76	None	replace
364	[BUG]  [BUGGY]  if(result  ==  null  ||  result.equals(null))  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  ||  result.equals(null))  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||  result.equals(null))  {  break;  }	  if(result    ==    null    ||    result.equals(rhType))    {    break;    }    	non-compiled	[CE]  orphaned  case	78	None	replace
365	[BUG]  [BUGGY]  if(result  ==  null  ||  result.equals(right))  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  ||  result.equals(right))  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||  result.equals(right))  {  break;  }	  if(result    ==    null    ||    result.equals(rhType))    {    break;    }    	non-compiled	[CE]  orphaned  case	78	None	replace
366	[BUG]  [BUGGY]  n  =  left.removeFirst();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.removeFirst();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.removeFirst();	  n    =    right.getNext();    	non-compiled	[CE]  orphaned  case	2	None	replace
367	[BUG]  [BUGGY]  n  =  n.replaceChild(left,  newNode);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  n.replaceChild(left,  newNode);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  n.replaceChild(left,  newNode);	  n    =    left.replaceChild(right,    newNode);    	non-compiled	[CE]  orphaned  case	66	None	replace
368	[BUG]  [BUGGY]  n  =  right.replaceChild(left,  n);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  right.replaceChild(left,  n);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  right.replaceChild(left,  n);	  n    =    left.replaceChild(right,    newNode);    	non-compiled	[CE]  orphaned  case	66	None	replace
369	[BUG]  [BUGGY]  n  =  left.replaceChild(right,  n);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.replaceChild(right,  n);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.replaceChild(right,  n);	  n    =    left.replaceChild(right,    newNode);    	non-compiled	[CE]  orphaned  case	66	None	replace
370	[BUG]  [BUGGY]  if(compareResult  ==  null  ||  compareResult.equals(left,  left))  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(compareResult  ==  null  ||  compareResult.equals(left,  left))  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(compareResult  ==  null  ||  compareResult.equals(left,  left))  {  break;  }	  if(compareResult    ==    null    ||    compareResult.equals(left))    {    break;    }    	non-compiled	[CE]  orphaned  case	74	None	replace
371	[BUG]  [BUGGY]  if(compareResult  ==  null  ||  comparisonResult.equals(left))  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(compareResult  ==  null  ||  comparisonResult.equals(left))  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(compareResult  ==  null  ||  comparisonResult.equals(left))  {  break;  }	  if(compareResult    ==    null    ||    compareResult.equals(left))    {    break;    }    	non-compiled	[CE]  orphaned  case	74	None	replace
372	[BUG]  [BUGGY]  if(compareResult  ==  null  ||  compareResult.equals(left)&&  left.getFirstChild()!=  right)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(compareResult  ==  null  ||  compareResult.equals(left)&&  left.getFirstChild()!=  right)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(compareResult  ==  null  ||  compareResult.equals(left)&&  left.getFirstChild()!=  right)  {  break;  }	  if(compareResult    ==    null    ||    compareResult.equals(left))    {    break;    }    	non-compiled	[CE]  orphaned  case	74	None	replace
373	[BUG]  [BUGGY]  if(compareResult  ==  0)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(compareResult  ==  0)  {  break;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(compareResult  ==  0)  {  break;  }	  if(compareResult    ==    lhType)    {    break;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
374	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  n);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left.replaceChild(left,  n);  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left.replaceChild(left,  n);	  n    =    left.removeFirstChild();    	non-compiled	[CE]  orphaned  case	32	None	replace
375	[BUG]  [BUGGY]  if(result  ==  null)  {  return  n;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null)  {  return  n;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null)  {  return  n;  }	  if(result    ==    null)    {    return    result;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
376	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isEmpty())  {  return  result;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  ||!result.isEmpty())  {  return  result;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||!result.isEmpty())  {  return  result;  }	  if(result    ==    null)    {    return    result;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
377	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isUndefined())  {  return  result;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  if(result  ==  null  ||!result.isUndefined())  {  return  result;  }  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	if(result  ==  null  ||!result.isUndefined())  {  return  result;  }	  if(result    ==    null)    {    return    result;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
378	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  3;  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  result  =  lhType  ==  rhType  +  3;  break;  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	result  =  lhType  ==  rhType  +  3;  break;	  result    =    lhType    ==    rhType    +    1;    break;    	non-compiled	[CE]  orphaned  case	27	None	replace
379	[BUG]  [BUGGY]  n  =  left!=  null?  right.getFirstChild()  :  left.getLastChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;      [BUGGY]  n  =  left!=  null?  right.getFirstChild()  :  left.getLastChild();  [BUGGY]        case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	936	936	3	replace	n  =  left!=  null?  right.getFirstChild()  :  left.getLastChild();	  n    =    left!=    null?    left.getFirstChild()    :    left.getLastChild();    	non-compiled	[CE]  orphaned  case	44	None	replace
