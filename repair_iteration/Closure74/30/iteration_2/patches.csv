bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	53	None	replace
2	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree());	  return    tryFoldBinaryOperator(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	53	None	replace
3	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldBinaryOperator(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	39	None	replace
4	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  1);	  return    tryFoldBinaryOperator(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	39	None	replace
5	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right)+  1;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right)+  1;	  return    tryFoldBinaryOperator(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	39	None	replace
6	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  0);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  0);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  0);	  return    tryFoldComparison(subtree,    left,    right,    0);    	non-compiled	[CE]  orphaned  case	28	None	replace
7	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  false);	  return    tryFoldComparison(subtree,    left,    right,    0);    	non-compiled	[CE]  orphaned  case	28	None	replace
8	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  /  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  /  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  /  1);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER    -    1);    	non-compiled	[CE]  orphaned  case	25	None	replace
9	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  -  2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  -  2);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  -  2);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER    -    1);    	non-compiled	[CE]  orphaned  case	25	None	replace
10	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  *  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  *  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  *  1);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER    -    1);    	non-compiled	[CE]  orphaned  case	25	None	replace
11	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1  +  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1  +  1);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER    -    1);    	non-compiled	[CE]  orphaned  case	25	None	replace
12	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  max_FOLD_NUMBER  -  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  max_FOLD_NUMBER  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  max_FOLD_NUMBER  -  1);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER    -    1);    	non-compiled	[CE]  orphaned  case	25	None	replace
13	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneOperator());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneOperator());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneOperator());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneBinaryOperator());    	non-compiled	[CE]  orphaned  case	14	None	replace
14	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneBinaryOperator(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneBinaryOperator(),  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneBinaryOperator(),  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneBinaryOperator());    	non-compiled	[CE]  orphaned  case	14	None	replace
15	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTreeOperator());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTreeOperator());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTreeOperator());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneBinaryOperator());    	non-compiled	[CE]  orphaned  case	14	None	replace
16	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneNode());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneNode());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneNode());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneBinaryOperator());    	non-compiled	[CE]  orphaned  case	14	None	replace
17	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	1	None	replace
18	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  double_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  double_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  double_FOLD_NUMBER);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	1	None	replace
19	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  2);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  2);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	1	None	replace
20	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  result);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  result);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	1	None	replace
21	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);	  return    tryFoldMutator(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	33	None	replace
22	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  result);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  result);	  return    tryFoldMutator(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	33	None	replace
23	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  subtree.cloneTree());	  return    tryFoldMutator(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	33	None	replace
24	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  subtree,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  subtree,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  subtree,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldMutator(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	33	None	replace
25	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);	  return    tryFoldLeftChildOp(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	48	None	replace
26	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  0);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  0);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  0);	  return    tryFoldLeftChildOp(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	48	None	replace
27	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right  -  3);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right  -  3);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right  -  3);	  return    tryFoldComparison(subtree,    left,    right    -    2);    	non-compiled	[CE]  orphaned  case	26	None	replace
28	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right  -  2);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right  -  2);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right  -  2);	  return    tryFoldComparison(subtree,    left,    right    -    2);    	non-compiled	[CE]  orphaned  case	26	None	replace
29	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right  -  4);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right  -  4);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right  -  4);	  return    tryFoldComparison(subtree,    left,    right    -    2);    	non-compiled	[CE]  orphaned  case	26	None	replace
30	[BUG]  [BUGGY]  return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperatorChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	37	None	replace
31	[BUG]  [BUGGY]  return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldBinaryOperatorChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	37	None	replace
32	[BUG]  [BUGGY]  return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  false);	  return    tryFoldBinaryOperatorChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	37	None	replace
33	[BUG]  [BUGGY]  return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  subtree);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  subtree);	  return    tryFoldBinaryOperatorChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	37	None	replace
34	[BUG]  [BUGGY]  return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  this);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  this);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  this);	  return    tryFoldBinaryOperatorChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	37	None	replace
35	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildOp(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildOp(),  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildOp(),  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneChildOp());    	non-compiled	[CE]  orphaned  case	63	None	replace
36	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildOp(),  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildOp(),  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildOp(),  1);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneChildOp());    	non-compiled	[CE]  orphaned  case	63	None	replace
37	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildOp(),  this);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildOp(),  this);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildOp(),  this);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneChildOp());    	non-compiled	[CE]  orphaned  case	63	None	replace
38	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left);	  return    tryFoldLeftChildOp(subtree);    	non-compiled	[CE]  orphaned  case	22	None	replace
39	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(left,  right);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(left,  right);	  return    tryFoldLeftChildOp(subtree);    	non-compiled	[CE]  orphaned  case	22	None	replace
40	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(left,  subtree);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(left,  subtree);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(left,  subtree);	  return    tryFoldLeftChildOp(subtree);    	non-compiled	[CE]  orphaned  case	22	None	replace
41	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(second,  subtree);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(second,  subtree);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(second,  subtree);	  return    tryFoldLeftChildOp(subtree);    	non-compiled	[CE]  orphaned  case	22	None	replace
42	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  0);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  0);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  0);	  return    tryFoldMoveChildOp(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	35	None	replace
43	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldMoveChildOp(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	35	None	replace
44	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  1);	  return    tryFoldMoveChildOp(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	35	None	replace
45	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  double_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  double_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  double_FOLD_NUMBER);	  return    tryFoldMoveChildOp(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	35	None	replace
46	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  null);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  null);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  null);	  return    tryFoldMoveChildOp(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	75	None	replace
47	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  this);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  this);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  this);	  return    tryFoldMoveChildOp(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	75	None	replace
48	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  this,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  this,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  this,  MAX_FOLD_NUMBER);	  return    tryFoldMoveChildOp(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	75	None	replace
49	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);	  return    tryFoldBinaryOperator(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	51	None	replace
50	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldBinaryOperator(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	51	None	replace
51	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	51	None	replace
52	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldBinaryOperator(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	51	None	replace
53	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	51	None	replace
54	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right),  MAX_FOLD_NUMBER  +  1);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right),  MAX_FOLD_NUMBER  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right),  MAX_FOLD_NUMBER  +  1);	  return    tryFoldMinimumChildOp(subtree,    left,    right    +    1);    	non-compiled	[CE]  ';'  expected	65	None	replace
55	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.type);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.type);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.type);	  return    tryFoldLeftChildOp(subtree,    left,    right,    value);    	non-compiled	[CE]  orphaned  case	72	None	replace
56	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  size);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  size);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  size);	  return    tryFoldLeftChildOp(subtree,    left,    right,    value);    	non-compiled	[CE]  orphaned  case	72	None	replace
57	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  2);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  2);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  2);	  return    tryFoldComparison(subtree,    left,    right,    2);    	non-compiled	[CE]  orphaned  case	49	None	replace
58	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  2  -  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  2  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  2  -  1);	  return    tryFoldComparison(subtree,    left,    right,    2);    	non-compiled	[CE]  orphaned  case	49	None	replace
59	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  true);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  true);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  true);	  return    tryFoldMoveChildOp(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	36	None	replace
60	[BUG]  [BUGGY]  return  tryFoldChildOp(subtree,  left,  right,  true);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldChildOp(subtree,  left,  right,  true);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldChildOp(subtree,  left,  right,  true);	  return    tryFoldMoveChildOp(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	36	None	replace
61	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  3);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  3);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  3);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    1);    	non-compiled	[CE]  orphaned  case	4	None	replace
62	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  4);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  4);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  4);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    1);    	non-compiled	[CE]  orphaned  case	4	None	replace
63	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  5);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  5);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  5);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    1);    	non-compiled	[CE]  orphaned  case	4	None	replace
64	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  4);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  4);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  4);	  return    tryFoldComparison(subtree,    left,    right,    4);    	non-compiled	[CE]  orphaned  case	50	None	replace
65	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  5);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  5);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  5);	  return    tryFoldComparison(subtree,    left,    right,    4);    	non-compiled	[CE]  orphaned  case	50	None	replace
66	[BUG]  [BUGGY]  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);	  tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	55	None	replace
67	[BUG]  [BUGGY]  tryFoldLeftChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  tryFoldLeftChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	tryFoldLeftChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);	  tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	55	None	replace
68	[BUG]  [BUGGY]  tryFoldLeftChildOp(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  tryFoldLeftChildOp(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	tryFoldLeftChildOp(subtree,  left,  right,  BITWISE_OPERAND);	  tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	55	None	replace
69	[BUG]  [BUGGY]  tryFoldLeftChildOp(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  tryFoldLeftChildOp(subtree,  left,  right,  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	tryFoldLeftChildOp(subtree,  left,  right,  false);	  tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	55	None	replace
70	[BUG]  [BUGGY]  tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneTree());	  tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	55	None	replace
71	[BUG]  [BUGGY]  tryFoldLeftChildOp(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  tryFoldLeftChildOp(subtree,  left,  right,  subtree);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	tryFoldLeftChildOp(subtree,  left,  right,  subtree);	  tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	55	None	replace
72	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	2	None	replace
73	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	2	None	replace
74	[BUG]  [BUGGY]  Return  tryFoldMinimumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Return  tryFoldMinimumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Return  tryFoldMinimumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  ';'  expected	2	None	replace
75	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  SHIFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  SHIFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  SHIFT_AMOUNT_OUT_OF_BOUNDS);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	2	None	replace
76	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	2	None	replace
77	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  SHIFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  SHIFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  SHIFT_AMOUNT_OUT_OF_BOUNDS);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	2	None	replace
78	[BUG]  [BUGGY]  return  tryFoldMaximumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMaximumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMaximumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldMaximumChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	68	None	replace
79	[BUG]  [BUGGY]  return  tryFoldMaximumChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMaximumChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMaximumChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldMaximumChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	68	None	replace
80	[BUG]  [BUGGY]  return  tryFoldMaximumChildOp(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMaximumChildOp(subtree,  left,  right,  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMaximumChildOp(subtree,  left,  right,  false);	  return    tryFoldMaximumChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	68	None	replace
81	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);	  return    tryFoldLeftChildOp(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	47	None	replace
82	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  token);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  token);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  token);	  return    tryFoldLeftChildOp(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	47	None	replace
83	[BUG]  [BUGGY]  return  tryFoldComparison(this.subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(this.subtree,  left,  right,  subtree.cloneTree());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(this.subtree,  left,  right,  subtree.cloneTree());	  return    tryFoldComparison(subtree,    left,    right,    this.subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	85	None	replace
84	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneTree(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneTree(),  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneTree(),  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    this.subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	85	None	replace
85	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.subtree.clone());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.subtree.clone());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  this.subtree.clone());	  return    tryFoldComparison(subtree,    left,    right,    this.subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	85	None	replace
86	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneBinaryOperator());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneBinaryOperator());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneBinaryOperator());	  return    tryFoldComparison(subtree,    left,    right,    this.subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	85	None	replace
87	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneTree(),  this.mode);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneTree(),  this.mode);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneTree(),  this.mode);	  return    tryFoldComparison(subtree,    left,    right,    this.subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	85	None	replace
88	[BUG]  [BUGGY]  return  tryFoldComparison(this.subtree,  left,  right,  this.subtree.cloneTree());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(this.subtree,  left,  right,  this.subtree.cloneTree());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(this.subtree,  left,  right,  this.subtree.cloneTree());	  return    tryFoldComparison(subtree,    left,    right,    this.subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	85	None	replace
89	[BUG]  [BUGGY]  return  tryFoldMaximumChildOp(subtree,  left,  right,  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMaximumChildOp(subtree,  left,  right,  true);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMaximumChildOp(subtree,  left,  right,  true);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    true);    	non-compiled	[CE]  orphaned  case	6	None	replace
90	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  true);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  true);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  true);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    true);    	non-compiled	[CE]  orphaned  case	6	None	replace
91	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  null);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  null);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  null);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    true);    	non-compiled	[CE]  orphaned  case	6	None	replace
92	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	43	None	replace
93	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  double_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  double_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  double_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree(),    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	12	None	replace
94	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  double);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  double);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  double);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree(),    MAX_FOLD_NUMBER);    	non-compiled	[CE]  '.class'  expected	12	None	replace
95	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  2);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  2);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  2);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree(),    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	12	None	replace
96	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  4);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  4);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  4);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree(),    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	12	None	replace
97	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  3);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  3);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  3);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree(),    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	12	None	replace
98	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  null);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  null);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  null);	  return    tryFoldBinaryOperator(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	11	None	replace
99	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  this,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  this,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  this,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	11	None	replace
100	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldLeftChildOp(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	40	None	replace
101	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right)+  1;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right)+  1;	  return    tryFoldLeftChildOp(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	40	None	replace
102	[BUG]  [BUGGY]  return  tryFoldRightChildOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldRightChildOp(subtree,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldRightChildOp(subtree,  left,  right);	  return    tryFoldLeftChildOp(null,    left,    right);    	non-compiled	[CE]  orphaned  case	21	None	replace
103	[BUG]  [BUGGY]  return  tryFoldFirstChildOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldFirstChildOp(subtree,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldFirstChildOp(subtree,  left,  right);	  return    tryFoldLeftChildOp(null,    left,    right);    	non-compiled	[CE]  orphaned  case	21	None	replace
104	[BUG]  [BUGGY]  return  tryFoldLaftChildOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLaftChildOp(subtree,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLaftChildOp(subtree,  left,  right);	  return    tryFoldLeftChildOp(null,    left,    right);    	non-compiled	[CE]  orphaned  case	21	None	replace
105	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtrae,  left,  right);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtrae,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtrae,  left,  right);	  return    tryFoldLeftChildOp(null,    left,    right);    	non-compiled	[CE]  orphaned  case	21	None	replace
106	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  right,  left);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  right,  left);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  right,  left);	  return    tryFoldLeftChildOp(null,    left,    right);    	non-compiled	[CE]  orphaned  case	21	None	replace
107	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  result);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  result);	  return    tryFoldMoveChildOp(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	38	None	replace
108	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);	  return    tryFoldMoveChildOp(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	38	None	replace
109	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  this);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  this);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  this);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree(),    ROOT_LOCALE);    	non-compiled	[CE]  orphaned  case	84	None	replace
110	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  result);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  result);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  result);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree(),    ROOT_LOCALE);    	non-compiled	[CE]  orphaned  case	84	None	replace
111	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  Token.BLOCK);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  Token.BLOCK);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  Token.BLOCK);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree(),    ROOT_LOCALE);    	non-compiled	[CE]  orphaned  case	84	None	replace
112	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  Token.FUNCTION);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  Token.FUNCTION);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  Token.FUNCTION);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree(),    ROOT_LOCALE);    	non-compiled	[CE]  orphaned  case	84	None	replace
113	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  1);	  return    tryFoldLeftChildOp(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	44	None	replace
114	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  double_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  double_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  double_FOLD_NUMBER);	  return    tryFoldLeftChildOp(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	44	None	replace
115	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  3);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  3);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  3);	  return    tryFoldComparison(subtree,    left,    right,    3);    	non-compiled	[CE]  orphaned  case	82	None	replace
116	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right  +  2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right  +  2);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right  +  2);	  return    tryFoldComparison(subtree,    left,    right    +    2);    	non-compiled	[CE]  orphaned  case	64	None	replace
117	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)+  2;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right)+  2;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)+  2;	  return    tryFoldComparison(subtree,    left,    right    +    2);    	non-compiled	[CE]  orphaned  case	64	None	replace
118	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)/  MAX_FOLD_NUMBER  +  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right)/  MAX_FOLD_NUMBER  +  1;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)/  MAX_FOLD_NUMBER  +  1;	  return    tryFoldComparison(subtree,    left,    right),    MAX_FOLD_NUMBER    +    1);    	non-compiled	[CE]  orphaned  case	83	None	replace
119	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right),  MAX_FOLD_NUMBER  +  2;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right),  MAX_FOLD_NUMBER  +  2;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right),  MAX_FOLD_NUMBER  +  2;	  return    tryFoldComparison(subtree,    left,    right),    MAX_FOLD_NUMBER    +    1);    	non-compiled	[CE]  ';'  expected	83	None	replace
120	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right),  MAX_FOLD_NUMBER  +  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right),  MAX_FOLD_NUMBER  +  1;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right),  MAX_FOLD_NUMBER  +  1;	  return    tryFoldComparison(subtree,    left,    right),    MAX_FOLD_NUMBER    +    1);    	non-compiled	[CE]  ';'  expected	83	None	replace
121	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right),  MAX_FOLD_NUMBER  +  1  -  1;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right),  MAX_FOLD_NUMBER  +  1  -  1;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right),  MAX_FOLD_NUMBER  +  1  -  1;	  return    tryFoldComparison(subtree,    left,    right),    MAX_FOLD_NUMBER    +    1);    	non-compiled	[CE]  ';'  expected	83	None	replace
122	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right),  MAX_FOLD_NUMBER  +  2);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right),  MAX_FOLD_NUMBER  +  2);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right),  MAX_FOLD_NUMBER  +  2);	  return    tryFoldComparison(subtree,    left,    right),    MAX_FOLD_NUMBER    +    1);    	non-compiled	[CE]  ';'  expected	83	None	replace
123	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)-  MAX_FOLD_NUMBER  +  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right)-  MAX_FOLD_NUMBER  +  1;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)-  MAX_FOLD_NUMBER  +  1;	  return    tryFoldComparison(subtree,    left,    right),    MAX_FOLD_NUMBER    +    1);    	non-compiled	[CE]  orphaned  case	83	None	replace
124	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldLeftChildOp(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	45	None	replace
125	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  FIELD_BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  FIELD_BITWISE_OPERAND);	  return    tryFoldLeftChildOp(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	45	None	replace
126	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);	  return    tryFoldLeftChildOp(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	45	None	replace
127	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldLeftChildOp(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	24	None	replace
128	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right)-  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right)-  1;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right)-  1;	  return    tryFoldLeftChildOp(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	24	None	replace
129	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);	  return    tryFoldLeftChildOp(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	24	None	replace
130	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	42	None	replace
131	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  double_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  double_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  double_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	42	None	replace
132	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  0);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  0);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  0);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	42	None	replace
133	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  1);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	42	None	replace
134	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER;  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER;	  return    tryFoldComparison(subtree,    left,    right,    subtree,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  ')'  expected	42	None	replace
135	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldMoveChildOp(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	59	None	replace
136	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldMoveChildOp(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	59	None	replace
137	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  FIELD_BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  FIELD_BITWISE_OPERAND);	  return    tryFoldMoveChildOp(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	59	None	replace
138	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldMoveChildOp(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	59	None	replace
139	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldMutator(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	58	None	replace
140	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right  -  1);	  return    tryFoldMutator(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	58	None	replace
141	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right)+  1;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right)+  1;	  return    tryFoldMutator(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	58	None	replace
142	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left);	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	54	None	replace
143	[BUG]  [BUGGY]  return  tryFoldLastChildOp(subtree);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLastChildOp(subtree);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLastChildOp(subtree);	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	54	None	replace
144	[BUG]  [BUGGY]  return  tryFoldLastChildOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLastChildOp(subtree,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLastChildOp(subtree,  left,  right);	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	54	None	replace
145	[BUG]  [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	20	None	replace
146	[BUG]  [BUGGY]  Node  result  =  tryFoldBinaryOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldBinaryOperator(subtree,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldBinaryOperator(subtree,  left,  right);	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	20	None	replace
147	[BUG]  [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  subtree);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  subtree);	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	20	None	replace
148	[BUG]  [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneTree());	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	20	None	replace
149	[BUG]  [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	20	None	replace
150	[BUG]  [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  false);	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	20	None	replace
151	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.clone());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.clone());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.clone());	  return    tryFoldLeftChildOp(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	62	None	replace
152	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);	  return    tryFoldLeftChildOp(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	62	None	replace
153	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  result.cloneTree());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  result.cloneTree());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  result.cloneTree());	  return    tryFoldLeftChildOp(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	62	None	replace
154	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.clonePosition());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.clonePosition());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.clonePosition());	  return    tryFoldLeftChildOp(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	62	None	replace
155	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneBinaryOperator());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneBinaryOperator());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneBinaryOperator());	  return    tryFoldLeftChildOp(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	62	None	replace
156	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  token.cloneTree());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  token.cloneTree());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  token.cloneTree());	  return    tryFoldLeftChildOp(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	62	None	replace
157	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);	  return    tryFoldMoveChildOp(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	76	None	replace
158	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.clone());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.clone());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.clone());	  return    tryFoldMoveChildOp(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	76	None	replace
159	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  result.cloneTree());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  result.cloneTree());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  result.cloneTree());	  return    tryFoldMoveChildOp(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	76	None	replace
160	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.cloneBinaryOperator());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.cloneBinaryOperator());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.cloneBinaryOperator());	  return    tryFoldMoveChildOp(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	76	None	replace
161	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.cloneTree(),  this);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.cloneTree(),  this);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.cloneTree(),  this);	  return    tryFoldMoveChildOp(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	76	None	replace
162	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.clonePosition());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.clonePosition());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.clonePosition());	  return    tryFoldMoveChildOp(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	76	None	replace
163	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(null,  left,  right,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(null,  left,  right,  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(null,  left,  right,  false);	  return    tryFoldLeftChildOp(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	46	None	replace
164	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  right,  left,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  right,  left,  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  right,  left,  false);	  return    tryFoldLeftChildOp(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	46	None	replace
165	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  null);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  null);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  null);	  return    tryFoldLeftChildOp(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	46	None	replace
166	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldBinaryOperator(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	23	None	replace
167	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLocalOperator(subtree,  left,  right  -  1);	  return    tryFoldBinaryOperator(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	23	None	replace
168	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  token.cloneTree(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  token.cloneTree(),  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  token.cloneTree(),  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    token.cloneTree());    	non-compiled	[CE]  orphaned  case	86	None	replace
169	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  parent.cloneTree());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  parent.cloneTree());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  parent.cloneTree());	  return    tryFoldComparison(subtree,    left,    right,    token.cloneTree());    	non-compiled	[CE]  orphaned  case	86	None	replace
170	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result.cloneTree());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result.cloneTree());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  result.cloneTree());	  return    tryFoldComparison(subtree,    left,    right,    token.cloneTree());    	non-compiled	[CE]  orphaned  case	86	None	replace
171	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	9	None	replace
172	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  0);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  0);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  0);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree(),    1);    	non-compiled	[CE]  orphaned  case	15	None	replace
173	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  5);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  5);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  5);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree(),    1);    	non-compiled	[CE]  orphaned  case	15	None	replace
174	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  6);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  6);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  6);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree(),    1);    	non-compiled	[CE]  orphaned  case	15	None	replace
175	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(null,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(null,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(null,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldMinimumChildOp(null,    left,    right);    	non-compiled	[CE]  orphaned  case	69	None	replace
176	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtrae,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtrae,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtrae,  left,  right);	  return    tryFoldMinimumChildOp(null,    left,    right);    	non-compiled	[CE]  orphaned  case	69	None	replace
177	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  right,  left);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  right,  left);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  right,  left);	  return    tryFoldMinimumChildOp(null,    left,    right);    	non-compiled	[CE]  orphaned  case	69	None	replace
178	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(null,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(null,  left,  right,  subtree);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(null,  left,  right,  subtree);	  return    tryFoldMinimumChildOp(null,    left,    right);    	non-compiled	[CE]  orphaned  case	69	None	replace
179	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right  -  1,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right  -  1,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right  -  1,  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right    -    1    +    1);    	non-compiled	[CE]  orphaned  case	60	None	replace
180	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right  /  1  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right  /  1  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right  /  1  +  1);	  return    tryFoldComparison(subtree,    left,    right    -    1    +    1);    	non-compiled	[CE]  orphaned  case	60	None	replace
181	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right  -  1,  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right  -  1,  MAX_FOLD_NUMBER  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right  -  1,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldComparison(subtree,    left,    right    -    1    +    1);    	non-compiled	[CE]  orphaned  case	60	None	replace
182	[BUG]  [BUGGY]  Node  result  =  tryFoldBinaryOperator(subtree,  left,  right);  return  tryFoldLeftChildOp(result,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldBinaryOperator(subtree,  left,  right);  return  tryFoldLeftChildOp(result,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldBinaryOperator(subtree,  left,  right);  return  tryFoldLeftChildOp(result,  left,  right);	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    return    tryFoldLeftChildOp(result,    left,    right);    	non-compiled	[CE]  orphaned  case	70	None	replace
183	[BUG]  [BUGGY]  Node  result  =  tryFoldFirstChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(result,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldFirstChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(result,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldFirstChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(result,  left,  right);	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    return    tryFoldLeftChildOp(result,    left,    right);    	non-compiled	[CE]  orphaned  case	70	None	replace
184	[BUG]  [BUGGY]  Node  result  =  tryFoldLeftChildOp(null,  left,  right);  return  tryFoldLeftChildOp(result,  left,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldLeftChildOp(null,  left,  right);  return  tryFoldLeftChildOp(result,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldLeftChildOp(null,  left,  right);  return  tryFoldLeftChildOp(result,  left,  right);	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    return    tryFoldLeftChildOp(result,    left,    right);    	non-compiled	[CE]  orphaned  case	70	None	replace
185	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildren(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildren(),  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildren(),  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneChildren());    	non-compiled	[CE]  orphaned  case	16	None	replace
186	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneNodeChildren());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneNodeChildren());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneNodeChildren());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneChildren());    	non-compiled	[CE]  orphaned  case	16	None	replace
187	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildren(),  1);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildren(),  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildren(),  1);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneChildren());    	non-compiled	[CE]  orphaned  case	16	None	replace
188	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)/  2;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right)/  2;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)/  2;	  return    tryFoldComparison(subtree,    left,    right)/    1;    	non-compiled	[CE]  orphaned  case	77	None	replace
189	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)/  3;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right)/  3;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)/  3;	  return    tryFoldComparison(subtree,    left,    right)/    1;    	non-compiled	[CE]  orphaned  case	77	None	replace
190	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)/  4;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right)/  4;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)/  4;	  return    tryFoldComparison(subtree,    left,    right)/    1;    	non-compiled	[CE]  orphaned  case	77	None	replace
191	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right)/  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right)/  1;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right)/  1;	  return    tryFoldComparison(subtree,    left,    right)/    1;    	non-compiled	[CE]  orphaned  case	77	None	replace
192	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right)/  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right)/  1;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right)/  1;	  return    tryFoldComparison(subtree,    left,    right)/    1;    	non-compiled	[CE]  orphaned  case	77	None	replace
193	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree()  +  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree()  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree()  +  1);	  return    tryFoldComparison(subtree,    left,    right,    subtree    +    1);    	non-compiled	[CE]  orphaned  case	56	None	replace
194	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree  +  2);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree  +  2);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree  +  2);	  return    tryFoldComparison(subtree,    left,    right,    subtree    +    1);    	non-compiled	[CE]  orphaned  case	56	None	replace
195	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.nextToken()  +  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.nextToken()  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.nextToken()  +  1);	  return    tryFoldComparison(subtree,    left,    right,    subtree    +    1);    	non-compiled	[CE]  orphaned  case	56	None	replace
196	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result  +  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  result  +  1);	  return    tryFoldComparison(subtree,    left,    right,    subtree    +    1);    	non-compiled	[CE]  orphaned  case	56	None	replace
197	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	52	None	replace
198	[BUG]  [BUGGY]  default:  return  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  default:  return  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	default:  return  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);	  default:    return    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	18	None	replace
199	[BUG]  [BUGGY]  default:  return  tryFoldBinaryOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  default:  return  tryFoldBinaryOperator(subtree,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	default:  return  tryFoldBinaryOperator(subtree,  left,  right);	  default:    return    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	18	None	replace
200	[BUG]  [BUGGY]  default:  return  tryFoldLeftChildOp(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  default:  return  tryFoldLeftChildOp(subtree,  left,  right,  result);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	default:  return  tryFoldLeftChildOp(subtree,  left,  right,  result);	  default:    return    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	18	None	replace
201	[BUG]  [BUGGY]  default:  return  tryFoldLeftChildOp(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  default:  return  tryFoldLeftChildOp(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	default:  return  tryFoldLeftChildOp(subtree,  left,  right,  BITWISE_OPERAND);	  default:    return    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	18	None	replace
202	[BUG]  [BUGGY]  default:  return  tryFoldLeftChildOp(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  default:  return  tryFoldLeftChildOp(subtree,  left,  right,  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	default:  return  tryFoldLeftChildOp(subtree,  left,  right,  false);	  default:    return    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	18	None	replace
203	[BUG]  [BUGGY]  default:  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  default:  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	default:  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree);	  default:    return    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	18	None	replace
204	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)-  2;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right)-  2;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)-  2;	  return    tryFoldComparison(subtree,    left,    right)-    1;    	non-compiled	[CE]  orphaned  case	61	None	replace
205	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right)-  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right)-  1;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right)-  1;	  return    tryFoldComparison(subtree,    left,    right)-    1;    	non-compiled	[CE]  orphaned  case	61	None	replace
206	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)-  1  +  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right)-  1  +  1;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)-  1  +  1;	  return    tryFoldComparison(subtree,    left,    right)-    1;    	non-compiled	[CE]  orphaned  case	61	None	replace
207	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	74	None	replace
208	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	74	None	replace
209	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	74	None	replace
210	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  result,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	74	None	replace
211	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	74	None	replace
212	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  SHIFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  SHIFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  SHIFT_AMOUNT_OUT_OF_BOUNDS);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	74	None	replace
213	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	74	None	replace
214	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(null,  left,  right,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(null,  left,  right,  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(null,  left,  right,  false);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	3	None	replace
215	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  right,  left,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  right,  left,  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  right,  left,  false);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	3	None	replace
216	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right,  true);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLocalOperator(subtree,  left,  right,  true);	  return    tryFoldBinaryOperator(subtree,    left,    right,    true);    	non-compiled	[CE]  orphaned  case	10	None	replace
217	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldOperator(subtree,  left,  right,  false);	  return    tryFoldBinaryOperator(subtree,    left,    right,    true);    	non-compiled	[CE]  orphaned  case	10	None	replace
218	[BUG]  [BUGGY]  return  tryFoldUnknownOperator(subtree,  left,  right,  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldUnknownOperator(subtree,  left,  right,  true);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldUnknownOperator(subtree,  left,  right,  true);	  return    tryFoldBinaryOperator(subtree,    left,    right,    true);    	non-compiled	[CE]  orphaned  case	10	None	replace
219	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	78	None	replace
220	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  FIELD_BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  FIELD_BITWISE_OPERAND);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	78	None	replace
221	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  this.BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  this.BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  this.BITWISE_OPERAND);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	78	None	replace
222	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  this.bitWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  this.bitWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  this.bitWISE_OPERAND);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	78	None	replace
223	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right,  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLocalOperator(subtree,  left,  right,  false);	  return    tryFoldBinaryOperator(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	8	None	replace
224	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  this,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  this,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  this,  MAX_FOLD_NUMBER);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	79	None	replace
225	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  subtree);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  subtree);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	79	None	replace
226	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldMutator(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	57	None	replace
227	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldMutator(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	57	None	replace
228	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);	  return    tryFoldMutator(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	57	None	replace
229	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  null);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  null);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  null);	  return    tryFoldMutator(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	81	None	replace
230	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  this,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  this,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  this,  MAX_FOLD_NUMBER);	  return    tryFoldMutator(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	81	None	replace
231	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  0);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  0);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  0);	  return    tryFoldMutator(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	81	None	replace
232	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  +  2);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  +  2);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  +  2);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER    +    1);    	non-compiled	[CE]  orphaned  case	27	None	replace
233	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1  -  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1  -  1);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER    +    1);    	non-compiled	[CE]  orphaned  case	27	None	replace
234	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  +  3);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  +  3);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  +  3);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER    +    1);    	non-compiled	[CE]  orphaned  case	27	None	replace
235	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  max_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  max_FOLD_NUMBER  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  max_FOLD_NUMBER  +  1);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER    +    1);    	non-compiled	[CE]  orphaned  case	27	None	replace
236	[BUG]  [BUGGY]  Node  result  =  tryFoldBinaryOperator(subtree,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldBinaryOperator(subtree,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldBinaryOperator(subtree,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  right);	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    return    tryFoldLeftChildOp(subtree,    result,    right);    	non-compiled	[CE]  orphaned  case	71	None	replace
237	[BUG]  [BUGGY]  Node  result  =  tryFoldFirstChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldFirstChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldFirstChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  right);	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    return    tryFoldLeftChildOp(subtree,    result,    right);    	non-compiled	[CE]  orphaned  case	71	None	replace
238	[BUG]  [BUGGY]  Node  result  =  tryFoldLeftChildOp(null,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldLeftChildOp(null,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldLeftChildOp(null,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  right);	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    return    tryFoldLeftChildOp(subtree,    result,    right);    	non-compiled	[CE]  orphaned  case	71	None	replace
239	[BUG]  [BUGGY]  Node  result  =  tryFoldCallOperator(subtree,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  right);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldCallOperator(subtree,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldCallOperator(subtree,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  right);	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    return    tryFoldLeftChildOp(subtree,    result,    right);    	non-compiled	[CE]  orphaned  case	71	None	replace
240	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    subtree.clone());    	non-compiled	[CE]  orphaned  case	13	None	replace
241	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result.clone());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result.clone());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  result.clone());	  return    tryFoldComparison(subtree,    left,    right,    subtree.clone());    	non-compiled	[CE]  orphaned  case	13	None	replace
242	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.clone());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.clone());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.clone());	  return    tryFoldComparison(subtree,    left,    right,    subtree.clone());    	non-compiled	[CE]  orphaned  case	13	None	replace
243	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clone(),  1);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clone(),  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.clone(),  1);	  return    tryFoldComparison(subtree,    left,    right,    subtree.clone());    	non-compiled	[CE]  orphaned  case	13	None	replace
244	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clone(),  false);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clone(),  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.clone(),  false);	  return    tryFoldComparison(subtree,    left,    right,    subtree.clone());    	non-compiled	[CE]  orphaned  case	13	None	replace
245	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldMinimumChildOp(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	66	None	replace
246	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right)-  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right)-  1;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right)-  1;	  return    tryFoldMinimumChildOp(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	66	None	replace
247	[BUG]  [BUGGY]  return  tryFoldMaximumChildOp(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMaximumChildOp(subtree,  left,  right  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMaximumChildOp(subtree,  left,  right  -  1);	  return    tryFoldMinimumChildOp(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	66	None	replace
248	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right  -  2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right  -  2);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right  -  2);	  return    tryFoldMinimumChildOp(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	66	None	replace
249	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR);	  return    tryFoldMutator(subtree,    left,    right,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	32	None	replace
250	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);	  return    tryFoldMutator(subtree,    left,    right,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	32	None	replace
251	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  SHIFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  SHIFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  SHIFT_AMOUNT_OUT_OF_BOUNDS);	  return    tryFoldMutator(subtree,    left,    right,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	32	None	replace
252	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldMutator(subtree,    left,    right,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	32	None	replace
253	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER);	  return    tryFoldMutator(subtree,    left,    right,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	32	None	replace
254	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_OPERAND);	  return    tryFoldMutator(subtree,    left,    right,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	32	None	replace
255	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  double_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  double_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  double_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    double_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	30	None	replace
256	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  max_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  max_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  max_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    double_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	30	None	replace
257	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER;  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER;	  return    tryFoldComparison(subtree,    left,    right,    double_FOLD_NUMBER);    	non-compiled	[CE]  ')'  expected	30	None	replace
258	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MULTIPLE_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MULTIPLE_BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  MULTIPLE_BITWISE_OPERAND);	  return    tryFoldMutator(subtree,    left,    right,    MULTIPLE_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	80	None	replace
259	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MULTIPLE_BITWISE_OPERAND,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MULTIPLE_BITWISE_OPERAND,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  MULTIPLE_BITWISE_OPERAND,  MAX_FOLD_NUMBER);	  return    tryFoldMutator(subtree,    left,    right,    MULTIPLE_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	80	None	replace
260	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clonePosition(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clonePosition(),  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.clonePosition(),  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    subtree.clonePosition());    	non-compiled	[CE]  orphaned  case	17	None	replace
261	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clonePosition()  +  1);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clonePosition()  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.clonePosition()  +  1);	  return    tryFoldComparison(subtree,    left,    right,    subtree.clonePosition());    	non-compiled	[CE]  orphaned  case	17	None	replace
262	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right)/  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right)/  1;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right)/  1;	  return    tryFoldMinimumChildOp(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	67	None	replace
263	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right)+  2;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right)+  2;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right)+  2;	  return    tryFoldMinimumChildOp(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	67	None	replace
264	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right)+  0;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right)+  0;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right)+  0;	  return    tryFoldMinimumChildOp(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	67	None	replace
265	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right)+  3;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right)+  3;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right)+  3;	  return    tryFoldMinimumChildOp(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	67	None	replace
266	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right)+  4;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right)+  4;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right)+  4;	  return    tryFoldMinimumChildOp(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	67	None	replace
267	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldMutator(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	31	None	replace
268	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  1);	  return    tryFoldMutator(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	31	None	replace
269	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NON_NUMBER_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	73	None	replace
270	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR,  NEGATING_A_NON_NUMBER_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	73	None	replace
271	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	73	None	replace
272	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  NEGATING_A_NON_NUMBER_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	73	None	replace
273	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NON_NUMBER_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	73	None	replace
274	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)+  0;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right)+  0;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)+  0;	  return    tryFoldComparison(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	41	None	replace
275	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)+  3;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right)+  3;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)+  3;	  return    tryFoldComparison(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	41	None	replace
276	[BUG]  [BUGGY]  result  =  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  result  =  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	result  =  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);	  result    =    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	19	None	replace
277	[BUG]  [BUGGY]  result  =  tryFoldLeftChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  result  =  tryFoldLeftChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	result  =  tryFoldLeftChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);	  result    =    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	19	None	replace
278	[BUG]  [BUGGY]  result  =  tryFoldLeftChildOp(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  result  =  tryFoldLeftChildOp(subtree,  left,  right,  subtree);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	result  =  tryFoldLeftChildOp(subtree,  left,  right,  subtree);	  result    =    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	19	None	replace
279	[BUG]  [BUGGY]  result  =  tryFoldBinaryOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  result  =  tryFoldBinaryOperator(subtree,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	result  =  tryFoldBinaryOperator(subtree,  left,  right);	  result    =    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	19	None	replace
280	[BUG]  [BUGGY]  result  =  tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  result  =  tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	result  =  tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneTree());	  result    =    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	19	None	replace
281	[BUG]  [BUGGY]  result  =  tryFoldLeftChildOp(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  result  =  tryFoldLeftChildOp(subtree,  left,  right,  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	result  =  tryFoldLeftChildOp(subtree,  left,  right,  false);	  result    =    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	19	None	replace
282	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  true);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  true);	  return    tryFoldMutator(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	34	None	replace
283	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  right,  left,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  right,  left,  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  right,  left,  false);	  return    tryFoldMutator(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	34	None	replace
284	[BUG]  [BUGGY]  return  tryFoldShortMutator(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldShortMutator(subtree,  left,  right,  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldShortMutator(subtree,  left,  right,  false);	  return    tryFoldMutator(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	34	None	replace
285	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  2);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  2);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  2);	  return    tryFoldLeftChildOp(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	44	None	replace
286	[BUG]  [BUGGY]  default:  return  tryFoldBigDecimalChildOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  default:  return  tryFoldBigDecimalChildOp(subtree,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	default:  return  tryFoldBigDecimalChildOp(subtree,  left,  right);	  default:    return    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	18	None	replace
287	[BUG]  [BUGGY]  default:  return  tryFoldRightChildOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  default:  return  tryFoldRightChildOp(subtree,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	default:  return  tryFoldRightChildOp(subtree,  left,  right);	  default:    return    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	18	None	replace
288	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right  +  1  -  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right  +  1  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right  +  1  -  1);	  return    tryFoldBinaryOperator(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	39	None	replace
289	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  DEFAULT_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  DEFAULT_GETELEM_INDEX_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  DEFAULT_GETELEM_INDEX_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree(),    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	12	None	replace
290	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER  +  1);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree(),    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	12	None	replace
291	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree  -  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree  -  1);	  return    tryFoldComparison(subtree,    left,    right,    subtree    +    1);    	non-compiled	[CE]  orphaned  case	56	None	replace
292	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree  +  3);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree  +  3);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree  +  3);	  return    tryFoldComparison(subtree,    left,    right,    subtree    +    1);    	non-compiled	[CE]  orphaned  case	56	None	replace
293	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldLeftChildOp(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	48	None	replace
294	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  null.clone());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  null.clone());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  null.clone());	  return    tryFoldComparison(subtree,    left,    right,    subtree.clone());    	non-compiled	[CE]  orphaned  case	13	None	replace
295	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  NUMBER_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  NUMBER_OF_RANGE);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  NUMBER_OF_RANGE);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree(),    ROOT_LOCALE);    	non-compiled	[CE]  orphaned  case	84	None	replace
296	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  DEFAULT_BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  DEFAULT_BITWISE_OPERAND);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree(),    ROOT_LOCALE);    	non-compiled	[CE]  orphaned  case	84	None	replace
297	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  2);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  2);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	42	None	replace
298	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right  /  2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right  /  2);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right  /  2);	  return    tryFoldComparison(subtree,    left,    right    +    2);    	non-compiled	[CE]  orphaned  case	64	None	replace
299	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right  *  2);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right  *  2);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right  *  2);	  return    tryFoldComparison(subtree,    left,    right    +    2);    	non-compiled	[CE]  orphaned  case	64	None	replace
300	[BUG]  [BUGGY]  Node  result  =  tryFoldBinaryOperator(subtree);  return  tryFoldLeftChildOp(result,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldBinaryOperator(subtree);  return  tryFoldLeftChildOp(result,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldBinaryOperator(subtree);  return  tryFoldLeftChildOp(result,  left,  right);	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    return    tryFoldLeftChildOp(result,    left,    right);    	non-compiled	[CE]  orphaned  case	70	None	replace
301	[BUG]  [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right);  return  tryFoldBinaryOperator(result,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right);  return  tryFoldBinaryOperator(result,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldLeftChildOp(subtree,  left,  right);  return  tryFoldBinaryOperator(result,  left,  right);	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    return    tryFoldLeftChildOp(result,    left,    right);    	non-compiled	[CE]  orphaned  case	70	None	replace
302	[BUG]  [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  BITWISE_OPERAND);	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	20	None	replace
303	[BUG]  [BUGGY]  Node  result  =  tryFoldRightChildOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldRightChildOp(subtree,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldRightChildOp(subtree,  left,  right);	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	20	None	replace
304	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  INDEX_OUT_OF_RANGE);	  return    tryFoldBinaryOperator(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	52	None	replace
305	[BUG]  [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldLeftChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  MAX_FOLD_NUMBER);	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    return    tryFoldLeftChildOp(subtree,    result,    right);    	non-compiled	[CE]  orphaned  case	71	None	replace
306	[BUG]  [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  0);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  0);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldLeftChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  0);	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    return    tryFoldLeftChildOp(subtree,    result,    right);    	non-compiled	[CE]  orphaned  case	71	None	replace
307	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right  *  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right  *  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right  *  1);	  return    tryFoldMinimumChildOp(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	66	None	replace
308	[BUG]  [BUGGY]  return  tryFoldShortBinaryOperator(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldShortBinaryOperator(subtree,  left,  right,  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldShortBinaryOperator(subtree,  left,  right,  false);	  return    tryFoldBinaryOperator(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	8	None	replace
309	[BUG]  [BUGGY]  return  tryFoldMaximumChildOp(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMaximumChildOp(subtree,  left,  right  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMaximumChildOp(subtree,  left,  right  +  1);	  return    tryFoldMaximumChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	68	None	replace
310	[BUG]  [BUGGY]  return  tryFoldBigDecimalChildOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBigDecimalChildOp(subtree,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBigDecimalChildOp(subtree,  left,  right);	  return    tryFoldMaximumChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	68	None	replace
311	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldLeftChildOp(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	45	None	replace
312	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  INDEX_OUT_OF_RANGE);	  return    tryFoldLeftChildOp(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	45	None	replace
313	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  key.cloneTree());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  key.cloneTree());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  key.cloneTree());	  return    tryFoldComparison(subtree,    left,    right,    token.cloneTree());    	non-compiled	[CE]  orphaned  case	86	None	replace
314	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  false,  token.cloneTree());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  false,  token.cloneTree());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  false,  token.cloneTree());	  return    tryFoldComparison(subtree,    left,    right,    token.cloneTree());    	non-compiled	[CE]  orphaned  case	86	None	replace
315	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	73	None	replace
316	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER_OF_RANGE);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER_OF_RANGE);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	73	None	replace
317	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	73	None	replace
318	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)+  4;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right)+  4;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)+  4;	  return    tryFoldComparison(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	41	None	replace
319	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR,  subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR,  subtree);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR,  subtree);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	74	None	replace
320	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  SHIFT_AMOUNT_OUT_OF_BOUNDS,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  SHIFT_AMOUNT_OUT_OF_BOUNDS,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  SHIFT_AMOUNT_OUT_OF_BOUNDS,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	74	None	replace
321	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	74	None	replace
322	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	74	None	replace
323	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right),  true);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right),  true);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right),  true);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    false);    	non-compiled	[CE]  ';'  expected	3	None	replace
324	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right  -  1  +  1);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right  -  1  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right  -  1  +  1);	  return    tryFoldBinaryOperator(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	23	None	replace
325	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  0  -  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  0  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  0  -  1);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER    -    1);    	non-compiled	[CE]  orphaned  case	25	None	replace
326	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result  -  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  result  -  1);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER    -    1);    	non-compiled	[CE]  orphaned  case	25	None	replace
327	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree.getParent(),  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree.getParent(),  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree.getParent(),  left,  right);	  return    tryFoldMinimumChildOp(null,    left,    right);    	non-compiled	[CE]  orphaned  case	69	None	replace
328	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree);	  return    tryFoldMinimumChildOp(null,    left,    right);    	non-compiled	[CE]  orphaned  case	69	None	replace
329	[BUG]  [BUGGY]  return  tryFoldSubTreeChildOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldSubTreeChildOp(subtree,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldSubTreeChildOp(subtree,  left,  right);	  return    tryFoldMinimumChildOp(null,    left,    right);    	non-compiled	[CE]  orphaned  case	69	None	replace
330	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right  +  2);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right  +  2);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right  +  2);	  return    tryFoldMutator(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	58	None	replace
331	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  NEGATING_A_NON_NUMBER_ERROR  +  1);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  NEGATING_A_NON_NUMBER_ERROR  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  NEGATING_A_NON_NUMBER_ERROR  +  1);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER    +    1);    	non-compiled	[CE]  orphaned  case	27	None	replace
332	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  0  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  0  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  0  +  1);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER    +    1);    	non-compiled	[CE]  orphaned  case	27	None	replace
333	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneChildOp());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneChildOp());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneChildOp());	  return    tryFoldComparison(subtree,    left,    right,    this.subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	85	None	replace
334	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.subtree.clonePosition());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.subtree.clonePosition());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  this.subtree.clonePosition());	  return    tryFoldComparison(subtree,    left,    right,    this.subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	85	None	replace
335	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneNodeBinaryOperator());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneNodeBinaryOperator());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneNodeBinaryOperator());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneBinaryOperator());    	non-compiled	[CE]  orphaned  case	14	None	replace
336	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneSyntheticOperator());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneSyntheticOperator());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneSyntheticOperator());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneBinaryOperator());    	non-compiled	[CE]  orphaned  case	14	None	replace
337	[BUG]  [BUGGY]  return  tryFoldRightChildOp(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldRightChildOp(subtree,  left,  right  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldRightChildOp(subtree,  left,  right  +  1);	  return    tryFoldLeftChildOp(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	40	None	replace
338	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right  +  2);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right  +  2);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right  +  2);	  return    tryFoldMinimumChildOp(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	65	None	replace
339	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  NEGATING_A_NON_NUMBER_ERROR);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	2	None	replace
340	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	2	None	replace
341	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(null,  left,  right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(null,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(null,  left,  right);	  return    tryFoldLeftChildOp(null,    left,    right);    	non-compiled	[CE]  orphaned  case	21	None	replace
342	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  value);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  value);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  value);	  return    tryFoldLeftChildOp(subtree,    left,    right,    value);    	non-compiled	[CE]  orphaned  case	72	None	replace
343	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  null);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  null);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  null);	  return    tryFoldComparison(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	43	None	replace
344	[BUG]  [BUGGY]  return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldBinaryOperatorChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	37	None	replace
345	[BUG]  [BUGGY]  return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  result);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperatorChildOp(subtree,  left,  right,  result);	  return    tryFoldBinaryOperatorChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	37	None	replace
346	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right),  true);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right),  true);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right),  true);	  return    tryFoldLeftChildOp(subtree,    left,    right,    false);    	non-compiled	[CE]  ';'  expected	46	None	replace
347	[BUG]  [BUGGY]  return  tryFoldMonthChildOp(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMonthChildOp(subtree,  left,  right,  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMonthChildOp(subtree,  left,  right,  false);	  return    tryFoldMoveChildOp(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	36	None	replace
348	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  2);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  2);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  2);	  return    tryFoldMoveChildOp(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	35	None	replace
349	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  4);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  4);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  4);	  return    tryFoldMoveChildOp(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	35	None	replace
350	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	78	None	replace
351	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	78	None	replace
352	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clonePosition(),  1);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clonePosition(),  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.clonePosition(),  1);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree(),    1);    	non-compiled	[CE]  orphaned  case	15	None	replace
353	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)&  MAX_FOLD_NUMBER  +  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right)&  MAX_FOLD_NUMBER  +  1;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)&  MAX_FOLD_NUMBER  +  1;	  return    tryFoldComparison(subtree,    left,    right),    MAX_FOLD_NUMBER    +    1);    	non-compiled	[CE]  orphaned  case	83	None	replace
354	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)/  MAX_FOLD_NUMBER  +  1);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right)/  MAX_FOLD_NUMBER  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)/  MAX_FOLD_NUMBER  +  1);	  return    tryFoldComparison(subtree,    left,    right),    MAX_FOLD_NUMBER    +    1);    	non-compiled	[CE]  ';'  expected	83	None	replace
355	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  INDEX_OUT_OF_RANGE);	  return    tryFoldMoveChildOp(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	59	None	replace
356	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);	  return    tryFoldMoveChildOp(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	59	None	replace
357	[BUG]  [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	tryFoldBinaryOperator(subtree,  left,  right);	  tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	55	None	replace
358	[BUG]  [BUGGY]  tryFoldLeftChildOp(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  tryFoldLeftChildOp(subtree,  left,  right,  result);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	tryFoldLeftChildOp(subtree,  left,  right,  result);	  tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	55	None	replace
359	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(left,  subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(left,  subtree);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(left,  subtree);	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	54	None	replace
360	[BUG]  [BUGGY]  return  tryFoldCommarison(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldCommarison(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldCommarison(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    double_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	30	None	replace
361	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  this.subtree.cloneTree());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  this.subtree.cloneTree());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  this.subtree.cloneTree());	  return    tryFoldMoveChildOp(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	76	None	replace
362	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  BYTE_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  BYTE_BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  BYTE_BITWISE_OPERAND);	  return    tryFoldMutator(subtree,    left,    right,    MULTIPLE_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	80	None	replace
363	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)/  2.0;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right)/  2.0;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)/  2.0;	  return    tryFoldComparison(subtree,    left,    right)/    1;    	non-compiled	[CE]  orphaned  case	77	None	replace
364	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)/  1  +  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right)/  1  +  1;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)/  1  +  1;	  return    tryFoldComparison(subtree,    left,    right)/    1;    	non-compiled	[CE]  orphaned  case	77	None	replace
365	[BUG]  [BUGGY]  result  =  tryFoldLeftChildOp(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  result  =  tryFoldLeftChildOp(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	result  =  tryFoldLeftChildOp(subtree,  left,  right,  BITWISE_OPERAND);	  result    =    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	19	None	replace
366	[BUG]  [BUGGY]  result  =  tryFoldLeftChildOp(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  result  =  tryFoldLeftChildOp(subtree,  left,  right  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	result  =  tryFoldLeftChildOp(subtree,  left,  right  -  1);	  result    =    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	19	None	replace
367	[BUG]  [BUGGY]  result  =  tryFoldBigDecimalChildOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  result  =  tryFoldBigDecimalChildOp(subtree,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	result  =  tryFoldBigDecimalChildOp(subtree,  left,  right);	  result    =    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	19	None	replace
368	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)-  0;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right)-  0;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)-  0;	  return    tryFoldComparison(subtree,    left,    right)-    1;    	non-compiled	[CE]  orphaned  case	61	None	replace
369	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)-  3;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right)-  3;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)-  3;	  return    tryFoldComparison(subtree,    left,    right)-    1;    	non-compiled	[CE]  orphaned  case	61	None	replace
370	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)-  4;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right)-  4;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)-  4;	  return    tryFoldComparison(subtree,    left,    right)-    1;    	non-compiled	[CE]  orphaned  case	61	None	replace
371	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clonePosition()  -  1);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clonePosition()  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.clonePosition()  -  1);	  return    tryFoldComparison(subtree,    left,    right,    subtree.clonePosition());    	non-compiled	[CE]  orphaned  case	17	None	replace
372	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildOperator());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildOperator());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildOperator());	  return    tryFoldComparison(subtree,    left,    right,    subtree.clonePosition());    	non-compiled	[CE]  orphaned  case	17	None	replace
373	[BUG]  [BUGGY]  return  tryFoldRightChildOp(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldRightChildOp(subtree,  left,  right  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldRightChildOp(subtree,  left,  right  -  1);	  return    tryFoldLeftChildOp(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	24	None	replace
374	[BUG]  [BUGGY]  return  tryFoldFirstChildOp(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldFirstChildOp(subtree,  left,  right  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldFirstChildOp(subtree,  left,  right  -  1);	  return    tryFoldLeftChildOp(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	24	None	replace
375	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  NEGATING_A_NON_NUMBER_ERROR);	  return    tryFoldMutator(subtree,    left,    right,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	32	None	replace
376	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  SHIFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  SHIFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  SHIFT_AMOUNT_OUT_OF_BOUNDS);	  return    tryFoldMutator(subtree,    left,    right,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	32	None	replace
377	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  INDEX_OUT_OF_RANGE);	  return    tryFoldMutator(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	57	None	replace
378	[BUG]  [BUGGY]  return  tryFoldMethodMutator(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMethodMutator(subtree,  left,  right,  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMethodMutator(subtree,  left,  right,  false);	  return    tryFoldMutator(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	34	None	replace
379	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right),  false);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right),  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right),  false);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    true);    	non-compiled	[CE]  ';'  expected	6	None	replace
380	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  right,  left,  true);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  right,  left,  true);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  right,  left,  true);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    true);    	non-compiled	[CE]  orphaned  case	6	None	replace
381	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  value  +  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  value  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  value  +  1);	  return    tryFoldLeftChildOp(subtree,    left,    right,    value);    	non-compiled	[CE]  orphaned  case	72	None	replace
382	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  value,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  value,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  value,  MAX_FOLD_NUMBER);	  return    tryFoldLeftChildOp(subtree,    left,    right,    value);    	non-compiled	[CE]  orphaned  case	72	None	replace
383	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_OPERAND);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	2	None	replace
384	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right  -  1,  subtree.getLastChild());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right  -  1,  subtree.getLastChild());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right  -  1,  subtree.getLastChild());	  return    tryFoldComparison(subtree,    left,    right    -    1    +    1);    	non-compiled	[CE]  orphaned  case	60	None	replace
385	[BUG]  [BUGGY]  Node  result  =  tryFoldRightChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(result,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldRightChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(result,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldRightChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(result,  left,  right);	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    return    tryFoldLeftChildOp(result,    left,    right);    	non-compiled	[CE]  orphaned  case	70	None	replace
386	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MILLIS_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MILLIS_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  MILLIS_OPERAND);	  return    tryFoldMinimumChildOp(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	78	None	replace
387	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  false,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  false,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  false,  MAX_FOLD_NUMBER);	  return    tryFoldMutator(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	34	None	replace
388	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right),  true);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right),  true);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right),  true);	  return    tryFoldMutator(subtree,    left,    right,    false);    	non-compiled	[CE]  ';'  expected	34	None	replace
389	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  2);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  2);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  2);	  return    tryFoldMutator(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	31	None	replace
390	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  double);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  double);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  double);	  return    tryFoldMutator(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  '.class'  expected	31	None	replace
391	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  double_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  double_FOLD_NUMBER  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  double_FOLD_NUMBER  +  1);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER    +    1);    	non-compiled	[CE]  orphaned  case	27	None	replace
392	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  BITWISE_OPERAND,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  BITWISE_OPERAND,  MAX_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  BITWISE_OPERAND,  MAX_FOLD_NUMBER);	  return    tryFoldMutator(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	57	None	replace
393	[BUG]  [BUGGY]  result  =  tryFoldLeftChildOp(subtree,  left,  right,  1);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  result  =  tryFoldLeftChildOp(subtree,  left,  right,  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	result  =  tryFoldLeftChildOp(subtree,  left,  right,  1);	  result    =    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	19	None	replace
394	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clone(),  ROOT_LOCALE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clone(),  ROOT_LOCALE);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.clone(),  ROOT_LOCALE);	  return    tryFoldComparison(subtree,    left,    right,    subtree.clone());    	non-compiled	[CE]  orphaned  case	13	None	replace
395	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  token.clone());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  token.clone());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  token.clone());	  return    tryFoldComparison(subtree,    left,    right,    subtree.clone());    	non-compiled	[CE]  orphaned  case	13	None	replace
396	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right),  MAX_FOLD_NUMBER_ERROR  -  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right),  MAX_FOLD_NUMBER_ERROR  -  1;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right),  MAX_FOLD_NUMBER_ERROR  -  1;	  return    tryFoldComparison(subtree,    left,    right)-    1;    	non-compiled	[CE]  ';'  expected	61	None	replace
397	[BUG]  [BUGGY]  return  tryFoldShortOperator(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldShortOperator(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldShortOperator(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	52	None	replace
398	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MISSING_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MISSING_BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  MISSING_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	52	None	replace
399	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  this,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  this,  BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  this,  BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	11	None	replace
400	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  this,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  this,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  this,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldBinaryOperator(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	11	None	replace
401	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  result,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	73	None	replace
402	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldComparison(subtree,    left,    right,    subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	73	None	replace
403	[BUG]  [BUGGY]  return  tryFoldShortChildOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldShortChildOp(subtree,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldShortChildOp(subtree,  left,  right);	  return    tryFoldMinimumChildOp(null,    left,    right);    	non-compiled	[CE]  orphaned  case	69	None	replace
404	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  double);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  double);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  double);	  return    tryFoldLeftChildOp(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  '.class'  expected	44	None	replace
405	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  4);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  4);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  4);	  return    tryFoldLeftChildOp(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	44	None	replace
406	[BUG]  [BUGGY]  return  tryFoldShortOperator(subtree,  left,  right,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldShortOperator(subtree,  left,  right,  true);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldShortOperator(subtree,  left,  right,  true);	  return    tryFoldBinaryOperator(subtree,    left,    right,    true);    	non-compiled	[CE]  orphaned  case	10	None	replace
407	[BUG]  [BUGGY]  return  tryFoldShortCircuitOperator(subtree,  left,  right,  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldShortCircuitOperator(subtree,  left,  right,  true);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldShortCircuitOperator(subtree,  left,  right,  true);	  return    tryFoldBinaryOperator(subtree,    left,    right,    true);    	non-compiled	[CE]  orphaned  case	10	None	replace
408	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree.cloneTree(),  left,  right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree.cloneTree(),  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree.cloneTree(),  left,  right);	  return    tryFoldLeftChildOp(null,    left,    right);    	non-compiled	[CE]  orphaned  case	21	None	replace
409	[BUG]  [BUGGY]  return  tryFoldTopChildOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldTopChildOp(subtree,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldTopChildOp(subtree,  left,  right);	  return    tryFoldLeftChildOp(null,    left,    right);    	non-compiled	[CE]  orphaned  case	21	None	replace
410	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right),  MAX_FOLD_NUMBER  +  1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right),  MAX_FOLD_NUMBER  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right),  MAX_FOLD_NUMBER  +  1);	  return    tryFoldMutator(subtree,    left,    right    +    1);    	non-compiled	[CE]  ';'  expected	58	None	replace
411	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree,  BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  subtree,  BITWISE_OPERAND);	  return    tryFoldLeftChildOp(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	47	None	replace
412	[BUG]  [BUGGY]  return  tryFoldLeftChildOps(subtree,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOps(subtree,  left,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOps(subtree,  left,  right);	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	54	None	replace
413	[BUG]  [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  1);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldLeftChildOp(subtree,  left,  right,  1);	  Node    result    =    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	20	None	replace
414	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  double);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  double);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  double);	  return    tryFoldMoveChildOp(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  '.class'  expected	35	None	replace
415	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);	  return    tryFoldMinimumChildOp(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	66	None	replace
416	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.cloneTree(),  ROOT_LOCALE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.cloneTree(),  ROOT_LOCALE);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.cloneTree(),  ROOT_LOCALE);	  return    tryFoldMoveChildOp(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	76	None	replace
417	[BUG]  [BUGGY]  return  tryFoldShortOperator(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldShortOperator(subtree,  left,  right,  false);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldShortOperator(subtree,  left,  right,  false);	  return    tryFoldBinaryOperator(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	8	None	replace
418	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  token.cloneChildOp());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  token.cloneChildOp());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  token.cloneChildOp());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneChildOp());    	non-compiled	[CE]  orphaned  case	63	None	replace
419	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneChildren());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneChildren());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneChildren());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneChildren());    	non-compiled	[CE]  orphaned  case	16	None	replace
420	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  token.cloneChildren());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  token.cloneChildren());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  token.cloneChildren());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneChildren());    	non-compiled	[CE]  orphaned  case	16	None	replace
421	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTwin());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTwin());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTwin());	  return    tryFoldComparison(subtree,    left,    right,    subtree.clonePosition());    	non-compiled	[CE]  orphaned  case	17	None	replace
422	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  double  -  1);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  double  -  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  double  -  1);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER    -    1);    	non-compiled	[CE]  '.class'  expected	25	None	replace
423	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.next()  +  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.next()  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.next()  +  1);	  return    tryFoldComparison(subtree,    left,    right,    subtree    +    1);    	non-compiled	[CE]  orphaned  case	56	None	replace
424	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  subtree  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  subtree  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  subtree  +  1);	  return    tryFoldComparison(subtree,    left,    right,    subtree    +    1);    	non-compiled	[CE]  orphaned  case	56	None	replace
425	[BUG]  [BUGGY]  default:  return  tryFoldLeftChildOp(subtree,  left,  right,  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  default:  return  tryFoldLeftChildOp(subtree,  left,  right,  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	default:  return  tryFoldLeftChildOp(subtree,  left,  right,  1);	  default:    return    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	18	None	replace
426	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree,  BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree,  BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	9	None	replace
427	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  0,  0);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  0,  0);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  0,  0);	  return    tryFoldComparison(subtree,    left,    right,    0);    	non-compiled	[CE]  orphaned  case	28	None	replace
428	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  right);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  right);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  right);	  return    tryFoldLeftChildOp(subtree);    	non-compiled	[CE]  orphaned  case	22	None	replace
429	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right)+  MAX_FOLD_NUMBER;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right)+  MAX_FOLD_NUMBER;  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right)+  MAX_FOLD_NUMBER;	  return    tryFoldMinimumChildOp(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	67	None	replace
430	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)-  MAX_FOLD_NUMBER  +  1);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right)-  MAX_FOLD_NUMBER  +  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)-  MAX_FOLD_NUMBER  +  1);	  return    tryFoldComparison(subtree,    left,    right),    MAX_FOLD_NUMBER    +    1);    	non-compiled	[CE]  ';'  expected	83	None	replace
431	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.result);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.result);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  this.result);	  return    tryFoldComparison(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	43	None	replace
432	[BUG]  [BUGGY]  return  tryFoldMaximumChildOp(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMaximumChildOp(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMaximumChildOp(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldMaximumChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	68	None	replace
433	[BUG]  [BUGGY]  return  tryFoldMaximumChildOp(subtree,  left,  right,  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMaximumChildOp(subtree,  left,  right,  1);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMaximumChildOp(subtree,  left,  right,  1);	  return    tryFoldMaximumChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	68	None	replace
434	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  token.cloneBinaryOperator());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  token.cloneBinaryOperator());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  token.cloneBinaryOperator());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneBinaryOperator());    	non-compiled	[CE]  orphaned  case	14	None	replace
435	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTreeBinaryOperator());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTreeBinaryOperator());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTreeBinaryOperator());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneBinaryOperator());    	non-compiled	[CE]  orphaned  case	14	None	replace
436	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTreeAssignmentOperator());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTreeAssignmentOperator());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTreeAssignmentOperator());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneBinaryOperator());    	non-compiled	[CE]  orphaned  case	14	None	replace
437	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneAssignmentOperator());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneAssignmentOperator());  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneAssignmentOperator());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneBinaryOperator());    	non-compiled	[CE]  orphaned  case	14	None	replace
438	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  this,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  this,  BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  this,  BITWISE_OPERAND);	  return    tryFoldMutator(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	81	None	replace
439	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneTree(),  ROOT_LOCALE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneTree(),  ROOT_LOCALE);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneTree(),  ROOT_LOCALE);	  return    tryFoldLeftChildOp(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	62	None	replace
440	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  16);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  16);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  16);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree(),    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	12	None	replace
441	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR,  MAX_FOLD_OPERAND);	  return    tryFoldMutator(subtree,    left,    right,    MISSING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	32	None	replace
442	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneTree(),  this.type);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneTree(),  this.type);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneTree(),  this.type);	  return    tryFoldComparison(subtree,    left,    right,    this.subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	85	None	replace
443	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneTree(),  this.negative);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneTree(),  this.negative);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneTree(),  this.negative);	  return    tryFoldComparison(subtree,    left,    right,    this.subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	85	None	replace
444	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  this,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  this,  BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  this,  BITWISE_OPERAND);	  return    tryFoldMoveChildOp(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	75	None	replace
445	[BUG]  [BUGGY]  tryFoldLeftChildOp(subtree,  left,  right,  value);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  tryFoldLeftChildOp(subtree,  left,  right,  value);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	tryFoldLeftChildOp(subtree,  left,  right,  value);	  tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	55	None	replace
446	[BUG]  [BUGGY]  tryFoldLeftChildOp(subtree,  left,  right,  this);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  tryFoldLeftChildOp(subtree,  left,  right,  this);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	tryFoldLeftChildOp(subtree,  left,  right,  this);	  tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	55	None	replace
447	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  this.BITWISE_OPERAND);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  this.BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  this.BITWISE_OPERAND);	  return    tryFoldMoveChildOp(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	59	None	replace
448	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);	  return    tryFoldBinaryOperator(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	51	None	replace
449	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  right,  left,  double_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  right,  left,  double_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  right,  left,  double_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    double_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	30	None	replace
450	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MOVE_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MOVE_FOLD_NUMBER);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  MOVE_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    double_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	30	None	replace
451	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  subtree,  BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  subtree,  BITWISE_OPERAND);	  return    tryFoldMutator(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	33	None	replace
452	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  reverse);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  reverse);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  reverse);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree(),    ROOT_LOCALE);    	non-compiled	[CE]  orphaned  case	84	None	replace
453	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MULTIPLE_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:      [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MULTIPLE_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  MULTIPLE_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldMutator(subtree,    left,    right,    MULTIPLE_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	80	None	replace
