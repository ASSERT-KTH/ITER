bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldMinimumChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
2	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldMinimumChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
3	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  false);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  false);	  return    tryFoldMinimumChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
4	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  1);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  1);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  1);	  return    tryFoldMinimumChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
5	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  0);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  0);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  0);	  return    tryFoldMinimumChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
6	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  true);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  true);	  return    tryFoldMinimumChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
7	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
8	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  false);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  false);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
9	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
10	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  true);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  true);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  true);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
11	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  this);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  this);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  this);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
12	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	5	None	replace
13	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clone());  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clone());  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.clone());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	5	None	replace
14	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneBinaryOperator());  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneBinaryOperator());  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneBinaryOperator());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	5	None	replace
15	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  1);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  1);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	5	None	replace
16	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildren());  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildren());  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildren());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	5	None	replace
17	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clonePosition());  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clonePosition());  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.clonePosition());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	5	None	replace
18	[BUG]  [BUGGY]  default:  return  tryFoldLeftChildOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  default:  return  tryFoldLeftChildOp(subtree,  left,  right);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	default:  return  tryFoldLeftChildOp(subtree,  left,  right);	      	non-compiled	[CE]  orphaned  case	7	None	replace
19	[BUG]  [BUGGY]  result  =  tryFoldLeftChildOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  result  =  tryFoldLeftChildOp(subtree,  left,  right);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	result  =  tryFoldLeftChildOp(subtree,  left,  right);	      	non-compiled	[CE]  orphaned  case	7	None	replace
20	[BUG]  [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldLeftChildOp(subtree,  left,  right);	      	non-compiled	[CE]  orphaned  case	7	None	replace
21	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(null,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldLeftChildOp(null,  left,  right);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(null,  left,  right);	      	non-compiled	[CE]  orphaned  case	7	None	replace
22	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree);  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldLeftChildOp(subtree);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree);	      	non-compiled	[CE]  orphaned  case	7	None	replace
23	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right  -  1);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right  -  1);	  return    tryFoldComparison(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	8	None	replace
24	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right  -  1);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right  -  1);	  return    tryFoldComparison(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	8	None	replace
25	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldComparison(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	8	None	replace
26	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right  -  2);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right  -  2);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right  -  2);	  return    tryFoldComparison(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	8	None	replace
27	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	1	None	replace
28	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  0);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  0);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  0);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	1	None	replace
29	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  1);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  1);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  1);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	1	None	replace
30	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  double_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  double_FOLD_NUMBER);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  double_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	1	None	replace
31	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldMutator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
32	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldMutator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
33	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  subtree);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  subtree);	  return    tryFoldMutator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
34	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  false);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  false);	  return    tryFoldMutator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
35	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldMoveChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
36	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  false);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  false);	  return    tryFoldMoveChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
37	[BUG]  [BUGGY]  return  tryFoldBinaryOperatorChildOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldBinaryOperatorChildOp(subtree,  left,  right);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperatorChildOp(subtree,  left,  right);	  return    tryFoldMoveChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
38	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  subtree);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  subtree);	  return    tryFoldMoveChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
39	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right  +  1);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right  +  1);	  return    tryFoldComparison(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	6	None	replace
40	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right  +  1);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right  +  1);	  return    tryFoldComparison(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	6	None	replace
41	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right)+  1;  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)+  1;	  return    tryFoldComparison(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	6	None	replace
42	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	4	None	replace
43	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  result);	  return    tryFoldComparison(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	4	None	replace
44	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	3	None	replace
45	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	3	None	replace
46	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  false);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  false);	  return    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	3	None	replace
47	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  subtree);	  return    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	3	None	replace
48	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  result);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  result);	  return    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	3	None	replace
49	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  2);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  2);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  2);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	1	None	replace
50	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  4);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  4);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  4);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	1	None	replace
51	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
52	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
53	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  result);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  result);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
54	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldBinaryOperator(subtree);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldBinaryOperator(subtree);	      	non-compiled	[CE]  orphaned  case	7	None	replace
55	[BUG]  [BUGGY]  tryFoldLeftChildOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  tryFoldLeftChildOp(subtree,  left,  right);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	tryFoldLeftChildOp(subtree,  left,  right);	      	non-compiled	[CE]  orphaned  case	7	None	replace
56	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree  +  1);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree  +  1);	  return    tryFoldComparison(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	4	None	replace
57	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldMutator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
58	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMutator(subtree,  left,  right  +  1);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right  +  1);	  return    tryFoldMutator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
59	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldMoveChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
60	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right  -  1  +  1);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right  -  1  +  1);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right  -  1  +  1);	  return    tryFoldComparison(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	8	None	replace
61	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)-  1;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right)-  1;  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)-  1;	  return    tryFoldComparison(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	8	None	replace
62	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  subtree.cloneTree());	  return    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	3	None	replace
63	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildOp());  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildOp());  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneChildOp());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	5	None	replace
64	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right  +  2);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right  +  2);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right  +  2);	  return    tryFoldComparison(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	6	None	replace
65	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right  +  1);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right  +  1);	  return    tryFoldMinimumChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
66	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right  -  1);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right  -  1);	  return    tryFoldMinimumChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
67	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right)+  1;  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right)+  1;	  return    tryFoldMinimumChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
68	[BUG]  [BUGGY]  return  tryFoldMaximumChildOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMaximumChildOp(subtree,  left,  right);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMaximumChildOp(subtree,  left,  right);	  return    tryFoldMinimumChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
69	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(null,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMinimumChildOp(null,  left,  right);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(null,  left,  right);	  return    tryFoldMinimumChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
70	[BUG]  [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(result,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(result,  left,  right);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldLeftChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(result,  left,  right);	      	non-compiled	[CE]  orphaned  case	7	None	replace
71	[BUG]  [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  Node  result  =  tryFoldLeftChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  right);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	Node  result  =  tryFoldLeftChildOp(subtree,  left,  right);  return  tryFoldLeftChildOp(subtree,  result,  right);	      	non-compiled	[CE]  orphaned  case	7	None	replace
72	[BUG]  [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  value);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldLeftChildOp(subtree,  left,  right,  value);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldLeftChildOp(subtree,  left,  right,  value);	  return    tryFoldLeftChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	3	None	replace
73	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	4	None	replace
74	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	4	None	replace
75	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  this);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  this);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  this);	  return    tryFoldMoveChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
76	[BUG]  [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMoveChildOp(subtree,  left,  right,  subtree.cloneTree());	  return    tryFoldMoveChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
77	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right)/  1;  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right)/  1;  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right)/  1;	  return    tryFoldComparison(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	8	None	replace
78	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldMinimumChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
79	[BUG]  [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  this);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMinimumChildOp(subtree,  left,  right,  this);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMinimumChildOp(subtree,  left,  right,  this);	  return    tryFoldMinimumChildOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
80	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MULTIPLE_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  MULTIPLE_BITWISE_OPERAND);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  MULTIPLE_BITWISE_OPERAND);	  return    tryFoldMutator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
81	[BUG]  [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  this);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldMutator(subtree,  left,  right,  this);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldMutator(subtree,  left,  right,  this);	  return    tryFoldMutator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
82	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  3);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  3);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  3);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	1	None	replace
83	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right),  MAX_FOLD_NUMBER  +  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right),  MAX_FOLD_NUMBER  +  1);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right),  MAX_FOLD_NUMBER  +  1);	  return    tryFoldComparison(subtree,    left,    right    +    1);    	non-compiled	[CE]  ';'  expected	6	None	replace
84	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  ROOT_LOCALE);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  ROOT_LOCALE);  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  ROOT_LOCALE);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	5	None	replace
85	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneTree());  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneTree());  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  this.subtree.cloneTree());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	5	None	replace
86	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  token.cloneTree());  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  tryFoldLeftChildOp(subtree,  left,  right);  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  token.cloneTree());  [BUGGY]      default:  return  subtree;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	158	158	3	replace	return  tryFoldComparison(subtree,  left,  right,  token.cloneTree());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	5	None	replace
