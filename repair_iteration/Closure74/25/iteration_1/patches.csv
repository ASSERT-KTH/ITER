bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(n.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(n.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
2	[BUG]  [BUGGY]  if(left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
3	[BUG]  [BUGGY]  if(right.getType()  ==  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()  ==  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
4	[BUG]  [BUGGY]  if(right.getType()!=  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()!=  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
5	[BUG]  [BUGGY]  if(left.getType()!=  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(left.getType()!=  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
6	[BUG]  [BUGGY]  if(left.getType()  ==  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(left.getType()  ==  Token.THIS)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.THIS)  {  break;  }	  if(right.getType()    ==    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	1	None	replace
7	[BUG]  [BUGGY]  if(right.getType()  ==  Token.THIS  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()  ==  Token.THIS  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.THIS  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	1	None	replace
8	[BUG]  [BUGGY]  if(right.getType()  ==  Token.THIS  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()  ==  Token.THIS  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.THIS  ||  right.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	1	None	replace
9	[BUG]  [BUGGY]  if(right.getType()  ==  Token.THIS  ||  right.getType()!=  Token.CALL)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()  ==  Token.THIS  ||  right.getType()!=  Token.CALL)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.THIS  ||  right.getType()!=  Token.CALL)  {  break;  }	  if(right.getType()    ==    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	1	None	replace
10	[BUG]  [BUGGY]  if(right.getType()  ==  Token.THIS  ||  right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()  ==  Token.THIS  ||  right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.THIS  ||  right.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	1	None	replace
11	[BUG]  [BUGGY]  n  =  right.getNext();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  n  =  right.getNext();  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  right.getNext();	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	7	None	replace
12	[BUG]  [BUGGY]  n  =  left.getNext()  +  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  n  =  left.getNext()  +  1;  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getNext()  +  1;	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	7	None	replace
13	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  n  =  left.getLastChild();  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getLastChild();	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	7	None	replace
14	[BUG]  [BUGGY]  n  =  left.getNext()  ||  right.getType()  ==  Token.THIS;  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  n  =  left.getNext()  ||  right.getType()  ==  Token.THIS;  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getNext()  ||  right.getType()  ==  Token.THIS;	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	7	None	replace
15	[BUG]  [BUGGY]  n  =  left.getNext()  ||  right.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  n  =  left.getNext()  ||  right.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getNext()  ||  right.getType()  ==  Token.GETELEM;	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	7	None	replace
16	[BUG]  [BUGGY]  while(n.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  while(n.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }	  if(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
17	[BUG]  [BUGGY]  if(left.getType()!=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(left.getType()!=  Token.STRING)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.STRING)  {  break;  }	  if(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
18	[BUG]  [BUGGY]  while(n.getType()!=  Token.STRING)  {  if(right.getType()  ==  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  while(n.getType()!=  Token.STRING)  {  if(right.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()!=  Token.STRING)  {  if(right.getType()  ==  Token.STRING)  {  break;  }	  if(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
19	[BUG]  [BUGGY]  while(n.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  while(n.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.STRING)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.STRING)  {  break;  }	  if(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
20	[BUG]  [BUGGY]  while(n.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  while(n.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
21	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	5	None	replace
22	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	5	None	replace
23	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	5	None	replace
24	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	5	None	replace
25	[BUG]  [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	5	None	replace
26	[BUG]  [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.THIS)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.THIS)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	5	None	replace
27	[BUG]  [BUGGY]  if(left.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(left.getType()!=  Token.THIS)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	2	None	replace
28	[BUG]  [BUGGY]  if(n.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(n.getType()!=  Token.THIS)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	2	None	replace
29	[BUG]  [BUGGY]  n  =  left.getFirstChild();  break;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  n  =  left.getFirstChild();  break;  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getFirstChild();  break;	  if(right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	2	None	replace
30	[BUG]  [BUGGY]  n  =  left.getNext();  break;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  n  =  left.getNext();  break;  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getNext();  break;	  if(right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	2	None	replace
31	[BUG]  [BUGGY]  n.removeChild(left);  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  n.removeChild(left);  break;  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.removeChild(left);  break;	  if(right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	2	None	replace
32	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(left.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.STRING)  {  break;  }	  if(right.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
33	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()  ==  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
34	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()  ==  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
35	[BUG]  [BUGGY]  while(n.getType()  ==  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  while(n.getType()  ==  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()  ==  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }	  if(right.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
36	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()  ==  Token.STRING  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.STRING  ||  right.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
37	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(left.getType()!=  Token.NAME)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	12	None	replace
38	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(n.getType()!=  Token.NAME)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	12	None	replace
39	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	12	None	replace
40	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	12	None	replace
41	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(left.getType()!=  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	12	None	replace
42	[BUG]  [BUGGY]  Node  right  =  left.getNext();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  Node  right  =  left.getNext();  break;  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.getNext();  break;	      	non-compiled	[CE]  orphaned  case	8	None	replace
43	[BUG]  [BUGGY]  result  =  right.getType();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  result  =  right.getType();  break;  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  right.getType();  break;	      	non-compiled	[CE]  orphaned  case	8	None	replace
44	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  Node  right  =  left.getFirstChild();  break;  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.getFirstChild();  break;	      	non-compiled	[CE]  orphaned  case	8	None	replace
45	[BUG]  [BUGGY]  result  =  right.getFirstChild().getNext();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  result  =  right.getFirstChild().getNext();  break;  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  right.getFirstChild().getNext();  break;	      	non-compiled	[CE]  orphaned  case	8	None	replace
46	[BUG]  [BUGGY]  Context.reportCodeChange();  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  Context.reportCodeChange();  break;  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Context.reportCodeChange();  break;	      	non-compiled	[CE]  orphaned  case	8	None	replace
47	[BUG]  [BUGGY]  result  =  right.getNext();  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  result  =  right.getNext();  break;  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  right.getNext();  break;	      	non-compiled	[CE]  orphaned  case	8	None	replace
48	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
49	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(n.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()  ==  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
50	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
51	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
52	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  n  =  right.getFirstChild();  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  right.getFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	11	None	replace
53	[BUG]  [BUGGY]  n  =  right.getLastChild();  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  n  =  right.getLastChild();  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  right.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	11	None	replace
54	[BUG]  [BUGGY]  if(right.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
55	[BUG]  [BUGGY]  if(right.getType()!=  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()!=  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
56	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(n.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
57	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
58	[BUG]  [BUGGY]  while(right.getType()!=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  while(right.getType()!=  Token.STRING)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.STRING)  {  break;  }	  if(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
59	[BUG]  [BUGGY]  n  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  n  =  left.removeFirstChild();  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.removeFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	11	None	replace
60	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNode);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  n  =  left.replaceChild(left,  newNode);  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.replaceChild(left,  newNode);	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	11	None	replace
61	[BUG]  [BUGGY]  if(left.getType()!=  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(left.getType()!=  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
62	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(left.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
63	[BUG]  [BUGGY]  if(left.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(left.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	5	None	replace
64	[BUG]  [BUGGY]  if(right.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	5	None	replace
65	[BUG]  [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	5	None	replace
66	[BUG]  [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	5	None	replace
67	[BUG]  [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	5	None	replace
68	[BUG]  [BUGGY]  n  =  left.getParent();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  n  =  left.getParent();  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getParent();	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	7	None	replace
69	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(left.getType()!=  Token.NAME  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.NAME  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	12	None	replace
70	[BUG]  [BUGGY]  while(right.getType()!=  Token.NAME)  {  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  while(right.getType()!=  Token.NAME)  {  n  =  left.getFirstChild();  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.NAME)  {  n  =  left.getFirstChild();	  if(right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	12	None	replace
71	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()!=  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
72	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()!=  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
73	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING  ||  right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()!=  Token.STRING  ||  right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING  ||  right.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
74	[BUG]  [BUGGY]  if(left.getType()!=  Token.GETELEM  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(left.getType()!=  Token.GETELEM  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.GETELEM  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
75	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()!=  Token.NAME  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.NAME  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
76	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.NAME  ||  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
77	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()!=  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
78	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  Node  right  =  left.getNext();  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	8	None	replace
79	[BUG]  [BUGGY]  if(right.getType()  ==  Token.GETELEM)  {  result  =  true;  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()  ==  Token.GETELEM)  {  result  =  true;  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.GETELEM)  {  result  =  true;  break;  }	      	non-compiled	[CE]  orphaned  case	8	None	replace
80	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	8	None	replace
81	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS)  {  return  n;  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()!=  Token.THIS)  {  return  n;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS)  {  return  n;  }	  if(right.getType()    ==    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	1	None	replace
82	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()!=  Token.THIS  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	1	None	replace
83	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()!=  Token.THIS  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	1	None	replace
84	[BUG]  [BUGGY]  while(right.getType()!=  Token.THIS)  {  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  while(right.getType()!=  Token.THIS)  {  n  =  left.getFirstChild();  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.THIS)  {  n  =  left.getFirstChild();	  if(right.getType()    ==    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	1	None	replace
85	[BUG]  [BUGGY]  n.setType(Token.FUNCTION);  break;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  n.setType(Token.FUNCTION);  break;  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.FUNCTION);  break;	  if(right.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	5	None	replace
86	[BUG]  [BUGGY]  n.setType(Token.NAME);  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  n.setType(Token.NAME);  break;  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.NAME);  break;	  if(right.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
87	[BUG]  [BUGGY]  if(right.getType()!=  Token.GETELEM  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(right.getType()!=  Token.GETELEM  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.GETELEM  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
88	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  if(n.getType()!=  Token.STRING)  {  break;  }  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.STRING)  {  break;  }	  if(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
89	[BUG]  [BUGGY]  n.setType(Token.GETELEM);  break;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  n.setType(Token.GETELEM);  break;  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.GETELEM);  break;	  if(right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
90	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  n);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  n  =  left.replaceChild(left,  n);  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.replaceChild(left,  n);	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	11	None	replace
91	[BUG]  [BUGGY]  n.setType(Token.STRING);  break;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  n.setType(Token.STRING);  break;  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.STRING);  break;	  if(right.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
92	[BUG]  [BUGGY]  n.setString(right.getString());  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  n.setString(right.getString());  break;  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setString(right.getString());  break;	      	non-compiled	[CE]  orphaned  case	8	None	replace
93	[BUG]  [BUGGY]  n.removeChild(right);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }    [BUGGY]  n.removeChild(right);  break;  [BUGGY]      case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.removeChild(right);  break;	      	non-compiled	[CE]  orphaned  case	8	None	replace
