bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n  =  right.getNext();  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  right.getNext();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  right.getNext();  break;	  n    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	30	None	replace
2	[BUG]  [BUGGY]  n  =  left.getLastChild();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getLastChild();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getLastChild();  break;	  n    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	30	None	replace
3	[BUG]  [BUGGY]  n  =  left.getNext()  +  1;  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getNext()  +  1;  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getNext()  +  1;  break;	  n    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	30	None	replace
4	[BUG]  [BUGGY]  n  =  left.getParent();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getParent();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getParent();  break;	  n    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	30	None	replace
5	[BUG]  [BUGGY]  Node  right  =  n.getNext();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  n.getNext();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  n.getNext();  break;	  Node    right    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	42	None	replace
6	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  left.getLastChild();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.getLastChild();  break;	  Node    right    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	42	None	replace
7	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  1;  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  left.getNext()  -  1;  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.getNext()  -  1;  break;	  Node    right    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	42	None	replace
8	[BUG]  [BUGGY]  Node  right  =  left.getNext()  +  1;  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  left.getNext()  +  1;  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.getNext()  +  1;  break;	  Node    right    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	42	None	replace
9	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  null;  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  left.getNext(),  null;  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.getNext(),  null;  break;	  Node    right    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	42	None	replace
10	[BUG]  [BUGGY]  while(left.getType()!=  Token.THIS)  {  n  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(left.getType()!=  Token.THIS)  {  n  =  right.getFirstChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(left.getType()!=  Token.THIS)  {  n  =  right.getFirstChild();	  while(right.getType()!=    Token.THIS)    {    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	84	None	replace
11	[BUG]  [BUGGY]  while(n.getType()!=  Token.THIS)  {  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()!=  Token.THIS)  {  n  =  left.getFirstChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()!=  Token.THIS)  {  n  =  left.getFirstChild();	  while(right.getType()!=    Token.THIS)    {    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	84	None	replace
12	[BUG]  [BUGGY]  while(left.getType()!=  Token.THIS)  {  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(left.getType()!=  Token.THIS)  {  n  =  left.getFirstChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(left.getType()!=  Token.THIS)  {  n  =  left.getFirstChild();	  while(right.getType()!=    Token.THIS)    {    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	84	None	replace
13	[BUG]  [BUGGY]  while(right.getType()!=  Token.THIS)  {  n  =  left.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.THIS)  {  n  =  left.getLastChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.THIS)  {  n  =  left.getLastChild();	  while(right.getType()!=    Token.THIS)    {    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	84	None	replace
14	[BUG]  [BUGGY]  while(n.getType()!=  Token.THIS)  {  n  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()!=  Token.THIS)  {  n  =  right.getFirstChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()!=  Token.THIS)  {  n  =  right.getFirstChild();	  while(right.getType()!=    Token.THIS)    {    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	84	None	replace
15	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME  ||  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.NAME  ||  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.NAME  ||  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.NAME    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	76	None	replace
16	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.NAME    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	76	None	replace
17	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.NAME  ||  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.NAME    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	76	None	replace
18	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME  ||  left.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.NAME  ||  left.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.NAME  ||  left.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.NAME    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	76	None	replace
19	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  &&  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.NAME  &&  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.NAME  &&  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.NAME    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	76	None	replace
20	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()  ==  Token.STRING)  {  break;  }	  if(n.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	88	None	replace
21	[BUG]  [BUGGY]  while(n.getType()!=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()!=  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()!=  Token.STRING)  {  break;  }	  if(n.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	88	None	replace
22	[BUG]  [BUGGY]  n.setType(Token.STRING);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.STRING);  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.STRING);	  if(n.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	88	None	replace
23	[BUG]  [BUGGY]  while(n.getType()!=  Token.STRING)  {  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()!=  Token.STRING)  {  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()!=  Token.STRING)  {  break;	  if(n.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	88	None	replace
24	[BUG]  [BUGGY]  if(n.getType()!=  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()!=  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.GETELEM    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
25	[BUG]  [BUGGY]  if(left.getType()!=  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.GETELEM    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
26	[BUG]  [BUGGY]  if(left.getType()!=  Token.STRING  ||  right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.STRING  ||  right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.STRING  ||  right.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	73	None	replace
27	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING  &&  right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.STRING  &&  right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING  &&  right.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	73	None	replace
28	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  ||  right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.STRING  ||  right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.STRING  ||  right.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	73	None	replace
29	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  ||  right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()!=  Token.STRING  ||  right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.STRING  ||  right.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	73	None	replace
30	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING  ||  right.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.STRING  ||  right.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING  ||  right.getType()  ==  Token.NAME)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	73	None	replace
31	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  &&  right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.STRING  &&  right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.STRING  &&  right.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	73	None	replace
32	[BUG]  [BUGGY]  if(right.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {  break;  }	  if(left.getType()    ==    Token.GETELEM    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	57	None	replace
33	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(left.getType()    ==    Token.GETELEM    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	57	None	replace
34	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {  break;  }	  if(left.getType()    ==    Token.GETELEM    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	57	None	replace
35	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(left.getType()    ==    Token.GETELEM    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	57	None	replace
36	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(n.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
37	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()  ==  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()  ==  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(n.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
38	[BUG]  [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	65	None	replace
39	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	65	None	replace
40	[BUG]  [BUGGY]  n.setType(Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	65	None	replace
41	[BUG]  [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	65	None	replace
42	[BUG]  [BUGGY]  n  =  right.getParent();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  right.getParent();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  right.getParent();	  n    =    left.getParent();    	non-compiled	[CE]  orphaned  case	68	None	replace
43	[BUG]  [BUGGY]  n  =  left.getString();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getString();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getString();	  n    =    left.getParent();    	non-compiled	[CE]  orphaned  case	68	None	replace
44	[BUG]  [BUGGY]  if(left.getType()  ==  Token.THIS  ||  right.getType()!=  Token.CALL)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.THIS  ||  right.getType()!=  Token.CALL)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.THIS  ||  right.getType()!=  Token.CALL)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.CALL)    {    break;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
45	[BUG]  [BUGGY]  if(right.getType()  ==  Token.THIS  &&  right.getType()!=  Token.CALL)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.THIS  &&  right.getType()!=  Token.CALL)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.THIS  &&  right.getType()!=  Token.CALL)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.CALL)    {    break;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
46	[BUG]  [BUGGY]  if(n.getType()  ==  Token.THIS  ||  right.getType()!=  Token.CALL)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()  ==  Token.THIS  ||  right.getType()!=  Token.CALL)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()  ==  Token.THIS  ||  right.getType()!=  Token.CALL)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.CALL)    {    break;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
47	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS  ||  right.getType()  ==  Token.CALL)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.THIS  ||  right.getType()  ==  Token.CALL)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS  ||  right.getType()  ==  Token.CALL)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.CALL)    {    break;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
48	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS  ||  right.getType()!=  Token.CALL)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.THIS  ||  right.getType()!=  Token.CALL)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS  ||  right.getType()!=  Token.CALL)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.CALL)    {    break;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
49	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS  &&  right.getType()!=  Token.CALL)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.THIS  &&  right.getType()!=  Token.CALL)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS  &&  right.getType()!=  Token.CALL)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.CALL)    {    break;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
50	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.GETELEM  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(left.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	62	None	replace
51	[BUG]  [BUGGY]  if(left.getType()!=  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	71	None	replace
52	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.STRING  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING  &&  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	71	None	replace
53	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()!=  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	71	None	replace
54	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.STRING  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	71	None	replace
55	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.STRING  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.STRING  &&  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	71	None	replace
56	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	25	None	replace
57	[BUG]  [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	25	None	replace
58	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	25	None	replace
59	[BUG]  [BUGGY]  n.setType(Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	25	None	replace
60	[BUG]  [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	25	None	replace
61	[BUG]  [BUGGY]  n.replaceChild(left,  newNode);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.replaceChild(left,  newNode);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.replaceChild(left,  newNode);  break;	  n.removeChild(right);    break;    	non-compiled	[CE]  orphaned  case	93	None	replace
62	[BUG]  [BUGGY]  n.removeChild(right.getString());  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.removeChild(right.getString());  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.removeChild(right.getString());  break;	  n.removeChild(right);    break;    	non-compiled	[CE]  orphaned  case	93	None	replace
63	[BUG]  [BUGGY]  n.removeChild(right.getFirstChild());  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.removeChild(right.getFirstChild());  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.removeChild(right.getFirstChild());  break;	  n.removeChild(right);    break;    	non-compiled	[CE]  orphaned  case	93	None	replace
64	[BUG]  [BUGGY]  node.removeChild(right);  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  node.removeChild(right);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	node.removeChild(right);  break;	  n.removeChild(right);    break;    	non-compiled	[CE]  orphaned  case	93	None	replace
65	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
66	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.NAME  &&  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
67	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()  ==  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
68	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.NAME  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.NAME  &&  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
69	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.NAME  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
70	[BUG]  [BUGGY]  n  =  right.removeFirstChild();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  right.removeFirstChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  right.removeFirstChild();	  n    =    left.removeFirstChild();    	non-compiled	[CE]  orphaned  case	59	None	replace
71	[BUG]  [BUGGY]  n  =  left.removeLastChild();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.removeLastChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.removeLastChild();	  n    =    left.removeFirstChild();    	non-compiled	[CE]  orphaned  case	59	None	replace
72	[BUG]  [BUGGY]  n  =  left.replaceChild(right,  newNode);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.replaceChild(right,  newNode);  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.replaceChild(right,  newNode);	  n    =    left.removeFirstChild();    	non-compiled	[CE]  orphaned  case	59	None	replace
73	[BUG]  [BUGGY]  while(right.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
74	[BUG]  [BUGGY]  while(left.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(left.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(left.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
75	[BUG]  [BUGGY]  while(n.getType()!=  Token.THIS)  {  if(right.getType()!=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()!=  Token.THIS)  {  if(right.getType()!=  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()!=  Token.THIS)  {  if(right.getType()!=  Token.STRING)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
76	[BUG]  [BUGGY]  n  =  right.getNext()  +  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  right.getNext()  +  1;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  right.getNext()  +  1;	  n    =    right.getNext();    	non-compiled	[CE]  orphaned  case	11	None	replace
77	[BUG]  [BUGGY]  result  =  left.getNext();  break;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  left.getNext();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  left.getNext();  break;	  result    =    right.getNext();    break;    	non-compiled	[CE]  orphaned  case	47	None	replace
78	[BUG]  [BUGGY]  result  =  right.getLastChild();  break;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  right.getLastChild();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  right.getLastChild();  break;	  result    =    right.getNext();    break;    	non-compiled	[CE]  orphaned  case	47	None	replace
79	[BUG]  [BUGGY]  result  =  right.getNext()  +  1;  break;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  right.getNext()  +  1;  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  right.getNext()  +  1;  break;	  result    =    right.getNext();    break;    	non-compiled	[CE]  orphaned  case	47	None	replace
80	[BUG]  [BUGGY]  result  =  right.getFirstChild();  break;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  right.getFirstChild();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  right.getFirstChild();  break;	  result    =    right.getNext();    break;    	non-compiled	[CE]  orphaned  case	47	None	replace
81	[BUG]  [BUGGY]  result  =  right.getNext()  -  1;  break;  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  right.getNext()  -  1;  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  right.getNext()  -  1;  break;	  result    =    right.getNext();    break;    	non-compiled	[CE]  orphaned  case	47	None	replace
82	[BUG]  [BUGGY]  result  =  n.getNext();  break;  [CE]  orphaned  case  [FE]                                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  n.getNext();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  n.getNext();  break;	  result    =    right.getNext();    break;    	non-compiled	[CE]  orphaned  case	47	None	replace
83	[BUG]  [BUGGY]  if(left.getType()  ==  Token.THIS  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.THIS  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.THIS  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	7	None	replace
84	[BUG]  [BUGGY]  if(right.getType()  ==  Token.THIS  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.THIS  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.THIS  &&  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	7	None	replace
85	[BUG]  [BUGGY]  if(n.getType()  ==  Token.THIS  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()  ==  Token.THIS  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()  ==  Token.THIS  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	7	None	replace
86	[BUG]  [BUGGY]  if(left.getType()  ==  Token.THIS  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.THIS  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.THIS  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	7	None	replace
87	[BUG]  [BUGGY]  if(right.getType()  ==  Token.THIS  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.THIS  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.THIS  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	7	None	replace
88	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  &&  right.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.STRING  &&  right.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.STRING  &&  right.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.STRING    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
89	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.STRING  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.STRING  ||  right.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.STRING    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
90	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()  ==  Token.STRING  ||  right.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.STRING    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
91	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING  &&  right.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.STRING  &&  right.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING  &&  right.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.STRING    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
92	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.STRING  ||  left.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.STRING    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
93	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING  ||  right.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.STRING  ||  right.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING  ||  right.getType()  ==  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.STRING    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
94	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.NAME  ||  right.getType()!=  Token.THIS)  {  break;  }	  if(left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	50	None	replace
95	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.NAME  ||  left.getType()!=  Token.THIS)  {  break;  }	  if(left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	50	None	replace
96	[BUG]  [BUGGY]  if(left.getType()  ==  Token.THIS  ||  right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.THIS  ||  right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.THIS  ||  right.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
97	[BUG]  [BUGGY]  if(right.getType()  ==  Token.THIS  &&  right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.THIS  &&  right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.THIS  &&  right.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
98	[BUG]  [BUGGY]  if(n.getType()  ==  Token.THIS  ||  right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()  ==  Token.THIS  ||  right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()  ==  Token.THIS  ||  right.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
99	[BUG]  [BUGGY]  if(left.getType()  ==  Token.THIS  ||  left.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.THIS  ||  left.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.THIS  ||  left.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
100	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS  ||  right.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.THIS  ||  right.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS  ||  right.getType()  ==  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
101	[BUG]  [BUGGY]  if(left.getType()!=  Token.THIS  ||  right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.THIS  ||  right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.THIS  ||  right.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
102	[BUG]  [BUGGY]  n.setType(Token.STRING,  result);  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.STRING,  result);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.STRING,  result);  break;	  n.setType(Token.STRING);    break;    	non-compiled	[CE]  orphaned  case	91	None	replace
103	[BUG]  [BUGGY]  n.setType(Token.STRING,  left);  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.STRING,  left);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.STRING,  left);  break;	  n.setType(Token.STRING);    break;    	non-compiled	[CE]  orphaned  case	91	None	replace
104	[BUG]  [BUGGY]  n.setType(Token.SCRIPT);  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.SCRIPT);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.SCRIPT);  break;	  n.setType(Token.STRING);    break;    	non-compiled	[CE]  orphaned  case	91	None	replace
105	[BUG]  [BUGGY]  while(left.getType()!=  Token.NAME)  {  n  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(left.getType()!=  Token.NAME)  {  n  =  right.getFirstChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(left.getType()!=  Token.NAME)  {  n  =  right.getFirstChild();	  while(right.getType()!=    Token.NAME)    {    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	70	None	replace
106	[BUG]  [BUGGY]  while(n.getType()!=  Token.NAME)  {  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()!=  Token.NAME)  {  n  =  left.getFirstChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()!=  Token.NAME)  {  n  =  left.getFirstChild();	  while(right.getType()!=    Token.NAME)    {    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	70	None	replace
107	[BUG]  [BUGGY]  while(left.getType()!=  Token.NAME)  {  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(left.getType()!=  Token.NAME)  {  n  =  left.getFirstChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(left.getType()!=  Token.NAME)  {  n  =  left.getFirstChild();	  while(right.getType()!=    Token.NAME)    {    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	70	None	replace
108	[BUG]  [BUGGY]  while(right.getType()!=  Token.NAME)  {  n  =  left.getLastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.NAME)  {  n  =  left.getLastChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.NAME)  {  n  =  left.getLastChild();	  while(right.getType()!=    Token.NAME)    {    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	70	None	replace
109	[BUG]  [BUGGY]  while(n.getType()!=  Token.NAME)  {  n  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()!=  Token.NAME)  {  n  =  right.getFirstChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()!=  Token.NAME)  {  n  =  right.getFirstChild();	  while(right.getType()!=    Token.NAME)    {    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	70	None	replace
110	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.NAME  &&  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
111	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()  ==  Token.NAME  ||  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
112	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }	  if(left.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	32	None	replace
113	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.STRING  ||  left.getType()!=  Token.THIS)  {  break;  }	  if(left.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	32	None	replace
114	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(left.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	32	None	replace
115	[BUG]  [BUGGY]  node.removeChild(left);  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  node.removeChild(left);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	node.removeChild(left);  break;	  n.removeChild(left);    break;    	non-compiled	[CE]  orphaned  case	31	None	replace
116	[BUG]  [BUGGY]  n.addChildToBack(right);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.addChildToBack(right);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.addChildToBack(right);  break;	  n.removeChild(left);    break;    	non-compiled	[CE]  orphaned  case	31	None	replace
117	[BUG]  [BUGGY]  n.setType(Token.THIS);  break;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.THIS);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.THIS);  break;	  if(left.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	27	None	replace
118	[BUG]  [BUGGY]  if(n.getType()!=  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()!=  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.GETELEM    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
119	[BUG]  [BUGGY]  while(right.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.STRING)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(left.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	19	None	replace
120	[BUG]  [BUGGY]  while(left.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(left.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(left.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.STRING)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(left.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	19	None	replace
121	[BUG]  [BUGGY]  while(left.getType()!=  Token.THIS)  {  if(left.getType()!=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(left.getType()!=  Token.THIS)  {  if(left.getType()!=  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(left.getType()!=  Token.THIS)  {  if(left.getType()!=  Token.STRING)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(left.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	19	None	replace
122	[BUG]  [BUGGY]  while(n.getType()  ==  Token.STRING)  {  if(left.getType()!=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()  ==  Token.STRING)  {  if(left.getType()!=  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()  ==  Token.STRING)  {  if(left.getType()!=  Token.STRING)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(left.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	19	None	replace
123	[BUG]  [BUGGY]  n  =  left.getNext()  &&  right.getType()  ==  Token.THIS;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getNext()  &&  right.getType()  ==  Token.THIS;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getNext()  &&  right.getType()  ==  Token.THIS;	  n    =    left.getNext()    ||    right.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	14	None	replace
124	[BUG]  [BUGGY]  n  =  left.getFirstChild()  ||  right.getType()  ==  Token.THIS;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getFirstChild()  ||  right.getType()  ==  Token.THIS;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getFirstChild()  ||  right.getType()  ==  Token.THIS;	  n    =    left.getNext()    ||    right.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	14	None	replace
125	[BUG]  [BUGGY]  n  =  left.getNext()  ||  right.getType()!=  Token.THIS;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getNext()  ||  right.getType()!=  Token.THIS;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getNext()  ||  right.getType()!=  Token.THIS;	  n    =    left.getNext()    ||    right.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	14	None	replace
126	[BUG]  [BUGGY]  n  =  right.getNext()  ||  left.getType()  ==  Token.THIS;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  right.getNext()  ||  left.getType()  ==  Token.THIS;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  right.getNext()  ||  left.getType()  ==  Token.THIS;	  n    =    left.getNext()    ||    right.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	14	None	replace
127	[BUG]  [BUGGY]  n  =  left.getParent()  ||  right.getType()  ==  Token.THIS;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getParent()  ||  right.getType()  ==  Token.THIS;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getParent()  ||  right.getType()  ==  Token.THIS;	  n    =    left.getNext()    ||    right.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	14	None	replace
128	[BUG]  [BUGGY]  n  =  left.getNext()  &&  right.getType()!=  Token.THIS;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getNext()  &&  right.getType()!=  Token.THIS;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getNext()  &&  right.getType()!=  Token.THIS;	  n    =    left.getNext()    ||    right.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	14	None	replace
129	[BUG]  [BUGGY]  n  =  left.replaceChild(right,  n);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.replaceChild(right,  n);  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.replaceChild(right,  n);	  n    =    left.replaceChild(left,    n);    	non-compiled	[CE]  orphaned  case	90	None	replace
130	[BUG]  [BUGGY]  n  =  right.replaceChild(left,  n);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  right.replaceChild(left,  n);  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  right.replaceChild(left,  n);	  n    =    left.replaceChild(left,    n);    	non-compiled	[CE]  orphaned  case	90	None	replace
131	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.replaceChild(left,  right);  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.replaceChild(left,  right);	  n    =    left.replaceChild(left,    n);    	non-compiled	[CE]  orphaned  case	90	None	replace
132	[BUG]  [BUGGY]  n  =  left.replaceChild(n,  left);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.replaceChild(n,  left);  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.replaceChild(n,  left);	  n    =    left.replaceChild(left,    n);    	non-compiled	[CE]  orphaned  case	90	None	replace
133	[BUG]  [BUGGY]  while(right.getType()!=  Token.STRING)  {  if(right.getType()  ==  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.STRING)  {  if(right.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.STRING)  {  if(right.getType()  ==  Token.STRING)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	18	None	replace
134	[BUG]  [BUGGY]  while(left.getType()!=  Token.STRING)  {  if(right.getType()  ==  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(left.getType()!=  Token.STRING)  {  if(right.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(left.getType()!=  Token.STRING)  {  if(right.getType()  ==  Token.STRING)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	18	None	replace
135	[BUG]  [BUGGY]  while(n.getType()!=  Token.THIS)  {  if(right.getType()  ==  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()!=  Token.THIS)  {  if(right.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()!=  Token.THIS)  {  if(right.getType()  ==  Token.STRING)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	18	None	replace
136	[BUG]  [BUGGY]  while(n.getType()!=  Token.STRING)  {  if(left.getType()  ==  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()!=  Token.STRING)  {  if(left.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()!=  Token.STRING)  {  if(left.getType()  ==  Token.STRING)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	18	None	replace
137	[BUG]  [BUGGY]  while(n.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.STRING)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	18	None	replace
138	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	64	None	replace
139	[BUG]  [BUGGY]  if(right.getType()!=  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {  break;  }	  if(left.getType()!=    Token.GETELEM    ||    left.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	61	None	replace
140	[BUG]  [BUGGY]  if(left.getType()!=  Token.THIS  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.THIS  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.THIS  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.THIS    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	83	None	replace
141	[BUG]  [BUGGY]  if(n.getType()!=  Token.THIS  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()!=  Token.THIS  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.THIS  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.THIS    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	83	None	replace
142	[BUG]  [BUGGY]  if(left.getType()  ==  Token.THIS  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.THIS  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.THIS  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.THIS    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	83	None	replace
143	[BUG]  [BUGGY]  if(left.getType()!=  Token.THIS  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.THIS  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.THIS  ||  left.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.THIS    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	83	None	replace
144	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(left.getType()!=    Token.NAME    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	41	None	replace
145	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.NAME  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.NAME  &&  right.getType()!=  Token.GETELEM)  {  break;  }	  if(left.getType()!=    Token.NAME    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	41	None	replace
146	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(left.getType()!=    Token.NAME    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	41	None	replace
147	[BUG]  [BUGGY]  result  =  true;  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  true;  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  true;  break;	  if(right.getType()    ==    Token.GETELEM)    {    result    =    true;    break;    }    	non-compiled	[CE]  orphaned  case	79	None	replace
148	[BUG]  [BUGGY]  if(right.getType()  ==  Token.GETELEM)  {  result  =  false;  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.GETELEM)  {  result  =  false;  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.GETELEM)  {  result  =  false;  break;  }	  if(right.getType()    ==    Token.GETELEM)    {    result    =    true;    break;    }    	non-compiled	[CE]  orphaned  case	79	None	replace
149	[BUG]  [BUGGY]  if(right.getType()  ==  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  result  =  true;  break;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  result  =  true;  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  result  =  true;  break;  }	  if(right.getType()    ==    Token.GETELEM)    {    result    =    true;    break;    }    	non-compiled	[CE]  orphaned  case	79	None	replace
150	[BUG]  [BUGGY]  if(right.getType()!=  Token.GETELEM)  {  result  =  false;  break;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.GETELEM)  {  result  =  false;  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.GETELEM)  {  result  =  false;  break;  }	  if(right.getType()    ==    Token.GETELEM)    {    result    =    true;    break;    }    	non-compiled	[CE]  orphaned  case	79	None	replace
151	[BUG]  [BUGGY]  if(right.getType()!=  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  result  =  true;  break;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  result  =  true;  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  result  =  true;  break;  }	  if(right.getType()    ==    Token.GETELEM)    {    result    =    true;    break;    }    	non-compiled	[CE]  orphaned  case	79	None	replace
152	[BUG]  [BUGGY]  if(right.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  result  =  true;  break;  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  result  =  true;  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  result  =  true;  break;  }	  if(right.getType()    ==    Token.GETELEM)    {    result    =    true;    break;    }    	non-compiled	[CE]  orphaned  case	79	None	replace
153	[BUG]  [BUGGY]  n.setString(left.getString());  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setString(left.getString());  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setString(left.getString());  break;	  n.setString(right.getString());    break;    	non-compiled	[CE]  orphaned  case	92	None	replace
154	[BUG]  [BUGGY]  n.setString(right.getString()  +  1);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setString(right.getString()  +  1);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setString(right.getString()  +  1);  break;	  n.setString(right.getString());    break;    	non-compiled	[CE]  orphaned  case	92	None	replace
155	[BUG]  [BUGGY]  n.setString(right.getString()  + ": ");  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setString(right.getString()  + ": ");  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setString(right.getString()  + ": ");  break;	  n.setString(right.getString());    break;    	non-compiled	[CE]  orphaned  case	92	None	replace
156	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  &&  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.STRING  &&  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.STRING  &&  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()    ==    Token.STRING    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
157	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING  &&  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.STRING  &&  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING  &&  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()    ==    Token.STRING    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
158	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()  ==  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()    ==    Token.STRING    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
159	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING  ||  right.getType()  ==  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.STRING  ||  right.getType()  ==  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING  ||  right.getType()  ==  Token.THIS)  {  break;  }	  if(right.getType()    ==    Token.STRING    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
160	[BUG]  [BUGGY]  if(left.getType()!=  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	72	None	replace
161	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()!=  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	72	None	replace
162	[BUG]  [BUGGY]  n  =  left.getNext()  &&  right.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getNext()  &&  right.getType()  ==  Token.GETELEM;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getNext()  &&  right.getType()  ==  Token.GETELEM;	  n    =    left.getNext()    ||    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	15	None	replace
163	[BUG]  [BUGGY]  n  =  left.getFirstChild()  ||  right.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getFirstChild()  ||  right.getType()  ==  Token.GETELEM;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getFirstChild()  ||  right.getType()  ==  Token.GETELEM;	  n    =    left.getNext()    ||    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	15	None	replace
164	[BUG]  [BUGGY]  n  =  left.getNext()  ||  right.getType()!=  Token.GETELEM;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getNext()  ||  right.getType()!=  Token.GETELEM;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getNext()  ||  right.getType()!=  Token.GETELEM;	  n    =    left.getNext()    ||    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	15	None	replace
165	[BUG]  [BUGGY]  n  =  right.getNext()  ||  left.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  right.getNext()  ||  left.getType()  ==  Token.GETELEM;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  right.getNext()  ||  left.getType()  ==  Token.GETELEM;	  n    =    left.getNext()    ||    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	15	None	replace
166	[BUG]  [BUGGY]  n  =  left.getParent()  ||  right.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getParent()  ||  right.getType()  ==  Token.GETELEM;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getParent()  ||  right.getType()  ==  Token.GETELEM;	  n    =    left.getNext()    ||    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	15	None	replace
167	[BUG]  [BUGGY]  n  =  left.getNext()  &&  right.getType()!=  Token.GETELEM;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getNext()  &&  right.getType()!=  Token.GETELEM;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getNext()  &&  right.getType()!=  Token.GETELEM;	  n    =    left.getNext()    ||    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	15	None	replace
168	[BUG]  [BUGGY]  if(right.getType()  ==  Token.THIS)  {  return  n;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.THIS)  {  return  n;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.THIS)  {  return  n;  }	  if(right.getType()!=    Token.THIS)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	81	None	replace
169	[BUG]  [BUGGY]  if(right.getType()  ==  Token.THIS)  {  return  left;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.THIS)  {  return  left;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.THIS)  {  return  left;  }	  if(right.getType()!=    Token.THIS)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	81	None	replace
170	[BUG]  [BUGGY]  if(left.getType()!=  Token.THIS)  {  return  n;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.THIS)  {  return  n;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.THIS)  {  return  n;  }	  if(right.getType()!=    Token.THIS)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	81	None	replace
171	[BUG]  [BUGGY]  if(right.getType()  ==  Token.THIS)  {  return  right;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.THIS)  {  return  right;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.THIS)  {  return  right;  }	  if(right.getType()!=    Token.THIS)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	81	None	replace
172	[BUG]  [BUGGY]  if(left.getType()!=  Token.THIS)  {  return  right;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.THIS)  {  return  right;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.THIS)  {  return  right;  }	  if(right.getType()!=    Token.THIS)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	81	None	replace
173	[BUG]  [BUGGY]  if(right.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.GETELEM    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
174	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	21	None	replace
175	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	21	None	replace
176	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.FUNCTION  &&  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	21	None	replace
177	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()    ==    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
178	[BUG]  [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()    ==    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
179	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()    ==    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
180	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()    ==    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
181	[BUG]  [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()    ==    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
182	[BUG]  [BUGGY]  n.setType(Token.FUNCTION,  left);  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.FUNCTION,  left);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.FUNCTION,  left);  break;	  n.setType(Token.FUNCTION);    break;    	non-compiled	[CE]  orphaned  case	85	None	replace
183	[BUG]  [BUGGY]  n.setType(Token.FUNCTION)result;  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.FUNCTION)result;  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.FUNCTION)result;  break;	  n.setType(Token.FUNCTION);    break;    	non-compiled	[CE]  orphaned  case	85	None	replace
184	[BUG]  [BUGGY]  n.setType(Token.FUNCTION  |  Token.NAME);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.FUNCTION  |  Token.NAME);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.FUNCTION  |  Token.NAME);  break;	  n.setType(Token.FUNCTION);    break;    	non-compiled	[CE]  orphaned  case	85	None	replace
185	[BUG]  [BUGGY]  n.setType(Token.CALL);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.CALL);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.CALL);  break;	  n.setType(Token.FUNCTION);    break;    	non-compiled	[CE]  orphaned  case	85	None	replace
186	[BUG]  [BUGGY]  if(left.getType()  ==  Token.THIS  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.THIS  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.THIS  ||  right.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	8	None	replace
187	[BUG]  [BUGGY]  if(right.getType()  ==  Token.THIS  &&  right.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.THIS  &&  right.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.THIS  &&  right.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	8	None	replace
188	[BUG]  [BUGGY]  if(n.getType()  ==  Token.THIS  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()  ==  Token.THIS  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()  ==  Token.THIS  ||  right.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	8	None	replace
189	[BUG]  [BUGGY]  if(left.getType()  ==  Token.THIS  ||  left.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.THIS  ||  left.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.THIS  ||  left.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	8	None	replace
190	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS  &&  right.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.THIS  &&  right.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS  &&  right.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	8	None	replace
191	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS  ||  right.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.THIS  ||  right.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS  ||  right.getType()  ==  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	8	None	replace
192	[BUG]  [BUGGY]  n  =  right.replaceChild(left,  newNode);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  right.replaceChild(left,  newNode);  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  right.replaceChild(left,  newNode);	  n    =    left.replaceChild(left,    newNode);    	non-compiled	[CE]  orphaned  case	60	None	replace
193	[BUG]  [BUGGY]  n  =  left.replaceChild(n,  newNode);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.replaceChild(n,  newNode);  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.replaceChild(n,  newNode);	  n    =    left.replaceChild(left,    newNode);    	non-compiled	[CE]  orphaned  case	60	None	replace
194	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNode,  this);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.replaceChild(left,  newNode,  this);  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.replaceChild(left,  newNode,  this);	  n    =    left.replaceChild(left,    newNode);    	non-compiled	[CE]  orphaned  case	60	None	replace
195	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNode,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.replaceChild(left,  newNode,  right);  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.replaceChild(left,  newNode,  right);	  n    =    left.replaceChild(left,    newNode);    	non-compiled	[CE]  orphaned  case	60	None	replace
196	[BUG]  [BUGGY]  n  =  left.replaceChild(newNode,  left);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.replaceChild(newNode,  left);  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.replaceChild(newNode,  left);	  n    =    left.replaceChild(left,    newNode);    	non-compiled	[CE]  orphaned  case	60	None	replace
197	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()  ==  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.STRING    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	34	None	replace
198	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.STRING  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.STRING    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	34	None	replace
199	[BUG]  [BUGGY]  if(left.getType()!=  Token.THIS  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.THIS  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.THIS  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.THIS    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	82	None	replace
200	[BUG]  [BUGGY]  if(n.getType()!=  Token.THIS  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()!=  Token.THIS  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.THIS  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.THIS    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	82	None	replace
201	[BUG]  [BUGGY]  if(left.getType()!=  Token.THIS  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.THIS  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.THIS  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.THIS    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	82	None	replace
202	[BUG]  [BUGGY]  if(right.getType()  ==  Token.GETELEM  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.GETELEM  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.GETELEM  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.GETELEM    ||    left.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	87	None	replace
203	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  n.getFirstChild();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  n.getFirstChild();  break;	  Node    right    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	44	None	replace
204	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  n.getLastChild();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  n.getLastChild();  break;	  Node    right    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	44	None	replace
205	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  left.removeFirstChild();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.removeFirstChild();  break;	  Node    right    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	44	None	replace
206	[BUG]  [BUGGY]  n  =  left.getfirstChild();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getfirstChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getfirstChild();	  n    =    right.getLastChild();    	non-compiled	[CE]  orphaned  case	53	None	replace
207	[BUG]  [BUGGY]  result  =  left.getType();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  left.getType();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  left.getType();  break;	  result    =    right.getType();    break;    	non-compiled	[CE]  orphaned  case	43	None	replace
208	[BUG]  [BUGGY]  result  =  n.getType();  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  n.getType();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  n.getType();  break;	  result    =    right.getType();    break;    	non-compiled	[CE]  orphaned  case	43	None	replace
209	[BUG]  [BUGGY]  result  =  right.getType()  +  1;  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  right.getType()  +  1;  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  right.getType()  +  1;  break;	  result    =    right.getType();    break;    	non-compiled	[CE]  orphaned  case	43	None	replace
210	[BUG]  [BUGGY]  result  =  right.getString();  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  right.getString();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  right.getString();  break;	  result    =    right.getType();    break;    	non-compiled	[CE]  orphaned  case	43	None	replace
211	[BUG]  [BUGGY]  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    left.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	66	None	replace
212	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.getLastChild();	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	78	None	replace
213	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  n.getNext();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  n.getNext();	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	78	None	replace
214	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  left.getNext()  -  1;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.getNext()  -  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	78	None	replace
215	[BUG]  [BUGGY]  Node  right  =  left.getNext()  +  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  left.getNext()  +  1;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.getNext()  +  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	78	None	replace
216	[BUG]  [BUGGY]  Node  right  =  left.getNext()  :  null;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  left.getNext()  :  null;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.getNext()  :  null;	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	78	None	replace
217	[BUG]  [BUGGY]  while(n.getType()  ==  Token.THIS)  {  if(right.getType()!=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()  ==  Token.THIS)  {  if(right.getType()!=  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()  ==  Token.THIS)  {  if(right.getType()!=  Token.STRING)  {  break;  }	  while(n.getType()    ==    Token.STRING)    {    if(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
218	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.NAME  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.NAME    ||    left.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	75	None	replace
219	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.THIS)  {  break;  }	  if(left.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
220	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.THIS)  {  break;  }	  if(left.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
221	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(left.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
222	[BUG]  [BUGGY]  if(right.getType()  ==  Token.GETELEM  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.GETELEM  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.GETELEM  &&  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.GETELEM    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
223	[BUG]  [BUGGY]  Context.report(n,  INVALID_GETELEM_INDEX_ERROR);  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Context.report(n,  INVALID_GETELEM_INDEX_ERROR);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Context.report(n,  INVALID_GETELEM_INDEX_ERROR);  break;	  Context.reportCodeChange();    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
224	[BUG]  [BUGGY]  Context.report(JSError.make(left,  n,  INVALID_GETELEM_INDEX_ERROR));  break;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Context.report(JSError.make(left,  n,  INVALID_GETELEM_INDEX_ERROR));  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Context.report(JSError.make(left,  n,  INVALID_GETELEM_INDEX_ERROR));  break;	  Context.reportCodeChange();    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
225	[BUG]  [BUGGY]  Context.report(JSError.make(right,  n,  INVALID_GETELEM_INDEX_ERROR));  break;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Context.report(JSError.make(right,  n,  INVALID_GETELEM_INDEX_ERROR));  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Context.report(JSError.make(right,  n,  INVALID_GETELEM_INDEX_ERROR));  break;	  Context.reportCodeChange();    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
226	[BUG]  [BUGGY]  Context.report(JSError.make(left,  n,  MISSING_A_NON_NUMBER_ERROR));  break;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Context.report(JSError.make(left,  n,  MISSING_A_NON_NUMBER_ERROR));  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Context.report(JSError.make(left,  n,  MISSING_A_NON_NUMBER_ERROR));  break;	  Context.reportCodeChange();    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
227	[BUG]  [BUGGY]  n.setType(Token.GETELEM,  result);  break;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.GETELEM,  result);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.GETELEM,  result);  break;	  n.setType(Token.GETELEM);    break;    	non-compiled	[CE]  orphaned  case	89	None	replace
228	[BUG]  [BUGGY]  n.setType(Token.GETELEM,  right);  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.GETELEM,  right);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.GETELEM,  right);  break;	  n.setType(Token.GETELEM);    break;    	non-compiled	[CE]  orphaned  case	89	None	replace
229	[BUG]  [BUGGY]  n.setType(Token.GETELEM,  left);  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.GETELEM,  left);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.GETELEM,  left);  break;	  n.setType(Token.GETELEM);    break;    	non-compiled	[CE]  orphaned  case	89	None	replace
230	[BUG]  [BUGGY]  node.setType(Token.GETELEM);  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  node.setType(Token.GETELEM);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	node.setType(Token.GETELEM);  break;	  n.setType(Token.GETELEM);    break;    	non-compiled	[CE]  orphaned  case	89	None	replace
231	[BUG]  [BUGGY]  n.setType(Token.SETELEM);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.SETELEM);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.SETELEM);  break;	  n.setType(Token.GETELEM);    break;    	non-compiled	[CE]  orphaned  case	89	None	replace
232	[BUG]  [BUGGY]  result  =  left.getFirstChild().getNext();  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  left.getFirstChild().getNext();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  left.getFirstChild().getNext();  break;	  result    =    right.getFirstChild().getNext();    break;    	non-compiled	[CE]  orphaned  case	45	None	replace
233	[BUG]  [BUGGY]  result  =  right.getLastChild().getNext();  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  right.getLastChild().getNext();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  right.getLastChild().getNext();  break;	  result    =    right.getFirstChild().getNext();    break;    	non-compiled	[CE]  orphaned  case	45	None	replace
234	[BUG]  [BUGGY]  result  =  left.getLastChild().getNext();  break;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  left.getLastChild().getNext();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  left.getLastChild().getNext();  break;	  result    =    right.getFirstChild().getNext();    break;    	non-compiled	[CE]  orphaned  case	45	None	replace
235	[BUG]  [BUGGY]  result  =  n.getFirstChild().getNext();  break;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  n.getFirstChild().getNext();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  n.getFirstChild().getNext();  break;	  result    =    right.getFirstChild().getNext();    break;    	non-compiled	[CE]  orphaned  case	45	None	replace
236	[BUG]  [BUGGY]  result  =  right.getFirstChild().getNext()  +  1;  break;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  right.getFirstChild().getNext()  +  1;  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  right.getFirstChild().getNext()  +  1;  break;	  result    =    right.getFirstChild().getNext();    break;    	non-compiled	[CE]  orphaned  case	45	None	replace
237	[BUG]  [BUGGY]  while(right.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.NAME)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	20	None	replace
238	[BUG]  [BUGGY]  while(n.getType()  ==  Token.STRING)  {  if(right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()  ==  Token.STRING)  {  if(right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()  ==  Token.STRING)  {  if(right.getType()!=  Token.NAME)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	20	None	replace
239	[BUG]  [BUGGY]  while(n.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.NAME)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	20	None	replace
240	[BUG]  [BUGGY]  while(left.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(left.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(left.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.NAME)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	20	None	replace
241	[BUG]  [BUGGY]  while(n.getType()!=  Token.STRING)  {  if(right.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()!=  Token.STRING)  {  if(right.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()!=  Token.STRING)  {  if(right.getType()  ==  Token.NAME)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	20	None	replace
242	[BUG]  [BUGGY]  while(n.getType()  ==  Token.STRING)  {  if(left.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()  ==  Token.STRING)  {  if(left.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()  ==  Token.STRING)  {  if(left.getType()!=  Token.NAME)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	20	None	replace
243	[BUG]  [BUGGY]  n  =  right.getFirstChild();  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  right.getFirstChild();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  right.getFirstChild();  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	29	None	replace
244	[BUG]  [BUGGY]  n  =  right.getLastChild();  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  right.getLastChild();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  right.getLastChild();  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	29	None	replace
245	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	24	None	replace
246	[BUG]  [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	24	None	replace
247	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	24	None	replace
248	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  &&  right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  &&  right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.FUNCTION  &&  right.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	24	None	replace
249	[BUG]  [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	24	None	replace
250	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	24	None	replace
251	[BUG]  [BUGGY]  n  =  left.getFirstChild().getNext()  +  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getFirstChild().getNext()  +  1;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getFirstChild().getNext()  +  1;	  n    =    left.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	12	None	replace
252	[BUG]  [BUGGY]  n  =  left.getParent()  +  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getParent()  +  1;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getParent()  +  1;	  n    =    left.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	12	None	replace
253	[BUG]  [BUGGY]  n  =  left.getFirstChild()  +  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getFirstChild()  +  1;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getFirstChild()  +  1;	  n    =    left.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	12	None	replace
254	[BUG]  [BUGGY]  n  =  left.getLastChild().getNext()  +  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getLastChild().getNext()  +  1;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getLastChild().getNext()  +  1;	  n    =    left.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	12	None	replace
255	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	22	None	replace
256	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  &&  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  &&  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.FUNCTION  &&  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	22	None	replace
257	[BUG]  [BUGGY]  while(left.getType()!=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(left.getType()!=  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(left.getType()!=  Token.STRING)  {  break;  }	  while(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
258	[BUG]  [BUGGY]  while(right.getType()  ==  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()  ==  Token.STRING)  {  break;  }	  while(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
259	[BUG]  [BUGGY]  while(right.getType()!=  Token.STRING  &&  right.getChildCount()  >  1)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.STRING  &&  right.getChildCount()  >  1)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.STRING  &&  right.getChildCount()  >  1)  {  break;  }	  while(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
260	[BUG]  [BUGGY]  while(n.getType()  ==  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()  ==  Token.STRING)  {  break;  }	  while(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
261	[BUG]  [BUGGY]  while(n.getType()  >=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()  >=  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()  >=  Token.STRING)  {  break;  }	  while(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
262	[BUG]  [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	67	None	replace
263	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	67	None	replace
264	[BUG]  [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	67	None	replace
265	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  n.getFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	80	None	replace
266	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  left.removeFirstChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.removeFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	80	None	replace
267	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  n.getLastChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	80	None	replace
268	[BUG]  [BUGGY]  Node  right  =  left.cloneTree();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  left.cloneTree();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.cloneTree();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	80	None	replace
269	[BUG]  [BUGGY]  while(n.getType()!=  Token.THIS)  {  if(right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()!=  Token.THIS)  {  if(right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()!=  Token.THIS)  {  if(right.getType()!=  Token.THIS)  {  break;  }	  if(n.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	28	None	replace
270	[BUG]  [BUGGY]  while(n.getType()!=  Token.THIS)  {  if(right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()!=  Token.THIS)  {  if(right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()!=  Token.THIS)  {  if(right.getType()!=  Token.GETELEM)  {  break;  }	  if(n.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	28	None	replace
271	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.NAME    ||    left.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
272	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.NAME    ||    left.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
273	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.NAME    ||    left.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
274	[BUG]  [BUGGY]  n.setType(Token.NAME,  left);  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.NAME,  left);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.NAME,  left);  break;	  n.setType(Token.NAME);    break;    	non-compiled	[CE]  orphaned  case	86	None	replace
275	[BUG]  [BUGGY]  n.setType(Token.NAME,  result);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.NAME,  result);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.NAME,  result);  break;	  n.setType(Token.NAME);    break;    	non-compiled	[CE]  orphaned  case	86	None	replace
276	[BUG]  [BUGGY]  n.setType(Token.NAME,  left.getString());  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.NAME,  left.getString());  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.NAME,  left.getString());  break;	  n.setType(Token.NAME);    break;    	non-compiled	[CE]  orphaned  case	86	None	replace
277	[BUG]  [BUGGY]  n.setType(Token.NAME,  right);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.NAME,  right);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.NAME,  right);  break;	  n.setType(Token.NAME);    break;    	non-compiled	[CE]  orphaned  case	86	None	replace
278	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.NAME    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	51	None	replace
279	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.NAME    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	51	None	replace
280	[BUG]  [BUGGY]  if(left.getType()  ==  Token.THIS  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.THIS  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.THIS  ||  left.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.THIS    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	83	None	replace
281	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.THIS  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS  ||  left.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.THIS    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	83	None	replace
282	[BUG]  [BUGGY]  n.setType(Token.TYPE);  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.TYPE);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.TYPE);  break;	  n.setType(Token.STRING);    break;    	non-compiled	[CE]  orphaned  case	91	None	replace
283	[BUG]  [BUGGY]  Node  right  =  left.next();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  left.next();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.next();  break;	  Node    right    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	42	None	replace
284	[BUG]  [BUGGY]  n  =  left.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getFirstChild().getNext();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getFirstChild().getNext();	  n    =    left.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	12	None	replace
285	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  left.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.NAME  ||  left.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.NAME  ||  left.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
286	[BUG]  [BUGGY]  while(right.getType()  ==  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()  ==  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()  ==  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }	  while(n.getType()    ==    Token.STRING)    {    if(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
287	[BUG]  [BUGGY]  while(left.getType()  ==  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(left.getType()  ==  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(left.getType()  ==  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }	  while(n.getType()    ==    Token.STRING)    {    if(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
288	[BUG]  [BUGGY]  while(left.getType()!=  Token.GETELEM)  {  left  =  left.getNext();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(left.getType()!=  Token.GETELEM)  {  left  =  left.getNext();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(left.getType()!=  Token.GETELEM)  {  left  =  left.getNext();	  if(left.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	2	None	replace
289	[BUG]  [BUGGY]  while(right.getType()!=  Token.THIS)  {  if(right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.THIS)  {  if(right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.THIS)  {  if(right.getType()!=  Token.THIS)  {  break;  }	  if(n.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	28	None	replace
290	[BUG]  [BUGGY]  while(right.getType()!=  Token.THIS)  {  if(right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.THIS)  {  if(right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.THIS)  {  if(right.getType()!=  Token.GETELEM)  {  break;  }	  if(n.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	28	None	replace
291	[BUG]  [BUGGY]  while(right.getType()!=  Token.THIS)  {  if(left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.THIS)  {  if(left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.THIS)  {  if(left.getType()!=  Token.GETELEM)  {  break;  }	  if(n.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	28	None	replace
292	[BUG]  [BUGGY]  if(right.getType()!=  Token.GETELEM  &&  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.GETELEM  &&  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.GETELEM  &&  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.GETELEM    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
293	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.NAME    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	51	None	replace
294	[BUG]  [BUGGY]  result  =  right.getType()  -  1;  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  right.getType()  -  1;  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  right.getType()  -  1;  break;	  result    =    right.getType();    break;    	non-compiled	[CE]  orphaned  case	43	None	replace
295	[BUG]  [BUGGY]  if(left.getType()!=  Token.THIS  ||  left.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.THIS  ||  left.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.THIS  ||  left.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	8	None	replace
296	[BUG]  [BUGGY]  if(left.getType()!=  Token.THIS  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.THIS  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.THIS  ||  right.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	8	None	replace
297	[BUG]  [BUGGY]  n  =  left.removeFirstChild();  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.removeFirstChild();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.removeFirstChild();  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	29	None	replace
298	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNode);  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.replaceChild(left,  newNode);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.replaceChild(left,  newNode);  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	29	None	replace
299	[BUG]  [BUGGY]  Node  right  =  left.cloneTree();  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  left.cloneTree();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.cloneTree();  break;	  Node    right    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	44	None	replace
300	[BUG]  [BUGGY]  Node  right  =  left.replaceChild(n,  newNode);  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  left.replaceChild(n,  newNode);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.replaceChild(n,  newNode);  break;	  Node    right    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	44	None	replace
301	[BUG]  [BUGGY]  n.addChildToFront(left);  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.addChildToFront(left);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.addChildToFront(left);  break;	  n.removeChild(left);    break;    	non-compiled	[CE]  orphaned  case	31	None	replace
302	[BUG]  [BUGGY]  n.addChildToBack(left);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.addChildToBack(left);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.addChildToBack(left);  break;	  n.removeChild(left);    break;    	non-compiled	[CE]  orphaned  case	31	None	replace
303	[BUG]  [BUGGY]  while(left.getType()!=  Token.STRING)  {  if(left.getType()  ==  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(left.getType()!=  Token.STRING)  {  if(left.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(left.getType()!=  Token.STRING)  {  if(left.getType()  ==  Token.STRING)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	18	None	replace
304	[BUG]  [BUGGY]  while(right.getType()!=  Token.STRING)  {  if(left.getType()  ==  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.STRING)  {  if(left.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.STRING)  {  if(left.getType()  ==  Token.STRING)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	18	None	replace
305	[BUG]  [BUGGY]  while(n.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.STRING)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	18	None	replace
306	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING)  {  while(n.getType()!=  Token.STRING)  {  if(right.getType()  ==  Token.STRING)  {  break;  }  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.STRING)  {  while(n.getType()!=  Token.STRING)  {  if(right.getType()  ==  Token.STRING)  {  break;  }  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING)  {  while(n.getType()!=  Token.STRING)  {  if(right.getType()  ==  Token.STRING)  {  break;  }  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	18	None	replace
307	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING)  {  while(n.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.STRING)  {  while(n.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING)  {  while(n.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.STRING)  {  break;  }  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
308	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING)  {  while(n.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.STRING)  {  break;  }  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.STRING)  {  while(n.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.STRING)  {  break;  }  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING)  {  while(n.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.STRING)  {  break;  }  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
309	[BUG]  [BUGGY]  result  =  left.getParent();  break;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  left.getParent();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  left.getParent();  break;	  result    =    right.getNext();    break;    	non-compiled	[CE]  orphaned  case	47	None	replace
310	[BUG]  [BUGGY]  if(right.getType()!=  Token.GETELEM  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.GETELEM  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.GETELEM  &&  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.GETELEM    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
311	[BUG]  [BUGGY]  if(right.getType()!=  Token.GETELEM  &&  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.GETELEM  &&  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.GETELEM  &&  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.GETELEM    ||    left.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	87	None	replace
312	[BUG]  [BUGGY]  n  =  left.getNext()  +  right.getType()  ==  Token.THIS;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getNext()  +  right.getType()  ==  Token.THIS;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getNext()  +  right.getType()  ==  Token.THIS;	  n    =    left.getNext()    ||    right.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	14	None	replace
313	[BUG]  [BUGGY]  n  =  left.getNext()  -  right.getType()  ==  Token.THIS;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getNext()  -  right.getType()  ==  Token.THIS;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getNext()  -  right.getType()  ==  Token.THIS;	  n    =    left.getNext()    ||    right.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	14	None	replace
314	[BUG]  [BUGGY]  while(left.getType()!=  Token.THIS)  {  left  =  left.getNext();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(left.getType()!=  Token.THIS)  {  left  =  left.getNext();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(left.getType()!=  Token.THIS)  {  left  =  left.getNext();	  if(left.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	27	None	replace
315	[BUG]  [BUGGY]  parent.replaceChild(left,  n);  break;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  parent.replaceChild(left,  n);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	parent.replaceChild(left,  n);  break;	  if(left.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	27	None	replace
316	[BUG]  [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.FUNCTION  ||  right.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	24	None	replace
317	[BUG]  [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	24	None	replace
318	[BUG]  [BUGGY]  While(left.getType()!=  Token.THIS)  {  n  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  While(left.getType()!=  Token.THIS)  {  n  =  right.getFirstChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	While(left.getType()!=  Token.THIS)  {  n  =  right.getFirstChild();	  while(right.getType()!=    Token.THIS)    {    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	84	None	replace
319	[BUG]  [BUGGY]  n  =  left.getNext()  +  right.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getNext()  +  right.getType()  ==  Token.GETELEM;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getNext()  +  right.getType()  ==  Token.GETELEM;	  n    =    left.getNext()    ||    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	15	None	replace
320	[BUG]  [BUGGY]  n  =  left.getNext()  -  right.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getNext()  -  right.getType()  ==  Token.GETELEM;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getNext()  -  right.getType()  ==  Token.GETELEM;	  n    =    left.getNext()    ||    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	15	None	replace
321	[BUG]  [BUGGY]  if(left.getType()!=  Token.THIS  ||  left.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.THIS  ||  left.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.THIS  ||  left.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
322	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS  &&  right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.THIS  &&  right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS  &&  right.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
323	[BUG]  [BUGGY]  while(right.getType()!=  Token.STRING)  {  return  n;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.STRING)  {  return  n;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.STRING)  {  return  n;  }	  while(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
324	[BUG]  [BUGGY]  while(right.getType()!=  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.STRING  ||  right.getType()!=  Token.GETELEM)  {  break;  }	  while(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
325	[BUG]  [BUGGY]  while(right.getType()!=  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.STRING  ||  right.getType()!=  Token.THIS)  {  break;  }	  while(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
326	[BUG]  [BUGGY]  n  =  left.replaceFirst(left,  newNode);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.replaceFirst(left,  newNode);  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.replaceFirst(left,  newNode);	  n    =    left.getParent();    	non-compiled	[CE]  orphaned  case	68	None	replace
327	[BUG]  [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	67	None	replace
328	[BUG]  [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    left.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	66	None	replace
329	[BUG]  [BUGGY]  if(left.getType()!=  Token.GETELEM  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.GETELEM  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.GETELEM  ||  right.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    left.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	66	None	replace
330	[BUG]  [BUGGY]  if(left.getType()!=  Token.STRING  ||  left.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.STRING  ||  left.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.STRING  ||  left.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	72	None	replace
331	[BUG]  [BUGGY]  if(left.getType()!=  Token.STRING  &&  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.STRING  &&  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.STRING  &&  right.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	72	None	replace
332	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME)  {  while(n.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.NAME)  {  break;  }  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.NAME)  {  while(n.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.NAME)  {  break;  }  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.NAME)  {  while(n.getType()!=  Token.STRING)  {  if(right.getType()!=  Token.NAME)  {  break;  }  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	20	None	replace
333	[BUG]  [BUGGY]  while(right.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.NAME)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	20	None	replace
334	[BUG]  [BUGGY]  while(left.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(left.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(left.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.NAME)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	20	None	replace
335	[BUG]  [BUGGY]  if(left.getType()!=  Token.THIS)  {  return  left;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.THIS)  {  return  left;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.THIS)  {  return  left;  }	  if(right.getType()!=    Token.THIS)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	81	None	replace
336	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS)  {  return  left;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.THIS)  {  return  left;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS)  {  return  left;  }	  if(right.getType()!=    Token.THIS)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	81	None	replace
337	[BUG]  [BUGGY]  n.replaceChild(left,  left);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.replaceChild(left,  left);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.replaceChild(left,  left);  break;	  n.removeChild(right);    break;    	non-compiled	[CE]  orphaned  case	93	None	replace
338	[BUG]  [BUGGY]  n.replaceChild(left,  right);  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.replaceChild(left,  right);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.replaceChild(left,  right);  break;	  n.removeChild(right);    break;    	non-compiled	[CE]  orphaned  case	93	None	replace
339	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.THIS  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS  &&  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	7	None	replace
340	[BUG]  [BUGGY]  if(left.getType()!=  Token.STRING  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.STRING  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.STRING  ||  right.getType()!=  Token.FUNCTION)  {  break;  }	  if(left.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	32	None	replace
341	[BUG]  [BUGGY]  if(left.getType()!=  Token.STRING  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.STRING  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.STRING  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	71	None	replace
342	[BUG]  [BUGGY]  if(left.getType()!=  Token.STRING  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.STRING  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.STRING  &&  right.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	71	None	replace
343	[BUG]  [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()    ==    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
344	[BUG]  [BUGGY]  if(left.getType()!=  Token.GETELEM  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.GETELEM  &&  right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.GETELEM  &&  right.getType()!=  Token.GETELEM)  {  break;  }	  if(left.getType()!=    Token.GETELEM    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	5	None	replace
345	[BUG]  [BUGGY]  while(right.getType()!=  Token.NAME)  {  if(right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.NAME)  {  if(right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.NAME)  {  if(right.getType()  ==  Token.GETELEM)  {  break;  }	  if(n.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	49	None	replace
346	[BUG]  [BUGGY]  while(right.getType()!=  Token.NAME)  {  if(right.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.NAME)  {  if(right.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.NAME)  {  if(right.getType()  ==  Token.NAME)  {  break;  }	  if(n.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	49	None	replace
347	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	25	None	replace
348	[BUG]  [BUGGY]  if(left.getType()!=  Token.GETELEM  &&  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.GETELEM  &&  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.GETELEM  &&  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(left.getType()    ==    Token.GETELEM    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	57	None	replace
349	[BUG]  [BUGGY]  n.setType(Token.EXPR_RESULT);  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.EXPR_RESULT);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.EXPR_RESULT);  break;	  n.setType(Token.FUNCTION);    break;    	non-compiled	[CE]  orphaned  case	85	None	replace
350	[BUG]  [BUGGY]  n.setType(Token.EMPTY);  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.EMPTY);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.EMPTY);  break;	  n.setType(Token.FUNCTION);    break;    	non-compiled	[CE]  orphaned  case	85	None	replace
351	[BUG]  [BUGGY]  while(right.getType()!=  Token.NAME)  {  if(right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.NAME)  {  if(right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.NAME)  {  if(right.getType()!=  Token.GETELEM)  {  break;  }	  if(n.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	38	None	replace
352	[BUG]  [BUGGY]  while(right.getType()!=  Token.NAME)  {  if(right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.NAME)  {  if(right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.NAME)  {  if(right.getType()!=  Token.NAME)  {  break;  }	  if(n.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	38	None	replace
353	[BUG]  [BUGGY]  while(right.getType()!=  Token.NAME)  {  if(left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.NAME)  {  if(left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.NAME)  {  if(left.getType()!=  Token.GETELEM)  {  break;  }	  if(n.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	38	None	replace
354	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  result);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.replaceChild(left,  result);  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.replaceChild(left,  result);	  n    =    left.replaceChild(left,    n);    	non-compiled	[CE]  orphaned  case	90	None	replace
355	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  next);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.replaceChild(left,  next);  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.replaceChild(left,  next);	  n    =    left.replaceChild(left,    n);    	non-compiled	[CE]  orphaned  case	90	None	replace
356	[BUG]  [BUGGY]  while(right.getType()!=  Token.GETELEM)  {  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.GETELEM)  {  n  =  left.getFirstChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.GETELEM)  {  n  =  left.getFirstChild();	  if(n.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	1	None	replace
357	[BUG]  [BUGGY]  while(right.getType()!=  Token.GETELEM)  {  n.removeChild(left);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.GETELEM)  {  n.removeChild(left);  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.GETELEM)  {  n.removeChild(left);	  if(n.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	1	None	replace
358	[BUG]  [BUGGY]  Context.report(JSError.make(left,  n,  MAX_FOLD_NUMBER_ERROR));  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Context.report(JSError.make(left,  n,  MAX_FOLD_NUMBER_ERROR));  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Context.report(JSError.make(left,  n,  MAX_FOLD_NUMBER_ERROR));  break;	  Context.reportCodeChange();    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
359	[BUG]  [BUGGY]  Context.report(JSError.make(left,  n,  UNKNOWN_EXPR_TYPE));  break;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Context.report(JSError.make(left,  n,  UNKNOWN_EXPR_TYPE));  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Context.report(JSError.make(left,  n,  UNKNOWN_EXPR_TYPE));  break;	  Context.reportCodeChange();    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
360	[BUG]  [BUGGY]  Context.report(JSError.make(left,  n,  INVALID_GETELEM_INDEX_ERROR),  result);  break;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Context.report(JSError.make(left,  n,  INVALID_GETELEM_INDEX_ERROR),  result);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Context.report(JSError.make(left,  n,  INVALID_GETELEM_INDEX_ERROR),  result);  break;	  Context.reportCodeChange();    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
361	[BUG]  [BUGGY]  while(left.getType()!=  Token.FUNCTION)  {  left  =  left.getNext();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(left.getType()!=  Token.FUNCTION)  {  left  =  left.getNext();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(left.getType()!=  Token.FUNCTION)  {  left  =  left.getNext();	  if(left.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
362	[BUG]  [BUGGY]  while(right.getType()!=  Token.FUNCTION)  {  left  =  left.getNext();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.FUNCTION)  {  left  =  left.getNext();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.FUNCTION)  {  left  =  left.getNext();	  if(left.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
363	[BUG]  [BUGGY]  while(right.getType()!=  Token.FUNCTION)  {  left  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.FUNCTION)  {  left  =  left.getFirstChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.FUNCTION)  {  left  =  left.getFirstChild();	  if(left.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
364	[BUG]  [BUGGY]  while(left.getType()!=  Token.FUNCTION)  {  left  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(left.getType()!=  Token.FUNCTION)  {  left  =  left.getFirstChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(left.getType()!=  Token.FUNCTION)  {  left  =  left.getFirstChild();	  if(left.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
365	[BUG]  [BUGGY]  while(right.getType()!=  Token.STRING)  {  break;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.STRING)  {  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.STRING)  {  break;	  if(n.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	88	None	replace
366	[BUG]  [BUGGY]  While(left.getType()!=  Token.NAME)  {  n  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  While(left.getType()!=  Token.NAME)  {  n  =  right.getFirstChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	While(left.getType()!=  Token.NAME)  {  n  =  right.getFirstChild();	  while(right.getType()!=    Token.NAME)    {    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	70	None	replace
367	[BUG]  [BUGGY]  n.setLocale(left.getString());  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setLocale(left.getString());  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setLocale(left.getString());  break;	  n.setString(right.getString());    break;    	non-compiled	[CE]  orphaned  case	92	None	replace
368	[BUG]  [BUGGY]  n.setString(left.getString());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setString(left.getString());  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setString(left.getString());	  n.setString(right.getString());    break;    	non-compiled	[CE]  orphaned  case	92	None	replace
369	[BUG]  [BUGGY]  if(left.getType()!=  Token.STRING  ||  left.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.STRING  ||  left.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.STRING  ||  left.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.STRING    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
370	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.THIS  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.THIS    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	82	None	replace
371	[BUG]  [BUGGY]  if(left.getType()!=  Token.STRING  ||  left.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.STRING  ||  left.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.STRING  ||  left.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	73	None	replace
372	[BUG]  [BUGGY]  if(left.getType()!=  Token.STRING  &&  right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.STRING  &&  right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.STRING  &&  right.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	73	None	replace
373	[BUG]  [BUGGY]  if(left.getType()!=  Token.THIS  ||  left.getType()!=  Token.CALL)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.THIS  ||  left.getType()!=  Token.CALL)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.THIS  ||  left.getType()!=  Token.CALL)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.CALL)    {    break;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
374	[BUG]  [BUGGY]  if(left.getType()!=  Token.THIS  ||  right.getType()!=  Token.CALL)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.THIS  ||  right.getType()!=  Token.CALL)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.THIS  ||  right.getType()!=  Token.CALL)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.CALL)    {    break;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
375	[BUG]  [BUGGY]  if(left.getType()  ==  Token.THIS  ||  left.getType()!=  Token.CALL)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.THIS  ||  left.getType()!=  Token.CALL)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.THIS  ||  left.getType()!=  Token.CALL)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.CALL)    {    break;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
376	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME  &&  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.NAME  &&  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.NAME  &&  left.getType()!=  Token.GETELEM)  {  break;  }	  if(left.getType()!=    Token.NAME    ||    left.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	69	None	replace
377	[BUG]  [BUGGY]  Node  right  =  left.replaceChild(n,  newNode);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  left.replaceChild(n,  newNode);  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.replaceChild(n,  newNode);	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	80	None	replace
378	[BUG]  [BUGGY]  if(left.getType()!=  Token.GETELEM  ||  left.getType()  ==  Token.GETELM)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.GETELEM  ||  left.getType()  ==  Token.GETELM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.GETELEM  ||  left.getType()  ==  Token.GETELM)  {  break;  }	  if(left.getType()!=    Token.GETELEM    ||    left.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	61	None	replace
379	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNode).replaceChild(n,  newNode);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.replaceChild(left,  newNode).replaceChild(n,  newNode);  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.replaceChild(left,  newNode).replaceChild(n,  newNode);	  n    =    left.replaceChild(left,    newNode);    	non-compiled	[CE]  orphaned  case	60	None	replace
380	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNode)-  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.replaceChild(left,  newNode)-  1;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.replaceChild(left,  newNode)-  1;	  n    =    left.replaceChild(left,    newNode);    	non-compiled	[CE]  orphaned  case	60	None	replace
381	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNode).replaceChild(right,  newNode);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.replaceChild(left,  newNode).replaceChild(right,  newNode);  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.replaceChild(left,  newNode).replaceChild(right,  newNode);	  n    =    left.replaceChild(left,    newNode);    	non-compiled	[CE]  orphaned  case	60	None	replace
382	[BUG]  [BUGGY]  n.setType(Token.GETELEM  |  Token.GETELEM);  break;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.GETELEM  |  Token.GETELEM);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.GETELEM  |  Token.GETELEM);  break;	  n.setType(Token.GETELEM);    break;    	non-compiled	[CE]  orphaned  case	89	None	replace
383	[BUG]  [BUGGY]  n.setType(Token.GETPROP);  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.GETPROP);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.GETPROP);  break;	  n.setType(Token.GETELEM);    break;    	non-compiled	[CE]  orphaned  case	89	None	replace
384	[BUG]  [BUGGY]  if(right.getType()!=  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  result  =  true;  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  result  =  true;  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.GETELEM  ||  right.getType()!=  Token.GETELEM)  {  result  =  true;  break;  }	  if(right.getType()    ==    Token.GETELEM)    {    result    =    true;    break;    }    	non-compiled	[CE]  orphaned  case	79	None	replace
385	[BUG]  [BUGGY]  if(left.getType()!=  Token.GETELEM)  {  result  =  true;  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.GETELEM)  {  result  =  true;  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.GETELEM)  {  result  =  true;  break;  }	  if(right.getType()    ==    Token.GETELEM)    {    result    =    true;    break;    }    	non-compiled	[CE]  orphaned  case	79	None	replace
386	[BUG]  [BUGGY]  if(right.getType()!=  Token.GETELEM)  {  result  =  true;  break;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.GETELEM)  {  result  =  true;  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.GETELEM)  {  result  =  true;  break;  }	  if(right.getType()    ==    Token.GETELEM)    {    result    =    true;    break;    }    	non-compiled	[CE]  orphaned  case	79	None	replace
387	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING)  {  while(n.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.STRING)  {  while(n.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.STRING)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING)  {  while(n.getType()!=  Token.STRING)  {  if(left.getType()!=  Token.STRING)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(left.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	19	None	replace
388	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	22	None	replace
389	[BUG]  [BUGGY]  n  =  left.replaceChild(right,  newNode);  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.replaceChild(right,  newNode);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.replaceChild(right,  newNode);  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	29	None	replace
390	[BUG]  [BUGGY]  n.setString(right.getString()  + "_ "  +  left.getString());  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setString(right.getString()  + "_ "  +  left.getString());  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setString(right.getString()  + "_ "  +  left.getString());  break;	  n.setString(right.getString());    break;    	non-compiled	[CE]  orphaned  case	92	None	replace
391	[BUG]  [BUGGY]  n.setString(right.getString()  + ": "  +  left.getString());  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setString(right.getString()  + ": "  +  left.getString());  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setString(right.getString()  + ": "  +  left.getString());  break;	  n.setString(right.getString());    break;    	non-compiled	[CE]  orphaned  case	92	None	replace
392	[BUG]  [BUGGY]  n  =  n.replaceChild(left,  n);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  n.replaceChild(left,  n);  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  n.replaceChild(left,  n);	  n    =    left.replaceChild(left,    n);    	non-compiled	[CE]  orphaned  case	90	None	replace
393	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	21	None	replace
394	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.THIS)  {  break;  }	  if(left.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	32	None	replace
395	[BUG]  [BUGGY]  if(n.getType()!=  Token.GETELEM  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()!=  Token.GETELEM  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.GETELEM  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.GETELEM    ||    left.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	87	None	replace
396	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING  ||  left.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.STRING  ||  left.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING  ||  left.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	72	None	replace
397	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	24	None	replace
398	[BUG]  [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.FUNCTION    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	24	None	replace
399	[BUG]  [BUGGY]  n.setType(Token.VAR);  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.VAR);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.VAR);  break;	  n.setType(Token.FUNCTION);    break;    	non-compiled	[CE]  orphaned  case	85	None	replace
400	[BUG]  [BUGGY]  n.setType(Token.CATCH);  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.CATCH);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.CATCH);  break;	  n.setType(Token.FUNCTION);    break;    	non-compiled	[CE]  orphaned  case	85	None	replace
401	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.NAME    ||    left.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	77	None	replace
402	[BUG]  [BUGGY]  if(left.getType()!=  Token.THIS  &&  left.getFirstChild()  ==  right)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.THIS  &&  left.getFirstChild()  ==  right)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.THIS  &&  left.getFirstChild()  ==  right)  {  break;  }	  if(left.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	27	None	replace
403	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS  ||  left.getType()!=  Token.CALL)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.THIS  ||  left.getType()!=  Token.CALL)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS  ||  left.getType()!=  Token.CALL)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.CALL)    {    break;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
404	[BUG]  [BUGGY]  if(right.getType()  ==  Token.THIS  ||  left.getType()!=  Token.CALL)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.THIS  ||  left.getType()!=  Token.CALL)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.THIS  ||  left.getType()!=  Token.CALL)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.CALL)    {    break;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
405	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  &&  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.NAME  &&  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.NAME  &&  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.NAME    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	51	None	replace
406	[BUG]  [BUGGY]  if(left.getType()!=  Token.GETELEM  ||  left.getType()!=  Token.SETELEM)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.GETELEM  ||  left.getType()!=  Token.SETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.GETELEM  ||  left.getType()!=  Token.SETELEM)  {  break;  }	  if(left.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	2	None	replace
407	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  right;  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  left.getNext(),  right;  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.getNext(),  right;  break;	  Node    right    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	42	None	replace
408	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING  ||  left.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.STRING  ||  left.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING  ||  left.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	73	None	replace
409	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  left.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  left.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.NAME  ||  left.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
410	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.THIS  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS  ||  right.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	8	None	replace
411	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS  ||  left.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.THIS  ||  left.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS  ||  left.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	8	None	replace
412	[BUG]  [BUGGY]  if(right.getType()  ==  Token.THIS  ||  left.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.THIS  ||  left.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.THIS  ||  left.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	8	None	replace
413	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.STRING  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.STRING    ||    right.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	71	None	replace
414	[BUG]  [BUGGY]  Node  right  =  left.getNext()  &&  right.getType()!=  Token.THIS;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  left.getNext()  &&  right.getType()!=  Token.THIS;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.getNext()  &&  right.getType()!=  Token.THIS;	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	78	None	replace
415	[BUG]  [BUGGY]  Node  right  =  left.getNext()  &&  right.getType()!=  Token.GETELEM;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Node  right  =  left.getNext()  &&  right.getType()!=  Token.GETELEM;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Node  right  =  left.getNext()  &&  right.getType()!=  Token.GETELEM;	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	78	None	replace
416	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS  ||  right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.THIS  ||  right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS  ||  right.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
417	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS  ||  left.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.THIS  ||  left.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS  ||  left.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
418	[BUG]  [BUGGY]  if(right.getType()  ==  Token.THIS  ||  left.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.THIS  ||  left.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.THIS  ||  left.getType()!=  Token.NAME)  {  break;  }	  if(right.getType()    ==    Token.THIS    ||    right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
419	[BUG]  [BUGGY]  while(n.getType()!=  Token.STRING  &&  left.getType()!=  Token.NAME)  {  if(right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(n.getType()!=  Token.STRING  &&  left.getType()!=  Token.NAME)  {  if(right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(n.getType()!=  Token.STRING  &&  left.getType()!=  Token.NAME)  {  if(right.getType()!=  Token.NAME)  {  break;  }	  while(n.getType()!=    Token.STRING)    {    if(right.getType()!=    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	20	None	replace
420	[BUG]  [BUGGY]  if(left.getType()!=  Token.STRING  ||  right.getType()!=  Token.DO)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.STRING  ||  right.getType()!=  Token.DO)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.STRING  ||  right.getType()!=  Token.DO)  {  break;  }	  if(left.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	17	None	replace
421	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()    ==    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
422	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.THIS)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()    ==    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
423	[BUG]  [BUGGY]  if(left.getType()!=  Token.GETELEM  &&  left.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.GETELEM  &&  left.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.GETELEM  &&  left.getType()  ==  Token.GETELEM)  {  break;  }	  if(left.getType()!=    Token.GETELEM    ||    left.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	61	None	replace
424	[BUG]  [BUGGY]  result  =  left.getFirstChild();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  left.getFirstChild();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  left.getFirstChild();  break;	  result    =    right.getType();    break;    	non-compiled	[CE]  orphaned  case	43	None	replace
425	[BUG]  [BUGGY]  result  =  right.getType()!=  Token.BLOCK;  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  right.getType()!=  Token.BLOCK;  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  right.getType()!=  Token.BLOCK;  break;	  result    =    right.getType();    break;    	non-compiled	[CE]  orphaned  case	43	None	replace
426	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	25	None	replace
427	[BUG]  [BUGGY]  n  =  left.removeFirst();  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.removeFirst();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.removeFirst();  break;	  n    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	30	None	replace
428	[BUG]  [BUGGY]  if(right.getType()  ==  Token.THIS  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.THIS  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.THIS  ||  left.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.THIS    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	83	None	replace
429	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS  &&  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.THIS  &&  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS  &&  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.THIS    ||    right.getType()    ==    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	83	None	replace
430	[BUG]  [BUGGY]  result  =  left.getFirstChild().getParent();  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  result  =  left.getFirstChild().getParent();  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	result  =  left.getFirstChild().getParent();  break;	  result    =    right.getFirstChild().getNext();    break;    	non-compiled	[CE]  orphaned  case	45	None	replace
431	[BUG]  [BUGGY]  Context.report(n,  INVALID_GETELEM_INDEX_ERROR,  result);  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Context.report(n,  INVALID_GETELEM_INDEX_ERROR,  result);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Context.report(n,  INVALID_GETELEM_INDEX_ERROR,  result);  break;	  Context.reportCodeChange();    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
432	[BUG]  [BUGGY]  Context.report(n,  UNDEFINED_BITWISE_OPERAND);  break;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Context.report(n,  UNDEFINED_BITWISE_OPERAND);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Context.report(n,  UNDEFINED_BITWISE_OPERAND);  break;	  Context.reportCodeChange();    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
433	[BUG]  [BUGGY]  Context.report(JSError.make(left,  n,  NON_NUMBER_ERROR));  break;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Context.report(JSError.make(left,  n,  NON_NUMBER_ERROR));  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Context.report(JSError.make(left,  n,  NON_NUMBER_ERROR));  break;	  Context.reportCodeChange();    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
434	[BUG]  [BUGGY]  Context.report(n,  INVALID_GETELEM_INDEX_ERROR,  left);  break;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Context.report(n,  INVALID_GETELEM_INDEX_ERROR,  left);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Context.report(n,  INVALID_GETELEM_INDEX_ERROR,  left);  break;	  Context.reportCodeChange();    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
435	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.STRING  ||  right.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING  ||  right.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.STRING    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
436	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING  ||  left.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()!=  Token.STRING  ||  left.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING  ||  left.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.STRING    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
437	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  ||  left.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.STRING  ||  left.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.STRING  ||  left.getType()!=  Token.FUNCTION)  {  break;  }	  if(right.getType()    ==    Token.STRING    ||    right.getType()!=    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
438	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.NAME  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.NAME    ||    left.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	75	None	replace
439	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNode)+  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.replaceChild(left,  newNode)+  1;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.replaceChild(left,  newNode)+  1;	  n    =    left.replaceChild(left,    newNode);    	non-compiled	[CE]  orphaned  case	60	None	replace
440	[BUG]  [BUGGY]  n.setType(Token.GETELEM;  break;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.setType(Token.GETELEM;  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.setType(Token.GETELEM;  break;	  n.setType(Token.GETELEM);    break;    	non-compiled	[CE]  orphaned  case	89	None	replace
441	[BUG]  [BUGGY]  n.addChildToFront(right);  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n.addChildToFront(right);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n.addChildToFront(right);  break;	  n.removeChild(left);    break;    	non-compiled	[CE]  orphaned  case	31	None	replace
442	[BUG]  [BUGGY]  n  =  left.getlastChild();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  n  =  left.getlastChild();  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getlastChild();	  n    =    right.getLastChild();    	non-compiled	[CE]  orphaned  case	53	None	replace
443	[BUG]  [BUGGY]  if(left.getType()!=  Token.GETELEM  &&  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.GETELEM  &&  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.GETELEM  &&  left.getType()!=  Token.GETELEM)  {  break;  }	  if(left.getType()!=    Token.GETELEM    ||    left.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	74	None	replace
444	[BUG]  [BUGGY]  if(left.getType()  ==  Token.THIS  ||  right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.THIS  ||  right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.THIS  ||  right.getType()!=  Token.THIS)  {  break;  }	  if(left.getType()    ==    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
445	[BUG]  [BUGGY]  if(left.getType()  ==  Token.THIS  ||  left.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.THIS  ||  left.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.THIS  ||  left.getType()!=  Token.THIS)  {  break;  }	  if(left.getType()    ==    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
446	[BUG]  [BUGGY]  if(left.getType()  ==  Token.THIS  &&  left.getFirstChild()!=  right)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.THIS  &&  left.getFirstChild()!=  right)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.THIS  &&  left.getFirstChild()!=  right)  {  break;  }	  if(left.getType()    ==    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
447	[BUG]  [BUGGY]  if(n.getType()  ==  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()  ==  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()  ==  Token.THIS)  {  break;  }	  if(n.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	28	None	replace
448	[BUG]  [BUGGY]  if(left.getType()!=  Token.CALL)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.CALL)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.CALL)  {  break;  }	  if(n.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	28	None	replace
449	[BUG]  [BUGGY]  if(left.getType()  ==  Token.THIS)  {  return  n;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()  ==  Token.THIS)  {  return  n;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()  ==  Token.THIS)  {  return  n;  }	  if(right.getType()!=    Token.THIS)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	81	None	replace
450	[BUG]  [BUGGY]  if(left.getType()!=  Token.CALL)  {  return  n;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(left.getType()!=  Token.CALL)  {  return  n;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(left.getType()!=  Token.CALL)  {  return  n;  }	  if(right.getType()!=    Token.THIS)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	81	None	replace
451	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(n.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(n.getType()!=  Token.FUNCTION  ||  left.getType()!=  Token.GETELEM)  {  break;  }	  if(right.getType()!=    Token.FUNCTION    ||    left.getType()!=    Token.GETELEM)    {    break;    }    	non-compiled	[CE]  orphaned  case	66	None	replace
452	[BUG]  [BUGGY]  while(right.getType()!=  Token.STRING  &&  left.getFirstChild()  ==  right.getNext())  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.STRING  &&  left.getFirstChild()  ==  right.getNext())  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.STRING  &&  left.getFirstChild()  ==  right.getNext())  {  break;  }	  while(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
453	[BUG]  [BUGGY]  while(right.getType()!=  Token.STRING  &&  left.getString().equals( "string "))  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.STRING  &&  left.getString().equals( "string "))  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.STRING  &&  left.getString().equals( "string "))  {  break;  }	  while(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
454	[BUG]  [BUGGY]  while(right.getType()!=  Token.STRING  &&  left.getFirstChild()  ==  null)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  while(right.getType()!=  Token.STRING  &&  left.getFirstChild()  ==  null)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	while(right.getType()!=  Token.STRING  &&  left.getFirstChild()  ==  null)  {  break;  }	  while(right.getType()!=    Token.STRING)    {    break;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
455	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  ||  left.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  if(right.getType()  ==  Token.STRING  ||  left.getType()!=  Token.THIS)  {  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.STRING  ||  left.getType()!=  Token.THIS)  {  break;  }	  if(right.getType()    ==    Token.STRING    ||    right.getType()!=    Token.THIS)    {    break;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
456	[BUG]  [BUGGY]  case  Token.GETELEM:  if(right.getType()!=  Token.GETELEM)  {  result  =  true;  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  case  Token.GETELEM:  if(right.getType()!=  Token.GETELEM)  {  result  =  true;  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	case  Token.GETELEM:  if(right.getType()!=  Token.GETELEM)  {  result  =  true;  break;  }	  if(right.getType()    ==    Token.GETELEM)    {    result    =    true;    break;    }    	non-compiled	[CE]  orphaned  case	79	None	replace
457	[BUG]  [BUGGY]  case  Token.GETELEM:  if(right.getType()  ==  Token.GETELEM)  {  result  =  true;  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  case  Token.GETELEM:  if(right.getType()  ==  Token.GETELEM)  {  result  =  true;  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	case  Token.GETELEM:  if(right.getType()  ==  Token.GETELEM)  {  result  =  true;  break;  }	  if(right.getType()    ==    Token.GETELEM)    {    result    =    true;    break;    }    	non-compiled	[CE]  orphaned  case	79	None	replace
458	[BUG]  [BUGGY]  case  Token.GETELEM:  if(right.getType()  ==  Token.GETELEM)  {  result  =  false;  break;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  case  Token.GETELEM:  if(right.getType()  ==  Token.GETELEM)  {  result  =  false;  break;  }  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	case  Token.GETELEM:  if(right.getType()  ==  Token.GETELEM)  {  result  =  false;  break;  }	  if(right.getType()    ==    Token.GETELEM)    {    result    =    true;    break;    }    	non-compiled	[CE]  orphaned  case	79	None	replace
459	[BUG]  [BUGGY]  Context.checkState(right.getType()  ==  Token.GETELEM);  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }      [BUGGY]  Context.checkState(right.getType()  ==  Token.GETELEM);  break;  [BUGGY]        case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	Context.checkState(right.getType()  ==  Token.GETELEM);  break;	  if(right.getType()    ==    Token.GETELEM)    {    result    =    true;    break;    }    	non-compiled	[CE]  orphaned  case	79	None	replace
