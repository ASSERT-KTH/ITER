bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(right.getType()  ==  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }  [BUGGY]  if(right.getType()  ==  Token.THIS)  {  break;  }  [BUGGY]    case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.THIS)  {  break;  }	break;  	non-compiled	[CE]  orphaned  case	49	None	replace
2	[BUG]  [BUGGY]  if(right.getType()!=  Token.THIS)  {  break;  }  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }  [BUGGY]  if(right.getType()!=  Token.THIS)  {  break;  }  [BUGGY]    case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.THIS)  {  break;  }	break;  	non-compiled	[CE]  orphaned  case	49	None	replace
3	[BUG]  [BUGGY]  if(right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }  [BUGGY]  if(right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]    case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.GETELEM)  {  break;  }	break;  	non-compiled	[CE]  orphaned  case	49	None	replace
4	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]          AssertionFailedError  [CONTEXT]  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }  [BUGGY]  if(right.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]    case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.STRING)  {  break;  }	break;  	non-compiled	[CE]  orphaned  case	49	None	replace
5	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError  [CONTEXT]  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }  [BUGGY]  if(right.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]    case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.FUNCTION)  {  break;  }	break;  	non-compiled	[CE]  orphaned  case	49	None	replace
6	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError  [CONTEXT]  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]    case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()  ==  Token.NAME)  {  break;  }	break;  	non-compiled	[CE]  orphaned  case	49	None	replace
7	[BUG]  [BUGGY]  n  =  left.getNext();  [CE]  orphaned  case  [FE]                AssertionFailedError  [CONTEXT]  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }  [BUGGY]  n  =  left.getNext();  [BUGGY]    case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getNext();	break;  	non-compiled	[CE]  orphaned  case	49	None	replace
8	[BUG]  [BUGGY]    [CE]  orphaned  case  [FE]                  AssertionFailedError  [CONTEXT]  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }  [BUGGY]    [BUGGY]    case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	  	break;  	non-compiled	[CE]  orphaned  case	49	None	replace
9	[BUG]  [BUGGY]  if(right.getType()!=  Token.GETELEM)  {  break;  }  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }  [BUGGY]  if(right.getType()!=  Token.GETELEM)  {  break;  }  [BUGGY]    case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.GETELEM)  {  break;  }	break;  	non-compiled	[CE]  orphaned  case	49	None	replace
10	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING)  {  break;  }  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }  [BUGGY]  if(right.getType()!=  Token.STRING)  {  break;  }  [BUGGY]    case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.STRING)  {  break;  }	break;  	non-compiled	[CE]  orphaned  case	49	None	replace
11	[BUG]  [BUGGY]  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }  [BUGGY]  n  =  left.getFirstChild();  [BUGGY]    case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	n  =  left.getFirstChild();	break;  	non-compiled	[CE]  orphaned  case	49	None	replace
12	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  }  break;  default:  return  n;//  we  only  handle  ==  and  !=  here  }  [BUGGY]  if(right.getType()!=  Token.NAME)  {  break;  }  [BUGGY]    case  Token.THIS:  if  (right.getType()  !=  Token.THIS)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  true;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	958	958	3	replace	if(right.getType()!=  Token.NAME)  {  break;  }	break;  	non-compiled	[CE]  orphaned  case	49	None	replace
