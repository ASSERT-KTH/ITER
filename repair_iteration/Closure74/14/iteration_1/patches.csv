bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(result  ==  null  ||  result.equals(right))  {  break;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result  ==  null  ||  result.equals(right))  {  break;  }  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	if(result  ==  null  ||  result.equals(right))  {  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  	9	None	replace
2	[BUG]  [BUGGY]  if(result  ==  null  ||  result.length()  ==  0)  {  break;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result  ==  null  ||  result.length()  ==  0)  {  break;  }  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	if(result  ==  null  ||  result.length()  ==  0)  {  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  	9	None	replace
3	[BUG]  [BUGGY]  if(result  ==  null  ||  result.booleanValue())  {  break;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result  ==  null  ||  result.booleanValue())  {  break;  }  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	if(result  ==  null  ||  result.booleanValue())  {  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  	9	None	replace
4	[BUG]  [BUGGY]  result  =  compareToUndefined(ln,  op);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(ln,  op);  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  compareToUndefined(ln,  op);	  result    =    compareToUndefined(undefinedRight,    op);    	non-compiled	[CE]  	4	None	replace
5	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  undefinedRight);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(n,  undefinedRight);  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  compareToUndefined(n,  undefinedRight);	  result    =    compareToUndefined(undefinedRight,    op);    	non-compiled	[CE]  	4	None	replace
6	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  right);  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  compareToUndefined(left,  right);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  	1	None	replace
7	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  compareToUndefined(left,  undefinedRight);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  	1	None	replace
8	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft);  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  compareToUndefined(left,  undefinedLeft);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  	1	None	replace
9	[BUG]  [BUGGY]  rim(result)  {  break;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  rim(result)  {  break;  }  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	rim(result)  {  break;  }	  if(undefinedRight)    {    break;    }    	non-compiled	[CE]  	5	None	replace
10	[BUG]  [BUGGY]  if(result)  {  break;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result)  {  break;  }  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	if(result)  {  break;  }	  if(undefinedRight)    {    break;    }    	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight)  {  break;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(undefinedLeft  ||  undefinedRight)  {  break;  }  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	if(undefinedLeft  ||  undefinedRight)  {  break;  }	  if(undefinedLeft)    {    break;    }    	non-compiled	[CE]  	7	None	replace
12	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	aughtExceptionHandler.throwInternal();	  if(undefinedLeft)    {    break;    }    	non-compiled	[CE]  	7	None	replace
13	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(n,  right);  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  compareToUndefined(n,  right);	  result    =    compareToUndefined(n,    op);    	non-compiled	[CE]  	6	None	replace
14	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(n,  left);  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  compareToUndefined(n,  left);	  result    =    compareToUndefined(n,    op);    	non-compiled	[CE]  	6	None	replace
15	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedRight);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(right,  undefinedRight);  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  compareToUndefined(right,  undefinedRight);	  result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  	2	None	replace
16	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft);  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  compareToUndefined(right,  undefinedLeft);	  result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  	2	None	replace
17	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(right,  left);  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  compareToUndefined(right,  left);	  result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  	2	None	replace
18	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(right,  right);  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  compareToUndefined(right,  right);	      	non-compiled	[CE]  	8	None	replace
19	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op);  break;  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  op);  break;  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  compareToUndefined(left,  op);  break;	      	non-compiled	[CE]  	8	None	replace
20	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  op);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  comparisonToUndefined(left,  op);  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  comparisonToUndefined(left,  op);	      	non-compiled	[CE]  	8	None	replace
21	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedLeft,  left);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(undefinedLeft,  left);  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  compareToUndefined(undefinedLeft,  left);	  result    =    compareToUndefined(undefinedLeft,    op);    	non-compiled	[CE]  	3	None	replace
22	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedLeft,  right);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(undefinedLeft,  right);  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  compareToUndefined(undefinedLeft,  right);	  result    =    compareToUndefined(undefinedLeft,    op);    	non-compiled	[CE]  	3	None	replace
23	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  undefinedLeft);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(n,  undefinedLeft);  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  compareToUndefined(n,  undefinedLeft);	  result    =    compareToUndefined(undefinedLeft,    op);    	non-compiled	[CE]  	3	None	replace
24	[BUG]  [BUGGY]  if(result!=  null)  {  break;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result!=  null)  {  break;  }  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	if(result!=  null)  {  break;  }	  if(undefinedRight)    {    break;    }    	non-compiled	[CE]  	5	None	replace
25	[BUG]  [BUGGY]  if(result  ==  null  ||  right!=  null)  {  break;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result  ==  null  ||  right!=  null)  {  break;  }  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	if(result  ==  null  ||  right!=  null)  {  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  	9	None	replace
26	[BUG]  [BUGGY]  if(result  ==  null)  {  result  =  compareToUndefined(left,  op);  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result  ==  null)  {  result  =  compareToUndefined(left,  op);  }  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	if(result  ==  null)  {  result  =  compareToUndefined(left,  op);  }	      	non-compiled	[CE]  	8	None	replace
27	[BUG]  [BUGGY]  if(result!=  null)  {  result  =  compareToUndefined(left,  op);  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result!=  null)  {  result  =  compareToUndefined(left,  op);  }  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	if(result!=  null)  {  result  =  compareToUndefined(left,  op);  }	      	non-compiled	[CE]  	8	None	replace
28	[BUG]  [BUGGY]  if(result  ==  null)  {  result  =  compareToUndefined(left,  right);  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result  ==  null)  {  result  =  compareToUndefined(left,  right);  }  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	if(result  ==  null)  {  result  =  compareToUndefined(left,  right);  }	      	non-compiled	[CE]  	8	None	replace
29	[BUG]  [BUGGY]  result  =  compareToUndefined(bottom,  op);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(bottom,  op);  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  compareToUndefined(bottom,  op);	  result    =    compareToUndefined(undefinedRight,    op);    	non-compiled	[CE]  	4	None	replace
30	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  left);  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  compareToUndefined(left,  left);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  	1	None	replace
31	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedRight);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedRight);  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  compareToUndefined(left,  op,  undefinedRight);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  	1	None	replace
32	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  n);  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  compareToUndefined(left,  n);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  	1	None	replace
33	[BUG]  [BUGGY]  if(result  ==  undefinedLeft)  {  break;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result  ==  undefinedLeft)  {  break;  }  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	if(result  ==  undefinedLeft)  {  break;  }	  if(undefinedLeft)    {    break;    }    	non-compiled	[CE]  	7	None	replace
34	[BUG]  [BUGGY]  if(undefinedLeft  &&  undefinedRight)  {  break;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(undefinedLeft  &&  undefinedRight)  {  break;  }  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	if(undefinedLeft  &&  undefinedRight)  {  break;  }	  if(undefinedLeft)    {    break;    }    	non-compiled	[CE]  	7	None	replace
35	[BUG]  [BUGGY]  if(result!=  Token.NEW)  {  break;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result!=  Token.NEW)  {  break;  }  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	if(result!=  Token.NEW)  {  break;  }	  if(undefinedRight)    {    break;    }    	non-compiled	[CE]  	5	None	replace
36	[BUG]  [BUGGY]  if(result  ==  null  ||  result.equals(left))  {  break;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result  ==  null  ||  result.equals(left))  {  break;  }  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	if(result  ==  null  ||  result.equals(left))  {  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  	9	None	replace
37	[BUG]  [BUGGY]  if(result  ==  null  ||  undefinedRight)  {  break;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result  ==  null  ||  undefinedRight)  {  break;  }  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	if(result  ==  null  ||  undefinedRight)  {  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  	9	None	replace
38	[BUG]  [BUGGY]  if(undefinedRight)  {  result  =  compareToUndefined(left,  right);  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(undefinedRight)  {  result  =  compareToUndefined(left,  right);  }  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	if(undefinedRight)  {  result  =  compareToUndefined(left,  right);  }	      	non-compiled	[CE]  	8	None	replace
39	[BUG]  [BUGGY]  if(result  ==  null)  {  return  n;  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result  ==  null)  {  return  n;  }  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	if(result  ==  null)  {  return  n;  }	      	non-compiled	[CE]  	8	None	replace
40	[BUG]  [BUGGY]  if(result!=  null)  {  result  =  compareToUndefined(left,  right);  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result!=  null)  {  result  =  compareToUndefined(left,  right);  }  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	if(result!=  null)  {  result  =  compareToUndefined(left,  right);  }	      	non-compiled	[CE]  	8	None	replace
41	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedLeft,  undefinedRight);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(undefinedLeft,  undefinedRight);  [BUGGY]    }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	925	925	3	replace	result  =  compareToUndefined(undefinedLeft,  undefinedRight);	  result    =    compareToUndefined(undefinedLeft,    op);    	non-compiled	[CE]  	3	None	replace
