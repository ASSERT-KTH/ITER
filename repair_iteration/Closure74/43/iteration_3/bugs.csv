bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryFoldLocalVoid(subtree.cloneTree());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalVoid(subtree.cloneTree());  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalVoid(subtree.cloneTree());	  return    tryFoldLocalVoid(subtree);    	non-compiled	[CE]  orphaned  case	38	None	replace
2	[BUG]  [BUGGY]  return  tryFoldLocalVoid(subtree,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalVoid(subtree,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalVoid(subtree,  false);	  return    tryFoldLocalVoid(subtree);    	non-compiled	[CE]  orphaned  case	38	None	replace
3	[BUG]  [BUGGY]  return  tryFoldLocalVoid(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalVoid(subtree,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalVoid(subtree,  BITWISE_OPERAND);	  return    tryFoldLocalVoid(subtree);    	non-compiled	[CE]  orphaned  case	38	None	replace
4	[BUG]  [BUGGY]  return  tryFoldLocalVoid(new  Node(subtree));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalVoid(new  Node(subtree));  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalVoid(new  Node(subtree));	  return    tryFoldLocalVoid(subtree);    	non-compiled	[CE]  orphaned  case	38	None	replace
5	[BUG]  [BUGGY]  return  tryFoldVoidOf(subtree);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldVoidOf(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldVoidOf(subtree);	  return    tryFoldVoidForOp(subtree);    	non-compiled	[CE]  orphaned  case	44	None	replace
6	[BUG]  [BUGGY]  return  tryReduceBITWISE_OPERand(subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBITWISE_OPERand(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBITWISE_OPERand(subtree);	  return    tryReduceBITWISE_OPERAND(subtree);    	non-compiled	[CE]  orphaned  case	45	None	replace
7	[BUG]  [BUGGY]  return  tryReduceBITWISE_OPERAND(subtree,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBITWISE_OPERAND(subtree,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBITWISE_OPERAND(subtree,  false);	  return    tryReduceBITWISE_OPERAND(subtree);    	non-compiled	[CE]  orphaned  case	45	None	replace
8	[BUG]  [BUGGY]  return  tryReduceBitWISE_OPERAND(subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBitWISE_OPERAND(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBitWISE_OPERAND(subtree);	  return    tryReduceBITWISE_OPERAND(subtree);    	non-compiled	[CE]  orphaned  case	45	None	replace
9	[BUG]  [BUGGY]  return  tryReduceBITWISE_OPERAND(subtree,  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBITWISE_OPERAND(subtree,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBITWISE_OPERAND(subtree,  true);	  return    tryReduceBITWISE_OPERAND(subtree);    	non-compiled	[CE]  orphaned  case	45	None	replace
10	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	58	None	replace
11	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	58	None	replace
12	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	58	None	replace
13	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	58	None	replace
14	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR,  NEGATING_A_NON_NUMBER_ERROR);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	58	None	replace
15	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	10	None	replace
16	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  INDEX_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  INDEX_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  INDEX_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	10	None	replace
17	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	27	None	replace
18	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NON_NUMBER_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NON_NUMBER_ERROR);	  return    tryFoldUnaryOperator(subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	27	None	replace
19	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  NEGATING_A_NON_NUMBER_ERROR);	  return    tryFoldUnaryOperator(subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	27	None	replace
20	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  MAX_FOLD_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  MAX_FOLD_NON_NUMBER_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  MAX_FOLD_NON_NUMBER_ERROR);	  return    tryFoldUnaryOperator(subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	27	None	replace
21	[BUG]  [BUGGY]  return  tryFoldBooleanOperator(subtree,  BITWISE_OPERAND,  false);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBooleanOperator(subtree,  BITWISE_OPERAND,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBooleanOperator(subtree,  BITWISE_OPERAND,  false);	  return    tryFoldBooleanOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	53	None	replace
22	[BUG]  [BUGGY]  return  tryFoldBooleanOperator(subtree,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBooleanOperator(subtree,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBooleanOperator(subtree,  MAX_FOLD_NUMBER);	  return    tryFoldBooleanOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	53	None	replace
23	[BUG]  [BUGGY]  return  tryFoldBooleanOperator(subtree,  BITWISE_OPERAND,  true);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBooleanOperator(subtree,  BITWISE_OPERAND,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBooleanOperator(subtree,  BITWISE_OPERAND,  true);	  return    tryFoldBooleanOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	53	None	replace
24	[BUG]  [BUGGY]  return  tryFoldBooleanOperator(subtree,  STRING_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBooleanOperator(subtree,  STRING_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBooleanOperator(subtree,  STRING_BITWISE_OPERAND);	  return    tryFoldBooleanOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	53	None	replace
25	[BUG]  [BUGGY]  return  tryReduceVoidOp(subtree);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceVoidOp(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceVoidOp(subtree);	  return    tryReduceVoid(subtree);    	non-compiled	[CE]  orphaned  case	4	None	replace
26	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  true,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  true,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  true,  false);	  return    tryFoldUnaryOperator(subtree,    false,    true);    	non-compiled	[CE]  orphaned  case	64	None	replace
27	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  false,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  false,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  false,  false);	  return    tryFoldUnaryOperator(subtree,    false,    true);    	non-compiled	[CE]  orphaned  case	64	None	replace
28	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  true,  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  true,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  true,  true);	  return    tryFoldUnaryOperator(subtree,    false,    true);    	non-compiled	[CE]  orphaned  case	64	None	replace
29	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  true,  0);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  true,  0);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  true,  0);	  return    tryFoldUnaryOperator(subtree,    false,    true);    	non-compiled	[CE]  orphaned  case	64	None	replace
30	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  true,  null);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  true,  null);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  true,  null);	  return    tryFoldUnaryOperator(subtree,    false,    true);    	non-compiled	[CE]  orphaned  case	64	None	replace
31	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  true,  1);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  true,  1);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  true,  1);	  return    tryFoldUnaryOperator(subtree,    false,    true);    	non-compiled	[CE]  orphaned  case	64	None	replace
32	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  null);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  null);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  null);	  return    tryReduceBinaryOperator(subtree,    true);    	non-compiled	[CE]  orphaned  case	19	None	replace
33	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtrae,  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtrae,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtrae,  false);	  return    tryReduceBinaryOperator(subtree,    true);    	non-compiled	[CE]  orphaned  case	19	None	replace
34	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree.getNext(),  true);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree.getNext(),  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree.getNext(),  true);	  return    tryReduceBinaryOperator(subtree,    true);    	non-compiled	[CE]  orphaned  case	19	None	replace
35	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  true,  false);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  true,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  true,  false);	  return    tryReduceBinaryOperator(subtree,    true);    	non-compiled	[CE]  orphaned  case	19	None	replace
36	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  true,  case  Token.BITWISE_OPERAND);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  true,  case  Token.BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  true,  case  Token.BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    false,    case    Token.BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
37	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  false,  case  Token.BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  false,  case  Token.BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  false,  case  Token.BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    false,    case    Token.BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
38	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  false,  case  Token.BITWISE_OPERAND);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  false,  case  Token.BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  false,  case  Token.BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    false,    case    Token.BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
39	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  true,  Case  Token.BITWISE_OPERAND);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  true,  Case  Token.BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  true,  Case  Token.BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    false,    case    Token.BITWISE_OPERAND);    	non-compiled	[CE]  	62	None	replace
40	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtrae,  true,  case  Token.BITWISE_OPERAND);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtrae,  true,  case  Token.BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtrae,  true,  case  Token.BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    false,    case    Token.BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
41	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  false,  case  Token.BITWISE_OPERAND);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  false,  case  Token.BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  false,  case  Token.BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    false,    case    Token.BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
42	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBinaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	17	None	replace
43	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  return    tryReduceBinaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	17	None	replace
44	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBinaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	17	None	replace
45	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBinaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	17	None	replace
46	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBinaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	17	None	replace
47	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);	  return    tryReduceBinaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	17	None	replace
48	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  1);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  1);	  return    tryFoldUnaryOperator(subtree,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	34	None	replace
49	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  MAX_FOLD_NUMBER  +  1);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldUnaryOperator(subtree,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	34	None	replace
50	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  0);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  0);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  0);	  return    tryFoldUnaryOperator(subtree,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	34	None	replace
51	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  2);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  2);	  return    tryFoldUnaryOperator(subtree,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	34	None	replace
52	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  Double.POSITIVE_INFINITY);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  Double.POSITIVE_INFINITY);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  Double.POSITIVE_INFINITY);	  return    tryFoldUnaryOperator(subtree,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	34	None	replace
53	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  MAX_FOLD_NUMBER  -  1);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  MAX_FOLD_NUMBER  -  1);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldUnaryOperator(subtree,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	34	None	replace
54	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  true);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  true);	  return    tryFoldUnaryOperator(subtree,    true);    	non-compiled	[CE]  orphaned  case	21	None	replace
55	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  null);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  null);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  null);	  return    tryFoldUnaryOperator(subtree,    true);    	non-compiled	[CE]  orphaned  case	21	None	replace
56	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtrae,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtrae,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtrae,  false);	  return    tryFoldUnaryOperator(subtree,    true);    	non-compiled	[CE]  orphaned  case	21	None	replace
57	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  default?  Boolean.TRUE  :  Boolean.FALSE);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  default?  Boolean.TRUE  :  Boolean.FALSE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  default?  Boolean.TRUE  :  Boolean.FALSE);	  return    tryFoldLocalOperator(subtree,    default);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
58	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  null);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  null);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  null);	  return    tryFoldLocalOperator(subtree,    default);    	non-compiled	[CE]  orphaned  case	56	None	replace
59	[BUG]  [BUGGY]  return  tryReduceLocalVoid(subtree.cloneTree());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceLocalVoid(subtree.cloneTree());  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceLocalVoid(subtree.cloneTree());	  return    tryReduceLocalVoid(subtree);    	non-compiled	[CE]  orphaned  case	36	None	replace
60	[BUG]  [BUGGY]  return  tryReduceLocalVoid(new  Node(subtree));  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceLocalVoid(new  Node(subtree));  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceLocalVoid(new  Node(subtree));	  return    tryReduceLocalVoid(subtree);    	non-compiled	[CE]  orphaned  case	36	None	replace
61	[BUG]  [BUGGY]  return  tryReduceLocalVoid(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceLocalVoid(subtree,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceLocalVoid(subtree,  BITWISE_OPERAND);	  return    tryReduceLocalVoid(subtree);    	non-compiled	[CE]  orphaned  case	36	None	replace
62	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	33	None	replace
63	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	33	None	replace
64	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INDEX_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INDEX_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INDEX_GETELEM_INDEX_ERROR);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	33	None	replace
65	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	33	None	replace
66	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	33	None	replace
67	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  true);	  return    tryFoldOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	23	None	replace
68	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  false,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  false,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  false,  BITWISE_OPERAND);	  return    tryFoldOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	23	None	replace
69	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  false,  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  false,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  false,  true);	  return    tryFoldOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	23	None	replace
70	[BUG]  [BUGGY]  return  tryFoldOperator(subtree.getNext(),  false);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree.getNext(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree.getNext(),  false);	  return    tryFoldOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	23	None	replace
71	[BUG]  [BUGGY]  return  tryReduceBooleanOperator(subtree,  true);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBooleanOperator(subtree,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBooleanOperator(subtree,  true);	  return    tryReduceBooleanOperator(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
72	[BUG]  [BUGGY]  return  tryReduceBooleanOperator(subtree,  false);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBooleanOperator(subtree,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBooleanOperator(subtree,  false);	  return    tryReduceBooleanOperator(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
73	[BUG]  [BUGGY]  return  tryReduceBooleanOperator(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBooleanOperator(subtree,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBooleanOperator(subtree,  BITWISE_OPERAND);	  return    tryReduceBooleanOperator(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
74	[BUG]  [BUGGY]  return  tryReduceBooleanOperator(subtree.cloneTree());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBooleanOperator(subtree.cloneTree());  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBooleanOperator(subtree.cloneTree());	  return    tryReduceBooleanOperator(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
75	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree.cloneTree(),  false);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree.cloneTree(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree.cloneTree(),  false);	  return    tryFoldLocalOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	9	None	replace
76	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree.cloneTree(),  true);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree.cloneTree(),  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree.cloneTree(),  true);	  return    tryFoldLocalOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	9	None	replace
77	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree.cloneTree(),  subtree.cloneTree());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree.cloneTree(),  subtree.cloneTree());  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree.cloneTree(),  subtree.cloneTree());	  return    tryFoldLocalOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	9	None	replace
78	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree.cloneTree(),  null);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree.cloneTree(),  null);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree.cloneTree(),  null);	  return    tryFoldLocalOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	9	None	replace
79	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree.cloneTree(),  1);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree.cloneTree(),  1);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree.cloneTree(),  1);	  return    tryFoldLocalOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	9	None	replace
80	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree.cloneTree(),  subtree);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree.cloneTree(),  subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree.cloneTree(),  subtree);	  return    tryFoldLocalOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	9	None	replace
81	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBinaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	14	None	replace
82	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBinaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	14	None	replace
83	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	14	None	replace
84	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBinaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	14	None	replace
85	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBinaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	14	None	replace
86	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	14	None	replace
87	[BUG]  [BUGGY]  return  tryReduceBooleanOperand(subtree,  false);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBooleanOperand(subtree,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBooleanOperand(subtree,  false);	  return    tryReduceBooleanOperand(subtree);    	non-compiled	[CE]  orphaned  case	40	None	replace
88	[BUG]  [BUGGY]  return  tryFoldBooleanOperand(subtree);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBooleanOperand(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBooleanOperand(subtree);	  return    tryReduceBooleanOperand(subtree);    	non-compiled	[CE]  orphaned  case	40	None	replace
89	[BUG]  [BUGGY]  return  tryReduceBooleanOperand(subtree,  true);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBooleanOperand(subtree,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBooleanOperand(subtree,  true);	  return    tryReduceBooleanOperand(subtree);    	non-compiled	[CE]  orphaned  case	40	None	replace
90	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldLocalOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	54	None	replace
91	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldLocalOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	54	None	replace
92	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldLocalOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	54	None	replace
93	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldLocalOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	54	None	replace
94	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldLocalOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	54	None	replace
95	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);	  return    tryFoldLocalOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	54	None	replace
96	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree());  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree.cloneTree());	  return    tryFoldUnaryOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	48	None	replace
97	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree.cloneTree(),  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree.cloneTree(),  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree.cloneTree(),  true);	  return    tryFoldUnaryOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	48	None	replace
98	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree.cloneTree(),  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree.cloneTree(),  1);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree.cloneTree(),  1);	  return    tryFoldUnaryOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	48	None	replace
99	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree.cloneTree(),  null);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree.cloneTree(),  null);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree.cloneTree(),  null);	  return    tryFoldUnaryOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	48	None	replace
100	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  true,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  true,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  true,  BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    false,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	63	None	replace
101	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  false,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  false,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  false,  BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    false,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	63	None	replace
102	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  false,  case  BITWISE_OPERAND);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  false,  case  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  false,  case  BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    false,    BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
103	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  false,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  false,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  false,  MAX_FOLD_NUMBER);	  return    tryFoldUnaryOperator(subtree,    false,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	63	None	replace
104	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  true,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  true,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  true,  BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    false,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	63	None	replace
105	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  MAX_FOLD_NUMBER,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  MAX_FOLD_NUMBER,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  MAX_FOLD_NUMBER,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	60	None	replace
106	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER,  MAX_FOLD_NUMBER);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	60	None	replace
107	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	60	None	replace
108	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  MAX_FOLD_NUMBER,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  MAX_FOLD_NUMBER,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  MAX_FOLD_NUMBER,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	60	None	replace
109	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	60	None	replace
110	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER,  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER,  1);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER,  1);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	60	None	replace
111	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND,    INDEX_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	57	None	replace
112	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  diagnosticType,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  diagnosticType,  INDEX_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  diagnosticType,  INDEX_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND,    INDEX_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	57	None	replace
113	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE,  MAX_FOLD_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE,  MAX_FOLD_NON_NUMBER_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE,  MAX_FOLD_NON_NUMBER_ERROR);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND,    INDEX_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	57	None	replace
114	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND,    INDEX_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	57	None	replace
115	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldLocalOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	8	None	replace
116	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  MAX_FOLD_NUMBER);	  return    tryFoldLocalOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	8	None	replace
117	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  STRING_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  STRING_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  STRING_BITWISE_OPERAND);	  return    tryFoldLocalOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	8	None	replace
118	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  ROOT_LOCALE);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  ROOT_LOCALE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  ROOT_LOCALE);	  return    tryFoldLocalOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	8	None	replace
119	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  INDEX_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  INDEX_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    INDEX_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	42	None	replace
120	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  INDEX_OUT_OF_RANGE,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  INDEX_OUT_OF_RANGE,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  INDEX_OUT_OF_RANGE,  BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    INDEX_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	42	None	replace
121	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  INDEX_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  INDEX_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  INDEX_OUT_OF_RANGE,  MAX_FOLD_NUMBER);	  return    tryFoldUnaryOperator(subtree,    INDEX_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	42	None	replace
122	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    STRING_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	15	None	replace
123	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    STRING_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	15	None	replace
124	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldBinaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	28	None	replace
125	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	28	None	replace
126	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  STRING_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  STRING_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  STRING_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	28	None	replace
127	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	61	None	replace
128	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	61	None	replace
129	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	13	None	replace
130	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	13	None	replace
131	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	13	None	replace
132	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	13	None	replace
133	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	31	None	replace
134	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	31	None	replace
135	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  MAX_FOLD_NUMBER);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	31	None	replace
136	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  FACTIONAL_BITWISE_OPERAND);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	31	None	replace
137	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  STRING_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  STRING_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  STRING_BITWISE_OPERAND);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	31	None	replace
138	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  MISSING_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  MISSING_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  MISSING_BITWISE_OPERAND);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	31	None	replace
139	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree.cloneTree(),  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree.cloneTree(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree.cloneTree(),  false);	  return    tryReduceBinaryOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	20	None	replace
140	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  false,  true);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  false,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  false,  true);	  return    tryReduceBinaryOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	20	None	replace
141	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  false,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  false,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  false,  BITWISE_OPERAND);	  return    tryReduceBinaryOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	20	None	replace
142	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree.getNext(),  false);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree.getNext(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree.getNext(),  false);	  return    tryReduceBinaryOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	20	None	replace
143	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	12	None	replace
144	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);	  return    tryFoldUnaryOperator(subtree,    FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	12	None	replace
145	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	49	None	replace
146	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	49	None	replace
147	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	49	None	replace
148	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NON_NUMBER_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NON_NUMBER_ERROR);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	49	None	replace
149	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  STRING_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  STRING_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  STRING_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    STRING_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	29	None	replace
150	[BUG]  [BUGGY]  return  tryFoldBooleanOperator(subtrae,  false);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBooleanOperator(subtrae,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBooleanOperator(subtrae,  false);	  return    tryFoldBooleanOperator(subtree,    true);    	non-compiled	[CE]  orphaned  case	25	None	replace
151	[BUG]  [BUGGY]  return  tryFoldBooleanOperator(subtree,  true,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBooleanOperator(subtree,  true,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBooleanOperator(subtree,  true,  false);	  return    tryFoldBooleanOperator(subtree,    true);    	non-compiled	[CE]  orphaned  case	25	None	replace
152	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  false,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  false,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  false,  true);	  return    tryFoldLocalOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	6	None	replace
153	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  false,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  false,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  false,  BITWISE_OPERAND);	  return    tryFoldLocalOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	6	None	replace
154	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree.getNext(),  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree.getNext(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree.getNext(),  false);	  return    tryFoldLocalOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	6	None	replace
155	[BUG]  [BUGGY]  return  tryBooleanOperator(subtree,  true);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryBooleanOperator(subtree,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryBooleanOperator(subtree,  true);	  return    tryBooleanOperator(subtree);    	non-compiled	[CE]  orphaned  case	26	None	replace
156	[BUG]  [BUGGY]  return  tryBooleanOperator(subtree,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryBooleanOperator(subtree,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryBooleanOperator(subtree,  false);	  return    tryBooleanOperator(subtree);    	non-compiled	[CE]  orphaned  case	26	None	replace
157	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceOperandsForOp(subtree,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceOperandsForOp(subtree,  false);	  return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	37	None	replace
158	[BUG]  [BUGGY]  return  tryFoldVoidCall(subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldVoidCall(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldVoidCall(subtree);	  return    tryFoldVoidOp(subtree);    	non-compiled	[CE]  orphaned  case	39	None	replace
159	[BUG]  [BUGGY]  return  tryReducePoidOp(subtree);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReducePoidOp(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReducePoidOp(subtree);	  return    tryReducePoid(subtree);    	non-compiled	[CE]  orphaned  case	66	None	replace
160	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	50	None	replace
161	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	50	None	replace
162	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	50	None	replace
163	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	50	None	replace
164	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	50	None	replace
165	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	50	None	replace
166	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldLocalOperator(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	55	None	replace
167	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  DEFAULT_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldLocalOperator(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	55	None	replace
168	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	32	None	replace
169	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	32	None	replace
170	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	11	None	replace
171	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS_ERROR);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	11	None	replace
172	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  INDEX_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  INDEX_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  INDEX_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	11	None	replace
173	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	11	None	replace
174	[BUG]  [BUGGY]  return  tryFoldOperandsForOp(subtree,  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperandsForOp(subtree,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperandsForOp(subtree,  false);	  return    tryFoldOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	51	None	replace
175	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  DEFAULT_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    DEFAULT_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	43	None	replace
176	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND,  DEFAULT_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    DEFAULT_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	43	None	replace
177	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND,  MAX_FOLD_NUMBER);	  return    tryFoldUnaryOperator(subtree,    DEFAULT_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	43	None	replace
178	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  return    tryReduceBinaryOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	18	None	replace
179	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND);	  return    tryReduceBinaryOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	18	None	replace
180	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR);	  return    tryReduceBinaryOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	18	None	replace
181	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  STRING_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  STRING_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  STRING_BITWISE_OPERAND);	  return    tryReduceBinaryOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	18	None	replace
182	[BUG]  [BUGGY]  return  tryReduceLocationOperator(subtree);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceLocationOperator(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceLocationOperator(subtree);	  return    tryFoldLocationOperator(subtree);    	non-compiled	[CE]  orphaned  case	65	None	replace
183	[BUG]  [BUGGY]  return  tryFoldLocationOperator(subtree,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocationOperator(subtree,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocationOperator(subtree,  false);	  return    tryFoldLocationOperator(subtree);    	non-compiled	[CE]  orphaned  case	65	None	replace
184	[BUG]  [BUGGY]  return  tryFoldLocationOperator(subtree,  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocationOperator(subtree,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocationOperator(subtree,  true);	  return    tryFoldLocationOperator(subtree);    	non-compiled	[CE]  orphaned  case	65	None	replace
185	[BUG]  [BUGGY]  return  tryFoldLocationOperator(subtree.cloneTree());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocationOperator(subtree.cloneTree());  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocationOperator(subtree.cloneTree());	  return    tryFoldLocationOperator(subtree);    	non-compiled	[CE]  orphaned  case	65	None	replace
186	[BUG]  [BUGGY]  return  tryFoldLocationOperator(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocationOperator(subtree,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocationOperator(subtree,  BITWISE_OPERAND);	  return    tryFoldLocationOperator(subtree);    	non-compiled	[CE]  orphaned  case	65	None	replace
187	[BUG]  [BUGGY]  case  Token.BITNOT:  return  tryReduceBooleanOperator(subtree);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  case  Token.BITNOT:  return  tryReduceBooleanOperator(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	case  Token.BITNOT:  return  tryReduceBooleanOperator(subtree);	  case    Token.BITNOT:    return    tryReduceBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	2	None	replace
188	[BUG]  [BUGGY]  case  Token.BITNOT:  return  tryReduceBinaryOperator(subtree,  subtree);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  case  Token.BITNOT:  return  tryReduceBinaryOperator(subtree,  subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	case  Token.BITNOT:  return  tryReduceBinaryOperator(subtree,  subtree);	  case    Token.BITNOT:    return    tryReduceBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	2	None	replace
189	[BUG]  [BUGGY]  case  Token.BITNOT:  return  tryReduceVoid(subtree);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  case  Token.BITNOT:  return  tryReduceVoid(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	case  Token.BITNOT:  return  tryReduceVoid(subtree);	  case    Token.BITNOT:    return    tryReduceBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	2	None	replace
190	[BUG]  [BUGGY]  case  Token.BITNOT:  return  tryReduceBoolean(subtree);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  case  Token.BITNOT:  return  tryReduceBoolean(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	case  Token.BITNOT:  return  tryReduceBoolean(subtree);	  case    Token.BITNOT:    return    tryReduceBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	2	None	replace
191	[BUG]  [BUGGY]  case  Token.BITNOT:  return  tryReduceBinaryOperator(subtree,  false);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  case  Token.BITNOT:  return  tryReduceBinaryOperator(subtree,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	case  Token.BITNOT:  return  tryReduceBinaryOperator(subtree,  false);	  case    Token.BITNOT:    return    tryReduceBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	2	None	replace
192	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree.getParent(),  true);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree.getParent(),  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree.getParent(),  true);	  return    tryFoldUnaryOperator(subtree.getParent(),    false);    	non-compiled	[CE]  orphaned  case	47	None	replace
193	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree.getNext(),  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree.getNext(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree.getNext(),  false);	  return    tryFoldUnaryOperator(subtree.getParent(),    false);    	non-compiled	[CE]  orphaned  case	47	None	replace
194	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree.getLastChild(),  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree.getLastChild(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree.getLastChild(),  false);	  return    tryFoldUnaryOperator(subtree.getParent(),    false);    	non-compiled	[CE]  orphaned  case	47	None	replace
195	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree.getFirstChild(),  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree.getFirstChild(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree.getFirstChild(),  false);	  return    tryFoldUnaryOperator(subtree.getParent(),    false);    	non-compiled	[CE]  orphaned  case	47	None	replace
196	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree.getString(),  false);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree.getString(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree.getString(),  false);	  return    tryFoldUnaryOperator(subtree.getParent(),    false);    	non-compiled	[CE]  orphaned  case	47	None	replace
197	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree.getType(),  false);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree.getType(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree.getType(),  false);	  return    tryFoldUnaryOperator(subtree.getParent(),    false);    	non-compiled	[CE]  orphaned  case	47	None	replace
198	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree.getLineno(),  false);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree.getLineno(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree.getLineno(),  false);	  return    tryFoldUnaryOperator(subtree.getParent(),    false);    	non-compiled	[CE]  orphaned  case	47	None	replace
199	[BUG]  [BUGGY]  return  tryFoldCtorCall(subtree,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldCtorCall(subtree,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldCtorCall(subtree,  false);	  return    tryFoldBinaryOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	22	None	replace
200	[BUG]  [BUGGY]  return  tryFoldUnknownOperator(subtree,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnknownOperator(subtree,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnknownOperator(subtree,  false);	  return    tryFoldBinaryOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	22	None	replace
201	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  false);	  return    tryFoldUnaryOperator(subtree.cloneTree(),    false);    	non-compiled	[CE]  orphaned  case	46	None	replace
202	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  subtree.cloneTree(),  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  subtree.cloneTree(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  subtree.cloneTree(),  false);	  return    tryFoldUnaryOperator(subtree.cloneTree(),    false);    	non-compiled	[CE]  orphaned  case	46	None	replace
203	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree.clonePosition(),  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree.clonePosition(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree.clonePosition(),  false);	  return    tryFoldUnaryOperator(subtree.cloneTree(),    false);    	non-compiled	[CE]  orphaned  case	46	None	replace
204	[BUG]  [BUGGY]  return  tryFoldOperator(subtree.cloneTree(),  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree.cloneTree(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree.cloneTree(),  false);	  return    tryFoldUnaryOperator(subtree.cloneTree(),    false);    	non-compiled	[CE]  orphaned  case	46	None	replace
205	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree.clone(),  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree.clone(),  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree.clone(),  true);	  return    tryFoldUnaryOperator(subtree.cloneTree(),    false);    	non-compiled	[CE]  orphaned  case	46	None	replace
206	[BUG]  [BUGGY]  return  tryFoldVoid(subtree.cloneTree(),  false);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldVoid(subtree.cloneTree(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldVoid(subtree.cloneTree(),  false);	  return    tryFoldUnaryOperator(subtree.cloneTree(),    false);    	non-compiled	[CE]  orphaned  case	46	None	replace
207	[BUG]  [BUGGY]  return  tryReduceBitOperator(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBitOperator(subtree,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBitOperator(subtree,  BITWISE_OPERAND);	  return    tryReduceBitOperator(subtree);    	non-compiled	[CE]  orphaned  case	41	None	replace
208	[BUG]  [BUGGY]  return  tryReduceBitOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBitOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBitOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBitOperator(subtree);    	non-compiled	[CE]  orphaned  case	41	None	replace
209	[BUG]  [BUGGY]  return  tryReduceBitOperator(subtree,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBitOperator(subtree,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBitOperator(subtree,  false);	  return    tryReduceBitOperator(subtree);    	non-compiled	[CE]  orphaned  case	41	None	replace
210	[BUG]  [BUGGY]  return  tryReduceBitOperator(subtree,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBitOperator(subtree,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBitOperator(subtree,  true);	  return    tryReduceBitOperator(subtree);    	non-compiled	[CE]  orphaned  case	41	None	replace
211	[BUG]  [BUGGY]  return  tryFoldBitOperator(subtree);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBitOperator(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBitOperator(subtree);	  return    tryReduceBitOperator(subtree);    	non-compiled	[CE]  orphaned  case	41	None	replace
212	[BUG]  [BUGGY]  return  tryFoldOperator(subtree.cloneTree(),  subtree.cloneTree());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree.cloneTree(),  subtree.cloneTree());  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree.cloneTree(),  subtree.cloneTree());	  return    tryFoldOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	30	None	replace
213	[BUG]  [BUGGY]  return  tryFoldOperator(subtree.cloneTree(),  subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree.cloneTree(),  subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree.cloneTree(),  subtree);	  return    tryFoldOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	30	None	replace
214	[BUG]  [BUGGY]  return  tryFoldOperator(subtree.cloneTree(),  null);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree.cloneTree(),  null);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree.cloneTree(),  null);	  return    tryFoldOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	30	None	replace
215	[BUG]  [BUGGY]  return  tryFoldOperator(subtree.cloneTree(),  true);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree.cloneTree(),  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree.cloneTree(),  true);	  return    tryFoldOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	30	None	replace
216	[BUG]  [BUGGY]  return  tryFoldOperator(subtree.cloneTree(),  1);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree.cloneTree(),  1);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree.cloneTree(),  1);	  return    tryFoldOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	30	None	replace
217	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    BOOLEAN_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	67	None	replace
218	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    BOOLEAN_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	67	None	replace
219	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BYTE_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BYTE_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BYTE_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    BOOLEAN_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	67	None	replace
220	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  Boolean.valueOf(BITWISE_OPERAND));  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  Boolean.valueOf(BITWISE_OPERAND));  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  Boolean.valueOf(BITWISE_OPERAND));	  return    tryFoldUnaryOperator(subtree,    BOOLEAN_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	67	None	replace
221	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	59	None	replace
222	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	59	None	replace
223	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FIREAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FIREAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FIREAL_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	59	None	replace
224	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	59	None	replace
225	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  2);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  2);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  2);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	59	None	replace
226	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree.cloneTree(),  subtree.cloneTree());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree.cloneTree(),  subtree.cloneTree());  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree.cloneTree(),  subtree.cloneTree());	  return    tryReduceBinaryOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	16	None	replace
227	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree.cloneTree(),  true);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree.cloneTree(),  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree.cloneTree(),  true);	  return    tryReduceBinaryOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	16	None	replace
228	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree.cloneTree(),  subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree.cloneTree(),  subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree.cloneTree(),  subtree);	  return    tryReduceBinaryOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	16	None	replace
229	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree.cloneTree(),  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree.cloneTree(),  1);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree.cloneTree(),  1);	  return    tryReduceBinaryOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	16	None	replace
230	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree.getNext(),  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree.getNext(),  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree.getNext(),  true);	  return    tryFoldLocalOperator(subtree,    true);    	non-compiled	[CE]  orphaned  case	7	None	replace
231	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  true,  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  true,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  true,  false);	  return    tryFoldLocalOperator(subtree,    true);    	non-compiled	[CE]  orphaned  case	7	None	replace
232	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtrae,  false);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtrae,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtrae,  false);	  return    tryFoldLocalOperator(subtree,    true);    	non-compiled	[CE]  orphaned  case	7	None	replace
233	[BUG]  [BUGGY]  case  Token.BITNOT:  return  tryFoldBinaryOperator(subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  case  Token.BITNOT:  return  tryFoldBinaryOperator(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	case  Token.BITNOT:  return  tryFoldBinaryOperator(subtree);	  case    Token.BITNOT:    return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	1	None	replace
234	[BUG]  [BUGGY]  case  Token.BITNOT:  return  tryReduceOperandsToOp(subtree);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  case  Token.BITNOT:  return  tryReduceOperandsToOp(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	case  Token.BITNOT:  return  tryReduceOperandsToOp(subtree);	  case    Token.BITNOT:    return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	1	None	replace
235	[BUG]  [BUGGY]  case  Token.BITNOT:  return  tryReduceOperands(subtree);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  case  Token.BITNOT:  return  tryReduceOperands(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	case  Token.BITNOT:  return  tryReduceOperands(subtree);	  case    Token.BITNOT:    return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	1	None	replace
236	[BUG]  [BUGGY]  case  Token.BITNOT:  return  tryFoldBitOperator(subtree);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  case  Token.BITNOT:  return  tryFoldBitOperator(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	case  Token.BITNOT:  return  tryFoldBitOperator(subtree);	  case    Token.BITNOT:    return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	1	None	replace
237	[BUG]  [BUGGY]  case  Token.BITNOT:  return  tryReduceBitOperator(subtree);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  case  Token.BITNOT:  return  tryReduceBitOperator(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	case  Token.BITNOT:  return  tryReduceBitOperator(subtree);	  case    Token.BITNOT:    return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	1	None	replace
238	[BUG]  [BUGGY]  return  tryReduceLocalOperator(subtree,  true);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceLocalOperator(subtree,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceLocalOperator(subtree,  true);	  return    tryReduceLocalOperator(subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
239	[BUG]  [BUGGY]  return  tryReduceLocalOperator(subtree,  false);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceLocalOperator(subtree,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceLocalOperator(subtree,  false);	  return    tryReduceLocalOperator(subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
240	[BUG]  [BUGGY]  return  tryReduceLocalOperator(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceLocalOperator(subtree,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceLocalOperator(subtree,  BITWISE_OPERAND);	  return    tryReduceLocalOperator(subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
241	[BUG]  [BUGGY]  return  tryReduceLocalOperator(subtree,  null);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceLocalOperator(subtree,  null);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceLocalOperator(subtree,  null);	  return    tryReduceLocalOperator(subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
242	[BUG]  [BUGGY]  return  tryReduceBooleanOp(subtree);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBooleanOp(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBooleanOp(subtree);	  return    tryReduceBoolean(subtree);    	non-compiled	[CE]  orphaned  case	35	None	replace
243	[BUG]  [BUGGY]  return  tryReduceBoolean(boolean);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBoolean(boolean);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBoolean(boolean);	  return    tryReduceBoolean(subtree);    	non-compiled	[CE]  	35	None	replace
244	[BUG]  [BUGGY]  return  tryReduceBooleanCall(subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBooleanCall(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBooleanCall(subtree);	  return    tryReduceBoolean(subtree);    	non-compiled	[CE]  orphaned  case	35	None	replace
245	[BUG]  [BUGGY]  return  tryFoldBooleanOperator(subtree,  false,  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBooleanOperator(subtree,  false,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBooleanOperator(subtree,  false,  true);	  return    tryFoldBooleanOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	24	None	replace
246	[BUG]  [BUGGY]  return  tryFoldBidirectionalOperator(subtree);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBidirectionalOperator(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBidirectionalOperator(subtree);	  return    tryFoldBidirectionalOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
247	[BUG]  [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBidirectionalOperator(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBidirectionalOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
248	[BUG]  [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBidirectionalOperator(subtree,  MAX_FOLD_NUMBER);	  return    tryFoldBidirectionalOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
249	[BUG]  [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBidirectionalOperator(subtree,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBidirectionalOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
250	[BUG]  [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  STRING_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  STRING_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBidirectionalOperator(subtree,  STRING_BITWISE_OPERAND);	  return    tryFoldBidirectionalOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
251	[BUG]  [BUGGY]  return  tryFoldOperator(subtree.cloneTree(),  this);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree.cloneTree(),  this);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree.cloneTree(),  this);	  return    tryFoldOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	30	None	replace
252	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);	  return    tryFoldBinaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	28	None	replace
253	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  INDEX_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  INDEX_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  INDEX_GETELEM_INDEX_ERROR);	  return    tryFoldBinaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	28	None	replace
254	[BUG]  [BUGGY]  case  Token.BITNOT:  return  tryReduceBinaryOperator(subtree,  true);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  case  Token.BITNOT:  return  tryReduceBinaryOperator(subtree,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	case  Token.BITNOT:  return  tryReduceBinaryOperator(subtree,  true);	  case    Token.BITNOT:    return    tryReduceBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	2	None	replace
255	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);	  return    tryFoldLocalOperator(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	55	None	replace
256	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  INDEX_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  INDEX_OUT_OF_RANGE);	  return    tryFoldLocalOperator(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	55	None	replace
257	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldLocalOperator(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	55	None	replace
258	[BUG]  [BUGGY]  return  tryFoldOperand(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperand(subtree,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperand(subtree,  BITWISE_OPERAND);	  return    tryFoldOperand(subtree);    	non-compiled	[CE]  orphaned  case	52	None	replace
259	[BUG]  [BUGGY]  return  tryReduceVoidBinaryOperator(subtree);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceVoidBinaryOperator(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceVoidBinaryOperator(subtree);	  return    tryReduceVoid(subtree);    	non-compiled	[CE]  orphaned  case	4	None	replace
260	[BUG]  [BUGGY]  return  tryReduceVoidForOp(subtree);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceVoidForOp(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceVoidForOp(subtree);	  return    tryReduceVoid(subtree);    	non-compiled	[CE]  orphaned  case	4	None	replace
261	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  BOOLEAN_BITWISE_OPERAND);	  return    tryFoldLocalOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	8	None	replace
262	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	49	None	replace
263	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	49	None	replace
264	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER_ERROR);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	49	None	replace
265	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldLocalOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	54	None	replace
266	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldLocalOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	54	None	replace
267	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);	  return    tryFoldLocalOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	54	None	replace
268	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldLocalOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	54	None	replace
269	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree.cloneTree(),  subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree.cloneTree(),  subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree.cloneTree(),  subtree);	  return    tryFoldUnaryOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	48	None	replace
270	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree.cloneTree(),  this);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree.cloneTree(),  this);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree.cloneTree(),  this);	  return    tryFoldUnaryOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	48	None	replace
271	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  false,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  false,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  false,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	23	None	replace
272	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  false,  subtree.cloneTree());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  false,  subtree.cloneTree());  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  false,  subtree.cloneTree());	  return    tryFoldOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	23	None	replace
273	[BUG]  [BUGGY]  return  tryFoldBooleanOperator(subtree.cloneTree(),  true);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBooleanOperator(subtree.cloneTree(),  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBooleanOperator(subtree.cloneTree(),  true);	  return    tryFoldBooleanOperator(subtree,    true);    	non-compiled	[CE]  orphaned  case	25	None	replace
274	[BUG]  [BUGGY]  return  tryFoldBooleanOperator(subtree,  null);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBooleanOperator(subtree,  null);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBooleanOperator(subtree,  null);	  return    tryFoldBooleanOperator(subtree,    true);    	non-compiled	[CE]  orphaned  case	25	None	replace
275	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(false,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(false,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(false,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBinaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	14	None	replace
276	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  true,  case  Token.BITWISE_OPERAND);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  true,  case  Token.BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  true,  case  Token.BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    false,    case    Token.BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
277	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree.cloneNode(),  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree.cloneNode(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree.cloneNode(),  false);	  return    tryFoldUnaryOperator(subtree.cloneTree(),    false);    	non-compiled	[CE]  orphaned  case	46	None	replace
278	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree.cloneBlock(),  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree.cloneBlock(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree.cloneBlock(),  false);	  return    tryFoldUnaryOperator(subtree.cloneTree(),    false);    	non-compiled	[CE]  orphaned  case	46	None	replace
279	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);	  return    tryFoldUnaryOperator(subtree,    FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	12	None	replace
280	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BYTE_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BYTE_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BYTE_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	61	None	replace
281	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  INDEX_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  INDEX_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND,    INDEX_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	57	None	replace
282	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  FIELD_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  FIELD_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	32	None	replace
283	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(false,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(false,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(false,  BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	32	None	replace
284	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree.cloneTree(),  this);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree.cloneTree(),  this);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree.cloneTree(),  this);	  return    tryReduceBinaryOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	16	None	replace
285	[BUG]  [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBidirectionalOperator(subtree,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldBidirectionalOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
286	[BUG]  [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBidirectionalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBidirectionalOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
287	[BUG]  [BUGGY]  return  tryFoldRangeOperator(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldRangeOperator(subtree,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldRangeOperator(subtree,  BITWISE_OPERAND);	  return    tryFoldBidirectionalOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
288	[BUG]  [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  FIELD_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBidirectionalOperator(subtree,  FIELD_BITWISE_OPERAND);	  return    tryFoldBidirectionalOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
289	[BUG]  [BUGGY]  return  tryFoldVoidForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldVoidForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldVoidForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldVoidForOp(subtree);    	non-compiled	[CE]  orphaned  case	44	None	replace
290	[BUG]  [BUGGY]  return  tryFoldLocalVoidForOp(subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalVoidForOp(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalVoidForOp(subtree);	  return    tryFoldVoidForOp(subtree);    	non-compiled	[CE]  orphaned  case	44	None	replace
291	[BUG]  [BUGGY]  return  tryFoldVoidForOp(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldVoidForOp(subtree,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldVoidForOp(subtree,  BITWISE_OPERAND);	  return    tryFoldVoidForOp(subtree);    	non-compiled	[CE]  orphaned  case	44	None	replace
292	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree.getParent(),  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree.getParent(),  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree.getParent(),  true);	  return    tryReduceBinaryOperator(subtree,    true);    	non-compiled	[CE]  orphaned  case	19	None	replace
293	[BUG]  [BUGGY]  return  tryFoldBooleanOperator(subtree.cloneTree(),  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBooleanOperator(subtree.cloneTree(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBooleanOperator(subtree.cloneTree(),  false);	  return    tryFoldBooleanOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	24	None	replace
294	[BUG]  [BUGGY]  return  tryFoldBooleanOperator(subtree,  false,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBooleanOperator(subtree,  false,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBooleanOperator(subtree,  false,  BITWISE_OPERAND);	  return    tryFoldBooleanOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	24	None	replace
295	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.getParent(),  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree.getParent(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree.getParent(),  false);	  return    tryFoldBinaryOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	22	None	replace
296	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  false,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  false,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  false,  true);	  return    tryFoldBinaryOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	22	None	replace
297	[BUG]  [BUGGY]  return  tryReduceLocalVoid(subtree,  false);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceLocalVoid(subtree,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceLocalVoid(subtree,  false);	  return    tryReduceLocalVoid(subtree);    	non-compiled	[CE]  orphaned  case	36	None	replace
298	[BUG]  [BUGGY]  return  tryReduceLocalVoid(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceLocalVoid(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceLocalVoid(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceLocalVoid(subtree);    	non-compiled	[CE]  orphaned  case	36	None	replace
299	[BUG]  [BUGGY]  return  tryReduceLocalVoid(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceLocalVoid(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceLocalVoid(subtree,  FRACTIONAL_BITWISE_OPERAND);	  return    tryReduceLocalVoid(subtree);    	non-compiled	[CE]  orphaned  case	36	None	replace
300	[BUG]  [BUGGY]  return  tryReduceLocalVoid(subtree,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceLocalVoid(subtree,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceLocalVoid(subtree,  true);	  return    tryReduceLocalVoid(subtree);    	non-compiled	[CE]  orphaned  case	36	None	replace
301	[BUG]  [BUGGY]  return  tryFoldOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	51	None	replace
302	[BUG]  [BUGGY]  return  tryFoldOperandsForOp(subtree.cloneTree());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperandsForOp(subtree.cloneTree());  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperandsForOp(subtree.cloneTree());	  return    tryFoldOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	51	None	replace
303	[BUG]  [BUGGY]  return  tryFoldOperandsForOp(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperandsForOp(subtree,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperandsForOp(subtree,  BITWISE_OPERAND);	  return    tryFoldOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	51	None	replace
304	[BUG]  [BUGGY]  return  tryReduceBooleanOperand(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBooleanOperand(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBooleanOperand(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBooleanOperand(subtree);    	non-compiled	[CE]  orphaned  case	40	None	replace
305	[BUG]  [BUGGY]  return  tryReduceBooleanOperand(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBooleanOperand(subtree,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBooleanOperand(subtree,  BITWISE_OPERAND);	  return    tryReduceBooleanOperand(subtree);    	non-compiled	[CE]  orphaned  case	40	None	replace
306	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	50	None	replace
307	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	50	None	replace
308	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  INDEX_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  INDEX_OUT_OF_RANGE);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	50	None	replace
309	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  FIELD_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  FIELD_BITWISE_OPERAND);	  return    tryReduceBinaryOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	18	None	replace
310	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  DEFAULT_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  DEFAULT_BITWISE_OPERAND);	  return    tryReduceBinaryOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	18	None	replace
311	[BUG]  [BUGGY]  return  tryFoldVoidOperator(subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldVoidOperator(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldVoidOperator(subtree);	  return    tryFoldVoidOp(subtree);    	non-compiled	[CE]  orphaned  case	39	None	replace
312	[BUG]  [BUGGY]  return  tryFoldLocalVoidOp(subtree);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalVoidOp(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalVoidOp(subtree);	  return    tryFoldVoidOp(subtree);    	non-compiled	[CE]  orphaned  case	39	None	replace
313	[BUG]  [BUGGY]  return  tryFoldVoidOp(subtree.cloneTree());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldVoidOp(subtree.cloneTree());  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldVoidOp(subtree.cloneTree());	  return    tryFoldVoidOp(subtree);    	non-compiled	[CE]  orphaned  case	39	None	replace
314	[BUG]  [BUGGY]  return  tryFoldVoidOp(subtree,  false);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldVoidOp(subtree,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldVoidOp(subtree,  false);	  return    tryFoldVoidOp(subtree);    	non-compiled	[CE]  orphaned  case	39	None	replace
315	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  false,  subtree.cloneTree());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  false,  subtree.cloneTree());  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  false,  subtree.cloneTree());	  return    tryReduceBinaryOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	20	None	replace
316	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  false,  case  Token.BITWISE_OPERAND);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  false,  case  Token.BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  false,  case  Token.BITWISE_OPERAND);	  return    tryReduceBinaryOperator(subtree,    false);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
317	[BUG]  [BUGGY]  return  tryFoldLocalVoid(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalVoid(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalVoid(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldLocalVoid(subtree);    	non-compiled	[CE]  orphaned  case	38	None	replace
318	[BUG]  [BUGGY]  return  tryFoldLocalVoid(subtree,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalVoid(subtree,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalVoid(subtree,  true);	  return    tryFoldLocalVoid(subtree);    	non-compiled	[CE]  orphaned  case	38	None	replace
319	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	37	None	replace
320	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND);	  return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	37	None	replace
321	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree.cloneTree());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceOperandsForOp(subtree.cloneTree());  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceOperandsForOp(subtree.cloneTree());	  return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	37	None	replace
322	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  ROOT_LOCALE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  ROOT_LOCALE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  ROOT_LOCALE);	  return    tryFoldUnaryOperator(subtree,    STRING_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	15	None	replace
323	[BUG]  [BUGGY]  return  tryReduceBITWISE_OPERAND(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBITWISE_OPERAND(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBITWISE_OPERAND(subtree,  FRACTIONAL_BITWISE_OPERAND);	  return    tryReduceBITWISE_OPERAND(subtree);    	non-compiled	[CE]  orphaned  case	45	None	replace
324	[BUG]  [BUGGY]  return  tryReduceBITWISE_OPERand(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBITWISE_OPERand(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBITWISE_OPERand(subtree,  FRACTIONAL_BITWISE_OPERAND);	  return    tryReduceBITWISE_OPERAND(subtree);    	non-compiled	[CE]  orphaned  case	45	None	replace
325	[BUG]  [BUGGY]  return  tryReduceBITWISE_OPERAND(subtree,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBITWISE_OPERAND(subtree,  FIELD_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBITWISE_OPERAND(subtree,  FIELD_BITWISE_OPERAND);	  return    tryReduceBITWISE_OPERAND(subtree);    	non-compiled	[CE]  orphaned  case	45	None	replace
326	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FIELD_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FIELD_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    STRING_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	29	None	replace
327	[BUG]  [BUGGY]  return  tryReduceBooleanVoid(subtree);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBooleanVoid(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBooleanVoid(subtree);	  return    tryReduceBoolean(subtree);    	non-compiled	[CE]  orphaned  case	35	None	replace
328	[BUG]  [BUGGY]  return  tryReduceBoolean(subtree,  true);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBoolean(subtree,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBoolean(subtree,  true);	  return    tryReduceBoolean(subtree);    	non-compiled	[CE]  orphaned  case	35	None	replace
329	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree.getParent(),  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree.getParent(),  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree.getParent(),  false);	  return    tryFoldLocalOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	6	None	replace
330	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree.getParent(),  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree.getParent(),  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree.getParent(),  true);	  return    tryFoldLocalOperator(subtree,    true);    	non-compiled	[CE]  orphaned  case	7	None	replace
331	[BUG]  [BUGGY]  return  tryReducePoidForOp(subtree);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReducePoidForOp(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReducePoidForOp(subtree);	  return    tryReducePoid(subtree);    	non-compiled	[CE]  orphaned  case	66	None	replace
332	[BUG]  [BUGGY]  return  tryReducePoid(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReducePoid(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReducePoid(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReducePoid(subtree);    	non-compiled	[CE]  orphaned  case	66	None	replace
333	[BUG]  [BUGGY]  return  tryReducePoidOperator(subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReducePoidOperator(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReducePoidOperator(subtree);	  return    tryReducePoid(subtree);    	non-compiled	[CE]  orphaned  case	66	None	replace
334	[BUG]  [BUGGY]  return  tryReducePoid(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReducePoid(subtree,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReducePoid(subtree,  BITWISE_OPERAND);	  return    tryReducePoid(subtree);    	non-compiled	[CE]  orphaned  case	66	None	replace
335	[BUG]  [BUGGY]  return  tryReduceLocalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceLocalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceLocalOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceLocalOperator(subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
336	[BUG]  [BUGGY]  return  tryReduceLocalOperator(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceLocalOperator(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceLocalOperator(subtree,  FRACTIONAL_BITWISE_OPERAND);	  return    tryReduceLocalOperator(subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
337	[BUG]  [BUGGY]  return  tryReduceLocalOperator(subtree,  default);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceLocalOperator(subtree,  default);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceLocalOperator(subtree,  default);	  return    tryReduceLocalOperator(subtree);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
338	[BUG]  [BUGGY]  case  Token.BITNOT:  return  tryReduceOperandsForOp(subtree,  subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  case  Token.BITNOT:  return  tryReduceOperandsForOp(subtree,  subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	case  Token.BITNOT:  return  tryReduceOperandsForOp(subtree,  subtree);	  case    Token.BITNOT:    return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	1	None	replace
339	[BUG]  [BUGGY]  case  Token.BITNOT:  return  tryReduceOperandsForOp(subtree,  false);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  case  Token.BITNOT:  return  tryReduceOperandsForOp(subtree,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	case  Token.BITNOT:  return  tryReduceOperandsForOp(subtree,  false);	  case    Token.BITNOT:    return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	1	None	replace
340	[BUG]  [BUGGY]  case  Token.BITNOT:  return  tryReduceOperandsForOp(subtree,  true);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  case  Token.BITNOT:  return  tryReduceOperandsForOp(subtree,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	case  Token.BITNOT:  return  tryReduceOperandsForOp(subtree,  true);	  case    Token.BITNOT:    return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	1	None	replace
341	[BUG]  [BUGGY]  case  Token.BITNOT:  return  tryReduceOperandsForOp(subtree,  null);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  case  Token.BITNOT:  return  tryReduceOperandsForOp(subtree,  null);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	case  Token.BITNOT:  return  tryReduceOperandsForOp(subtree,  null);	  case    Token.BITNOT:    return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	1	None	replace
342	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  INDEX_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  INDEX_OUT_OF_RANGE);	  return    tryReduceBinaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	17	None	replace
343	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(false,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(false,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(false,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBinaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	17	None	replace
344	[BUG]  [BUGGY]  return  tryBooleanOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryBooleanOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryBooleanOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryBooleanOperator(subtree);    	non-compiled	[CE]  orphaned  case	26	None	replace
345	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  false,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  false,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  false,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    false,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	63	None	replace
346	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtrae,  true,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtrae,  true,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtrae,  true,  BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    false,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	63	None	replace
347	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  INDEX_OUT_OF_BOUNDS_ERROR);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	10	None	replace
348	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_GETELEM_INDEX_ERROR);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	58	None	replace
349	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR,  BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	58	None	replace
350	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	59	None	replace
351	[BUG]  [BUGGY]  return  tryReduceBooleanOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBooleanOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBooleanOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBooleanOperator(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
352	[BUG]  [BUGGY]  return  tryReduceBooleanOperator(subtree,  default);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBooleanOperator(subtree,  default);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBooleanOperator(subtree,  default);	  return    tryReduceBooleanOperator(subtree);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
353	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER  +  1);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	60	None	replace
354	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	60	None	replace
355	[BUG]  [BUGGY]  return  tryFoldLocationOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocationOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocationOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldLocationOperator(subtree);    	non-compiled	[CE]  orphaned  case	65	None	replace
356	[BUG]  [BUGGY]  return  tryFoldLocationOperator(subtree,  null);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocationOperator(subtree,  null);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocationOperator(subtree,  null);	  return    tryFoldLocationOperator(subtree);    	non-compiled	[CE]  orphaned  case	65	None	replace
357	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree.cloneTree(),  this);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree.cloneTree(),  this);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree.cloneTree(),  this);	  return    tryFoldLocalOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	9	None	replace
358	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	31	None	replace
359	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  DEFAULT_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	31	None	replace
360	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  BOOLEAN_BITWISE_OPERAND);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	31	None	replace
361	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  NEGATING_A_NON_NUMBER_ERROR);	  return    tryFoldUnaryOperator(subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	27	None	replace
362	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  MAX_FOLD_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  MAX_FOLD_NUMBER_ERROR);	  return    tryFoldUnaryOperator(subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	27	None	replace
363	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER_ERROR);	  return    tryFoldUnaryOperator(subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	27	None	replace
364	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  DEFAULT_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	27	None	replace
365	[BUG]  [BUGGY]  return  tryFoldBooleanOperator(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBooleanOperator(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBooleanOperator(subtree,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBooleanOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	53	None	replace
366	[BUG]  [BUGGY]  return  tryFoldBooleanOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBooleanOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBooleanOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBooleanOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	53	None	replace
367	[BUG]  [BUGGY]  return  tryFoldBooleanOperator(subtree,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBooleanOperator(subtree,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBooleanOperator(subtree,  BOOLEAN_BITWISE_OPERAND);	  return    tryFoldBooleanOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	53	None	replace
368	[BUG]  [BUGGY]  return  tryFoldBooleanOperator(subtree,  ROOT_LOCALE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBooleanOperator(subtree,  ROOT_LOCALE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBooleanOperator(subtree,  ROOT_LOCALE);	  return    tryFoldBooleanOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	53	None	replace
369	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_GETELEM_INDEX_ERROR);	  return    tryFoldUnaryOperator(subtree,    DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	13	None	replace
370	[BUG]  [BUGGY]  return  tryReduceBITWISE_OPERAND(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBITWISE_OPERAND(subtree,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBITWISE_OPERAND(subtree,  BITWISE_OPERAND);	  return    tryReduceBITWISE_OPERAND(subtree);    	non-compiled	[CE]  orphaned  case	45	None	replace
371	[BUG]  [BUGGY]  return  tryReduceBITWISE_OPERAND(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBITWISE_OPERAND(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBITWISE_OPERAND(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBITWISE_OPERAND(subtree);    	non-compiled	[CE]  orphaned  case	45	None	replace
372	[BUG]  [BUGGY]  return  tryReduceBITWISE_OPERANDsForOp(subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBITWISE_OPERANDsForOp(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBITWISE_OPERANDsForOp(subtree);	  return    tryReduceBITWISE_OPERAND(subtree);    	non-compiled	[CE]  orphaned  case	45	None	replace
373	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree.cloneTree(),  Boolean.TRUE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree.cloneTree(),  Boolean.TRUE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree.cloneTree(),  Boolean.TRUE);	  return    tryFoldLocalOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	9	None	replace
374	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree.cloneTree(),  null);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree.cloneTree(),  null);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree.cloneTree(),  null);	  return    tryReduceBinaryOperator(subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	16	None	replace
375	[BUG]  [BUGGY]  return  tryReduceBitOperator(subtree,  null);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBitOperator(subtree,  null);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBitOperator(subtree,  null);	  return    tryReduceBitOperator(subtree);    	non-compiled	[CE]  orphaned  case	41	None	replace
376	[BUG]  [BUGGY]  return  tryFoldVoidOperator(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldVoidOperator(subtree,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldVoidOperator(subtree,  BITWISE_OPERAND);	  return    tryFoldBidirectionalOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
377	[BUG]  [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBidirectionalOperator(subtree,  BOOLEAN_BITWISE_OPERAND);	  return    tryFoldBidirectionalOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
378	[BUG]  [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  ROOT_LOCALE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  ROOT_LOCALE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBidirectionalOperator(subtree,  ROOT_LOCALE);	  return    tryFoldBidirectionalOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
379	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree  +  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceOperandsForOp(subtree  +  1);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceOperandsForOp(subtree  +  1);	  return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	37	None	replace
380	[BUG]  [BUGGY]  return  tryFoldBITWISE_OPERAND(subtree);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBITWISE_OPERAND(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBITWISE_OPERAND(subtree);	  return    tryFoldBinaryOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	32	None	replace
381	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  ROOT_LOCALE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  ROOT_LOCALE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  ROOT_LOCALE);	  return    tryFoldBinaryOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	32	None	replace
382	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE,  BOOLEAN_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	61	None	replace
383	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	61	None	replace
384	[BUG]  [BUGGY]  return  tryReduceBooleanForOp(subtree);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBooleanForOp(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBooleanForOp(subtree);	  return    tryReduceBoolean(subtree);    	non-compiled	[CE]  orphaned  case	35	None	replace
385	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  false,  case  Token.BITWISE_OPERAND);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  false,  case  Token.BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  false,  case  Token.BITWISE_OPERAND);	  return    tryFoldLocalOperator(subtree,    false);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
386	[BUG]  [BUGGY]  case  Token.BITNOT:  return  tryReduceBitOperandsForOp(subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  case  Token.BITNOT:  return  tryReduceBitOperandsForOp(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	case  Token.BITNOT:  return  tryReduceBitOperandsForOp(subtree);	  case    Token.BITNOT:    return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	1	None	replace
387	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceOperandsForOp(subtree,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceOperandsForOp(subtree,  true);	  return    tryReduceBinaryOperator(subtree,    true);    	non-compiled	[CE]  orphaned  case	19	None	replace
388	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND,  BITNOT_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND,  BITNOT_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  BITWISE_OPERAND,  BITNOT_OPERAND);	  return    tryFoldLocalOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	8	None	replace
389	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND,  DEFAULT_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND,  DEFAULT_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  DEFAULT_BITWISE_OPERAND,  DEFAULT_GETELEM_INDEX_ERROR);	  return    tryFoldUnaryOperator(subtree,    DEFAULT_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	43	None	replace
390	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  inDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  inDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  inDEX_OUT_OF_BOUNDS_ERROR);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	10	None	replace
391	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR,  DEGATING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR,  DEGATING_A_NON_NUMBER_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR,  DEGATING_A_NON_NUMBER_ERROR);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	58	None	replace
392	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NON_NUMBER_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NON_NUMBER_ERROR);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	58	None	replace
393	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	58	None	replace
394	[BUG]  [BUGGY]  return  tryFoldVoidOp(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldVoidOp(subtree,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldVoidOp(subtree,  BITWISE_OPERAND);	  return    tryFoldVoidOp(subtree);    	non-compiled	[CE]  orphaned  case	39	None	replace
395	[BUG]  [BUGGY]  return  tryFoldBooleanOperator(subtree,  BITWISE_OPERAND,  BITNOT_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBooleanOperator(subtree,  BITWISE_OPERAND,  BITNOT_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBooleanOperator(subtree,  BITWISE_OPERAND,  BITNOT_OPERAND);	  return    tryFoldBooleanOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	53	None	replace
396	[BUG]  [BUGGY]  return  tryFoldBooleanOperator(subtree,  BITWISE_OPERAND,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBooleanOperator(subtree,  BITWISE_OPERAND,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBooleanOperator(subtree,  BITWISE_OPERAND,  BITWISE_OPERAND);	  return    tryFoldBooleanOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	53	None	replace
397	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE,  MAX_FOLD_NUMBER);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND,    INDEX_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	57	None	replace
398	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  BOUNDS_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  BOUNDS_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  BOUNDS_ERROR);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND,    INDEX_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	57	None	replace
399	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  DEFAULT_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  DEFAULT_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  DEFAULT_GETELEM_INDEX_ERROR);	  return    tryFoldUnaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND,    INDEX_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	57	None	replace
400	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBinaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	17	None	replace
401	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_GETELEM_INDEX_ERROR);	  return    tryReduceBinaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	17	None	replace
402	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);	  return    tryReduceBinaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	17	None	replace
403	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  INDEX_OUT_OF_BOUNDS_ERROR,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  INDEX_OUT_OF_BOUNDS_ERROR,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  INDEX_OUT_OF_BOUNDS_ERROR,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	11	None	replace
404	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  inDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  inDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  inDEX_OUT_OF_BOUNDS_ERROR);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	11	None	replace
405	[BUG]  [BUGGY]  return  tryFoldOperand(subtree.cloneTree());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperand(subtree.cloneTree());  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperand(subtree.cloneTree());	  return    tryFoldOperand(subtree);    	non-compiled	[CE]  orphaned  case	52	None	replace
406	[BUG]  [BUGGY]  return  tryReduceBooleanOperand(subtree.cloneTree());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBooleanOperand(subtree.cloneTree());  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBooleanOperand(subtree.cloneTree());	  return    tryReduceBooleanOperand(subtree);    	non-compiled	[CE]  orphaned  case	40	None	replace
407	[BUG]  [BUGGY]  return  tryReduceBooleanOperator(subtree,  null);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBooleanOperator(subtree,  null);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBooleanOperator(subtree,  null);	  return    tryReduceBooleanOperator(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
408	[BUG]  [BUGGY]  return  tryFoldOperandsForOp(subtree,  true);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperandsForOp(subtree,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperandsForOp(subtree,  true);	  return    tryFoldUnaryOperator(subtree,    true);    	non-compiled	[CE]  orphaned  case	21	None	replace
409	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  false,  case  Token.BITWISE_OPERAND,  MAX_FOLD_NUMBER);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  false,  case  Token.BITWISE_OPERAND,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  false,  case  Token.BITWISE_OPERAND,  MAX_FOLD_NUMBER);	  return    tryFoldUnaryOperator(subtree,    false,    case    Token.BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
410	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  false,  case  Token.BITWISE_OPERAND,  true);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  false,  case  Token.BITWISE_OPERAND,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  false,  case  Token.BITWISE_OPERAND,  true);	  return    tryFoldUnaryOperator(subtree,    false,    case    Token.BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
411	[BUG]  [BUGGY]  return  tryReduceLocalVoidForOp(subtree);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceLocalVoidForOp(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceLocalVoidForOp(subtree);	  return    tryReduceLocalVoid(subtree);    	non-compiled	[CE]  orphaned  case	36	None	replace
412	[BUG]  [BUGGY]  return  tryReduceLocalVoidOp(subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceLocalVoidOp(subtree);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceLocalVoidOp(subtree);	  return    tryReduceLocalVoid(subtree);    	non-compiled	[CE]  orphaned  case	36	None	replace
413	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	60	None	replace
414	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  MAX_BOLD_NUMBER,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  MAX_BOLD_NUMBER,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  MAX_BOLD_NUMBER,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	60	None	replace
415	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  true);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  true);	  return    tryFoldUnaryOperator(subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	27	None	replace
416	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  Boolean.TRUE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  Boolean.TRUE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  Boolean.TRUE);	  return    tryFoldUnaryOperator(subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	27	None	replace
417	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  INVALID_GETELEM_INDEX_ERROR,  false);	  return    tryFoldUnaryOperator(subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	27	None	replace
418	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BOOLEAN_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BOOLEAN_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BOOLEAN_GETELEM_INDEX_ERROR);	  return    tryFoldUnaryOperator(subtree,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	27	None	replace
419	[BUG]  [BUGGY]  return  tryFoldOperandsForOp(subtree  +  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperandsForOp(subtree  +  1);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperandsForOp(subtree  +  1);	  return    tryFoldOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	51	None	replace
420	[BUG]  [BUGGY]  return  tryFoldBooleanOperator(subtrae,  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBooleanOperator(subtrae,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBooleanOperator(subtrae,  true);	  return    tryFoldBooleanOperator(subtree,    false);    	non-compiled	[CE]  orphaned  case	24	None	replace
421	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    BOOLEAN_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	67	None	replace
422	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND  |  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND  |  BOOLEAN_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND  |  BOOLEAN_BITWISE_OPERAND);	  return    tryFoldUnaryOperator(subtree,    BOOLEAN_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	67	None	replace
423	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NUMBER);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	33	None	replace
424	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBinaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	14	None	replace
425	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldBinaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldBinaryOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldBinaryOperator(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	28	None	replace
426	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	50	None	replace
427	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_GETELEM_INDEX_ERROR);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	50	None	replace
428	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	49	None	replace
429	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  true);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  true);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  true);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	49	None	replace
430	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  2);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  2);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  2);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	49	None	replace
431	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  false);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR,  false);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INVALID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	49	None	replace
432	[BUG]  [BUGGY]  return  tryBooleanOperator(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryBooleanOperator(subtree,  BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryBooleanOperator(subtree,  BITWISE_OPERAND);	  return    tryBooleanOperator(subtree);    	non-compiled	[CE]  orphaned  case	26	None	replace
433	[BUG]  [BUGGY]  return  tryReduceLocalOperator(subtree.cloneTree());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceLocalOperator(subtree.cloneTree());  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceLocalOperator(subtree.cloneTree());	  return    tryReduceLocalOperator(subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
434	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);	  return    tryFoldUnaryOperator(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	59	None	replace
435	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND,  BITNOT);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND,  BITNOT);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  BITWISE_OPERAND,  BITNOT);	  return    tryReduceBinaryOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	18	None	replace
436	[BUG]  [BUGGY]  return  tryReduceBinaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryReduceBinaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryReduceBinaryOperator(subtree,  BOOLEAN_BITWISE_OPERAND);	  return    tryReduceBinaryOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	18	None	replace
437	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  inDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldLocalOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  inDEX_OUT_OF_RANGE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldLocalOperator(subtree,  FRACTIONAL_BITWISE_OPERAND,  inDEX_OUT_OF_RANGE);	  return    tryFoldLocalOperator(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	55	None	replace
438	[BUG]  [BUGGY]  return  tryFoldUnaryOperator(subtree,  INDEX_OUT_OF_RANGE,  DEFAULT_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldUnaryOperator(subtree,  INDEX_OUT_OF_RANGE,  DEFAULT_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldUnaryOperator(subtree,  INDEX_OUT_OF_RANGE,  DEFAULT_GETELEM_INDEX_ERROR);	  return    tryFoldUnaryOperator(subtree,    INDEX_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	42	None	replace
439	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  ROOT_LOCALE);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:  tryReduceOperandsForOp(subtree);      [BUGGY]  return  tryFoldOperator(subtree,  ROOT_LOCALE);  [BUGGY]        case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	85	85	3	replace	return  tryFoldOperator(subtree,  ROOT_LOCALE);	  return    tryFoldOperator(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	31	None	replace
