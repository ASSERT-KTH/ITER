bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  numValue  =  left.getDouble();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  numValue  =  left.getDouble();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	numValue  =  left.getDouble();	  return    numValue;    	non-compiled	[CE]  	5	None	replace
2	[BUG]  [BUGGY]  return  numValue  -  left.getDouble();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  numValue  -  left.getDouble();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  numValue  -  left.getDouble();	  return    numValue;    	non-compiled	[CE]  	5	None	replace
3	[BUG]  [BUGGY]  return  numValue  -  leftVal.getDouble();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  numValue  -  leftVal.getDouble();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  numValue  -  leftVal.getDouble();	  return    numValue;    	non-compiled	[CE]  	5	None	replace
4	[BUG]  [BUGGY]  return  numValue  -  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  numValue  -  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  numValue  -  1;	  return    numValue;    	non-compiled	[CE]  	5	None	replace
5	[BUG]  [BUGGY]  return  left.replaceChild(n,  0);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(n,  0);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(n,  0);	  return    left.replaceChild(n,    numValue);    	non-compiled	[CE]  	52	None	replace
6	[BUG]  [BUGGY]  return  left.replaceChild(n,  numValue  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(n,  numValue  +  1);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(n,  numValue  +  1);	  return    left.replaceChild(n,    numValue);    	non-compiled	[CE]  	52	None	replace
7	[BUG]  [BUGGY]  return  n.replaceChild(left,  numValue);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.replaceChild(left,  numValue);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.replaceChild(left,  numValue);	  return    left.replaceChild(n,    numValue);    	non-compiled	[CE]  	52	None	replace
8	[BUG]  [BUGGY]  return  left.replaceChild(left,  numValue);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(left,  numValue);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(left,  numValue);	  return    left.replaceChild(n,    numValue);    	non-compiled	[CE]  	52	None	replace
9	[BUG]  [BUGGY]  return  left.replaceChild(n,  val);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(n,  val);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(n,  val);	  return    left.replaceChild(n,    numValue);    	non-compiled	[CE]  	52	None	replace
10	[BUG]  [BUGGY]  return  left.replaceChild(n,  -1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(n,  -1);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(n,  -1);	  return    left.replaceChild(n,    numValue);    	non-compiled	[CE]  	52	None	replace
11	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  Token.FALSE  :  Token.TRUE;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  Token.FALSE  :  Token.TRUE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  Token.FALSE  :  Token.TRUE;	  return    leftVal.toBoolean(true)?    Token.FALSE    :    Token.EMPTY;    	non-compiled	[CE]  	48	None	replace
12	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  Token.FALSE  :  Token.EMPTY;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  Token.FALSE  :  Token.EMPTY;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  Token.FALSE  :  Token.EMPTY;	  return    leftVal.toBoolean(true)?    Token.FALSE    :    Token.EMPTY;    	non-compiled	[CE]  	48	None	replace
13	[BUG]  [BUGGY]  return  n.toBoolean(true)?  Token.FALSE  :  Token.EMPTY;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(true)?  Token.FALSE  :  Token.EMPTY;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(true)?  Token.FALSE  :  Token.EMPTY;	  return    leftVal.toBoolean(true)?    Token.FALSE    :    Token.EMPTY;    	non-compiled	[CE]  	48	None	replace
14	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  Token.FALSE  :  Token.FUNCTION;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  Token.FALSE  :  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  Token.FALSE  :  Token.FUNCTION;	  return    leftVal.toBoolean(true)?    Token.FALSE    :    Token.EMPTY;    	non-compiled	[CE]  	48	None	replace
15	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  Token.FALSE  :  Token.STRING;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  Token.FALSE  :  Token.STRING;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  Token.FALSE  :  Token.STRING;	  return    leftVal.toBoolean(true)?    Token.FALSE    :    Token.EMPTY;    	non-compiled	[CE]  	48	None	replace
16	[BUG]  [BUGGY]  return  left.getNext()  ||  left.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getNext()  ||  left.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getNext()  ||  left.getLastChild().getType()  ==  Token.FUNCTION;	  return    n.getNext()    ||    left.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	18	None	replace
17	[BUG]  [BUGGY]  return  n.getNext()  &&  left.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getNext()  &&  left.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getNext()  &&  left.getLastChild().getType()  ==  Token.FUNCTION;	  return    n.getNext()    ||    left.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	18	None	replace
18	[BUG]  [BUGGY]  return  left.getNext()  &&  left.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getNext()  &&  left.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getNext()  &&  left.getLastChild().getType()  ==  Token.FUNCTION;	  return    n.getNext()    ||    left.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	18	None	replace
19	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()  ||  left.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getFirstChild().getNext()  ||  left.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getFirstChild().getNext()  ||  left.getLastChild().getType()  ==  Token.FUNCTION;	  return    n.getNext()    ||    left.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	18	None	replace
20	[BUG]  [BUGGY]  return  left.getNext()  ||  n.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getNext()  ||  n.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getNext()  ||  n.getLastChild().getType()  ==  Token.FUNCTION;	  return    n.getNext()    ||    left.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	18	None	replace
21	[BUG]  [BUGGY]  return  n.getFirstChild()  ||  left.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getFirstChild()  ||  left.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getFirstChild()  ||  left.getLastChild().getType()  ==  Token.FUNCTION;	  return    n.getNext()    ||    left.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	18	None	replace
22	[BUG]  [BUGGY]  return  left.getNext()  ||  left.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getNext()  ||  left.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getNext()  ||  left.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getNext()    ||    left.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	18	None	replace
23	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  Token.FALSE  :  false;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  Token.FALSE  :  false;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  Token.FALSE  :  false;	  return    leftVal.toBoolean(true)?    Token.FALSE    :    false;    	non-compiled	[CE]  	14	None	replace
24	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  Token.FALSE  :  true;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  Token.FALSE  :  true;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  Token.FALSE  :  true;	  return    leftVal.toBoolean(true)?    Token.FALSE    :    false;    	non-compiled	[CE]  	14	None	replace
25	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  Token.FALSE  :  true;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  Token.FALSE  :  true;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  Token.FALSE  :  true;	  return    leftVal.toBoolean(true)?    Token.FALSE    :    false;    	non-compiled	[CE]  	14	None	replace
26	[BUG]  [BUGGY]  return  n.toBoolean(true)?  Token.FALSE  :  false;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(true)?  Token.FALSE  :  false;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(true)?  Token.FALSE  :  false;	  return    leftVal.toBoolean(true)?    Token.FALSE    :    false;    	non-compiled	[CE]  	14	None	replace
27	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  Token.FALSE  :  Boolean.TRUE;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  Token.FALSE  :  Boolean.TRUE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  Token.FALSE  :  Boolean.TRUE;	  return    leftVal.toBoolean(true)?    Token.FALSE    :    false;    	non-compiled	[CE]  	14	None	replace
28	[BUG]  [BUGGY]  Node  leftVal  =  left.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  Node  leftVal  =  left.getFirstChild();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	Node  leftVal  =  left.getFirstChild();	  Node    leftVal    =    left.getLastChild();    	non-compiled	[CE]  	28	None	replace
29	[BUG]  [BUGGY]  Node  leftVal  =  n.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  Node  leftVal  =  n.getLastChild();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	Node  leftVal  =  n.getLastChild();	  Node    leftVal    =    left.getLastChild();    	non-compiled	[CE]  	28	None	replace
30	[BUG]  [BUGGY]  Node  leftVal  =  left.removeFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  Node  leftVal  =  left.removeFirstChild();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	Node  leftVal  =  left.removeFirstChild();	  Node    leftVal    =    left.getLastChild();    	non-compiled	[CE]  	28	None	replace
31	[BUG]  [BUGGY]  Node  leftVal  =  left.getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  Node  leftVal  =  left.getNext();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	Node  leftVal  =  left.getNext();	  Node    leftVal    =    left.getLastChild();    	non-compiled	[CE]  	28	None	replace
32	[BUG]  [BUGGY]  Node  leftVal  =  n.getFirstChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  Node  leftVal  =  n.getFirstChild();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	Node  leftVal  =  n.getFirstChild();	  Node    leftVal    =    left.getLastChild();    	non-compiled	[CE]  	28	None	replace
33	[BUG]  [BUGGY]  Node  leftVal  =  right.getFirstChild();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  Node  leftVal  =  right.getFirstChild();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	Node  leftVal  =  right.getFirstChild();	  Node    leftVal    =    left.getLastChild();    	non-compiled	[CE]  	28	None	replace
34	[BUG]  [BUGGY]  return  n.toBoolean(true)?  TernaryValue.NUMBER  :  TernaryValue.UNKNOWN;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(true)?  TernaryValue.NUMBER  :  TernaryValue.UNKNOWN;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(true)?  TernaryValue.NUMBER  :  TernaryValue.UNKNOWN;	  return    leftVal.toBoolean(true)?    TernaryValue.NUMBER    :    TernaryValue.UNKNOWN;    	non-compiled	[CE]  	38	None	replace
35	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.NUMBER  :  TernaryValue.UNKNOWN;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.NUMBER  :  TernaryValue.UNKNOWN;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  TernaryValue.NUMBER  :  TernaryValue.UNKNOWN;	  return    leftVal.toBoolean(true)?    TernaryValue.NUMBER    :    TernaryValue.UNKNOWN;    	non-compiled	[CE]  	38	None	replace
36	[BUG]  [BUGGY]  return  left.toBoolean(true)?  TernaryValue.NUMBER  :  TernaryValue.UNKNOWN;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.toBoolean(true)?  TernaryValue.NUMBER  :  TernaryValue.UNKNOWN;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.toBoolean(true)?  TernaryValue.NUMBER  :  TernaryValue.UNKNOWN;	  return    leftVal.toBoolean(true)?    TernaryValue.NUMBER    :    TernaryValue.UNKNOWN;    	non-compiled	[CE]  	38	None	replace
37	[BUG]  [BUGGY]  return  n.toBoolean(false)?  TernaryValue.NUMBER  :  TernaryValue.UNKNOWN;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(false)?  TernaryValue.NUMBER  :  TernaryValue.UNKNOWN;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(false)?  TernaryValue.NUMBER  :  TernaryValue.UNKNOWN;	  return    leftVal.toBoolean(true)?    TernaryValue.NUMBER    :    TernaryValue.UNKNOWN;    	non-compiled	[CE]  	38	None	replace
38	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.NUMBER  :  Token.UNKNOWN;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.NUMBER  :  Token.UNKNOWN;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.NUMBER  :  Token.UNKNOWN;	  return    leftVal.toBoolean(true)?    TernaryValue.NUMBER    :    TernaryValue.UNKNOWN;    	non-compiled	[CE]  	38	None	replace
39	[BUG]  [BUGGY]  return  left.getParentNode();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getParentNode();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getParentNode();	  return    n.getParentNode();    	non-compiled	[CE]  	61	None	replace
40	[BUG]  [BUGGY]  return  left.getNextNode();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getNextNode();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getNextNode();	  return    n.getParentNode();    	non-compiled	[CE]  	61	None	replace
41	[BUG]  [BUGGY]  n  =  left.getIntValue();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.getIntValue();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.getIntValue();	  n    =    left.getDouble();    	non-compiled	[CE]  	31	None	replace
42	[BUG]  [BUGGY]  n  =  left.getNumber();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.getNumber();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.getNumber();	  n    =    left.getDouble();    	non-compiled	[CE]  	31	None	replace
43	[BUG]  [BUGGY]  n  =  left.getDouble()  +  1;  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.getDouble()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.getDouble()  +  1;	  n    =    left.getDouble();    	non-compiled	[CE]  	31	None	replace
44	[BUG]  [BUGGY]  n  =  left.getInt();  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.getInt();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.getInt();	  n    =    left.getDouble();    	non-compiled	[CE]  	31	None	replace
45	[BUG]  [BUGGY]  n  =  left.getNode();  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.getNode();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.getNode();	  n    =    left.getDouble();    	non-compiled	[CE]  	31	None	replace
46	[BUG]  [BUGGY]  return  left.replaceChild(n,  left);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(n,  left);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(n,  left);	  return    left.replaceChild(left,    n);    	non-compiled	[CE]  	50	None	replace
47	[BUG]  [BUGGY]  return  left.replaceChild(n,  leftVal);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(n,  leftVal);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(n,  leftVal);	  return    left.replaceChild(left,    n);    	non-compiled	[CE]  	50	None	replace
48	[BUG]  [BUGGY]  return  n.replaceChild(left,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.replaceChild(left,  n);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.replaceChild(left,  n);	  return    left.replaceChild(left,    n);    	non-compiled	[CE]  	50	None	replace
49	[BUG]  [BUGGY]  return  left.replaceChild(parent,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(parent,  n);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(parent,  n);	  return    left.replaceChild(left,    n);    	non-compiled	[CE]  	50	None	replace
50	[BUG]  [BUGGY]  return  leftVal.replaceChild(n,  left);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.replaceChild(n,  left);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.replaceChild(n,  left);	  return    left.replaceChild(left,    n);    	non-compiled	[CE]  	50	None	replace
51	[BUG]  [BUGGY]  return  left.getLastChild()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getLastChild()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getLastChild()  +  1;	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  	34	None	replace
52	[BUG]  [BUGGY]  return  n.getFirstChild()  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getFirstChild()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getFirstChild()  +  1;	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  	34	None	replace
53	[BUG]  [BUGGY]  return  left.getFirstChild()  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getFirstChild()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getFirstChild()  +  1;	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  	34	None	replace
54	[BUG]  [BUGGY]  return  left.getLastChild()  /  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getLastChild()  /  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getLastChild()  /  1;	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  	34	None	replace
55	[BUG]  [BUGGY]  return  parent.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  parent.getFirstChild();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  parent.getFirstChild();	  return    parent.getLastChild();    	non-compiled	[CE]  	33	None	replace
56	[BUG]  [BUGGY]  return  leftVal.getLastChild()  -  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.getLastChild()  -  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.getLastChild()  -  1;	  return    leftVal.getLastChild();    	non-compiled	[CE]  	35	None	replace
57	[BUG]  [BUGGY]  return  n.toBoolean(true)?  Token.FALSE  :  Token.FUNCTION;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(true)?  Token.FALSE  :  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(true)?  Token.FALSE  :  Token.FUNCTION;	  return    leftVal.toBoolean(true)?    Token.FALSE    :    Token.FUNCTION;    	non-compiled	[CE]  	46	None	replace
58	[BUG]  [BUGGY]  n.removeChild(left);  return  this;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.removeChild(left);  return  this;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.removeChild(left);  return  this;	  n.removeChild(left);    return    null;    	non-compiled	[CE]  	55	None	replace
59	[BUG]  [BUGGY]  n.removeChild(left);  return  result;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.removeChild(left);  return  result;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.removeChild(left);  return  result;	  n.removeChild(left);    return    null;    	non-compiled	[CE]  	55	None	replace
60	[BUG]  [BUGGY]  n.removeChild(left);  return;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.removeChild(left);  return;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.removeChild(left);  return;	  n.removeChild(left);    return    null;    	non-compiled	[CE]  	55	None	replace
61	[BUG]  [BUGGY]  n.removeChild(left);  return  parent;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.removeChild(left);  return  parent;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.removeChild(left);  return  parent;	  n.removeChild(left);    return    null;    	non-compiled	[CE]  	55	None	replace
62	[BUG]  [BUGGY]  n.removeChild(left);  return  new  Node(Token.NUMBER,  numValue);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.removeChild(left);  return  new  Node(Token.NUMBER,  numValue);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.removeChild(left);  return  new  Node(Token.NUMBER,  numValue);	  n.removeChild(left);    return    null;    	non-compiled	[CE]  	55	None	replace
63	[BUG]  [BUGGY]  return  left.replaceChild(n,  parent);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(n,  parent);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(n,  parent);	  return    left.replaceChild(n,    n);    	non-compiled	[CE]  	51	None	replace
64	[BUG]  [BUGGY]  return  left.replaceChild(n,  Node.newString(Token.NAME,  numValue));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(n,  Node.newString(Token.NAME,  numValue));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(n,  Node.newString(Token.NAME,  numValue));	  return    left.replaceChild(n,    n);    	non-compiled	[CE]  	51	None	replace
65	[BUG]  [BUGGY]  return  left.replaceChild(n,  Node.newNumber(numValue));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(n,  Node.newNumber(numValue));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(n,  Node.newNumber(numValue));	  return    left.replaceChild(n,    n);    	non-compiled	[CE]  	51	None	replace
66	[BUG]  [BUGGY]  return  left.getNodeType();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getNodeType();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getNodeType();	  return    n.getNodeType();    	non-compiled	[CE]  	44	None	replace
67	[BUG]  [BUGGY]  return  n.getNodeType()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getNodeType()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getNodeType()  +  1;	  return    n.getNodeType();    	non-compiled	[CE]  	44	None	replace
68	[BUG]  [BUGGY]  return  n.getNodeType()  -  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getNodeType()  -  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getNodeType()  -  1;	  return    n.getNodeType();    	non-compiled	[CE]  	44	None	replace
69	[BUG]  [BUGGY]  return  right.getNodeType();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  right.getNodeType();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  right.getNodeType();	  return    n.getNodeType();    	non-compiled	[CE]  	44	None	replace
70	[BUG]  [BUGGY]  return  left.getLastChild()  -  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getLastChild()  -  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getLastChild()  -  1;	  return    left.getLastChild();    	non-compiled	[CE]  	8	None	replace
71	[BUG]  [BUGGY]  return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.FALSE;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.FALSE;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.FALSE;    	non-compiled	[CE]  	39	None	replace
72	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.FALSE;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.FALSE;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.FALSE;    	non-compiled	[CE]  	39	None	replace
73	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.TRUE;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.TRUE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.TRUE;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.FALSE;    	non-compiled	[CE]  	39	None	replace
74	[BUG]  [BUGGY]  return  left.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.FALSE;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.FALSE;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.FALSE;    	non-compiled	[CE]  	39	None	replace
75	[BUG]  [BUGGY]  return  n.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.FALSE;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.FALSE;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.FALSE;    	non-compiled	[CE]  	39	None	replace
76	[BUG]  [BUGGY]  n.removeChild(left);  return  numValue;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.removeChild(left);  return  numValue;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.removeChild(left);  return  numValue;	  n.removeChild(left);    return    n;    	non-compiled	[CE]  	26	None	replace
77	[BUG]  [BUGGY]  n.removeChild(left);  return  n.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.removeChild(left);  return  n.getNext();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.removeChild(left);  return  n.getNext();	  n.removeChild(left);    return    n;    	non-compiled	[CE]  	26	None	replace
78	[BUG]  [BUGGY]  n.removeChild(left);  return  n.intVal;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.removeChild(left);  return  n.intVal;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.removeChild(left);  return  n.intVal;	  n.removeChild(left);    return    n;    	non-compiled	[CE]  	26	None	replace
79	[BUG]  [BUGGY]  n.removeChild(left);  return  n  +  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.removeChild(left);  return  n  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.removeChild(left);  return  n  +  1;	  n.removeChild(left);    return    n;    	non-compiled	[CE]  	26	None	replace
80	[BUG]  [BUGGY]  n.removeChild(left);  return  n.clone();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.removeChild(left);  return  n.clone();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.removeChild(left);  return  n.clone();	  n.removeChild(left);    return    n;    	non-compiled	[CE]  	26	None	replace
81	[BUG]  [BUGGY]  return  right.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  right.getFirstChild();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  right.getFirstChild();	  return    right.getLastChild();    	non-compiled	[CE]  	32	None	replace
82	[BUG]  [BUGGY]  return  left.getNode()  +  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getNode()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getNode()  +  1;	  return    n.getNode()    +    1;    	non-compiled	[CE]  	36	None	replace
83	[BUG]  [BUGGY]  return  left.getNode()  /  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getNode()  /  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getNode()  /  1;	  return    n.getNode()    +    1;    	non-compiled	[CE]  	36	None	replace
84	[BUG]  [BUGGY]  return  n.getDouble()  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getDouble()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getDouble()  +  1;	  return    n.getNode()    +    1;    	non-compiled	[CE]  	36	None	replace
85	[BUG]  [BUGGY]  return  parent.getNode()  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  parent.getNode()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  parent.getNode()  +  1;	  return    n.getNode()    +    1;    	non-compiled	[CE]  	36	None	replace
86	[BUG]  [BUGGY]  return  left.getOperator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getOperator();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getOperator();	  return    n.getOperator();    	non-compiled	[CE]  	37	None	replace
87	[BUG]  [BUGGY]  return  n.getConstantValue();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getConstantValue();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getConstantValue();	  return    n.getOperator();    	non-compiled	[CE]  	37	None	replace
88	[BUG]  [BUGGY]  return  n.getIntValue();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getIntValue();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getIntValue();	  return    n.getOperator();    	non-compiled	[CE]  	37	None	replace
89	[BUG]  [BUGGY]  return  n.getUnaryOperator();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getUnaryOperator();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getUnaryOperator();	  return    n.getOperator();    	non-compiled	[CE]  	37	None	replace
90	[BUG]  [BUGGY]  return  right.getOperator();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  right.getOperator();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  right.getOperator();	  return    n.getOperator();    	non-compiled	[CE]  	37	None	replace
91	[BUG]  [BUGGY]  return  parent.getOperator();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  parent.getOperator();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  parent.getOperator();	  return    n.getOperator();    	non-compiled	[CE]  	37	None	replace
92	[BUG]  [BUGGY]  return  left.getIntValue();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getIntValue();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getIntValue();	  return    left.getDouble();    	non-compiled	[CE]  	4	None	replace
93	[BUG]  [BUGGY]  return  left.getDouble()  -  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getDouble()  -  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getDouble()  -  1;	  return    left.getDouble();    	non-compiled	[CE]  	4	None	replace
94	[BUG]  [BUGGY]  return  left.getDouble()  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getDouble()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getDouble()  +  1;	  return    left.getDouble();    	non-compiled	[CE]  	4	None	replace
95	[BUG]  [BUGGY]  return  left.getNumber();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getNumber();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getNumber();	  return    left.getDouble();    	non-compiled	[CE]  	4	None	replace
96	[BUG]  [BUGGY]  double  val  =  left.getDouble()  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  double  val  =  left.getDouble()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	double  val  =  left.getDouble()  +  1;	  double    val    =    left.getDouble();    	non-compiled	[CE]  	54	None	replace
97	[BUG]  [BUGGY]  double  val  =  left.getDouble()  -  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  double  val  =  left.getDouble()  -  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	double  val  =  left.getDouble()  -  1;	  double    val    =    left.getDouble();    	non-compiled	[CE]  	54	None	replace
98	[BUG]  [BUGGY]  double  val  =  left.getIntValue();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  double  val  =  left.getIntValue();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	double  val  =  left.getIntValue();	  double    val    =    left.getDouble();    	non-compiled	[CE]  	54	None	replace
99	[BUG]  [BUGGY]  double  val  =  left.getNumber();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  double  val  =  left.getNumber();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	double  val  =  left.getNumber();	  double    val    =    left.getDouble();    	non-compiled	[CE]  	54	None	replace
100	[BUG]  [BUGGY]  double  val  =  left.getDouble()  /  2;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  double  val  =  left.getDouble()  /  2;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	double  val  =  left.getDouble()  /  2;	  double    val    =    left.getDouble();    	non-compiled	[CE]  	54	None	replace
101	[BUG]  [BUGGY]  double  val  =  left.getDouble()  /  1;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  double  val  =  left.getDouble()  /  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	double  val  =  left.getDouble()  /  1;	  double    val    =    left.getDouble();    	non-compiled	[CE]  	54	None	replace
102	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.FALSE  :  Token.TRUE;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.FALSE  :  Token.TRUE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  TernaryValue.FALSE  :  Token.TRUE;	  return    leftVal.toBoolean(true)?    TernaryValue.FALSE    :    Token.TRUE;    	non-compiled	[CE]  	42	None	replace
103	[BUG]  [BUGGY]  return  n.toBoolean(true)?  TernaryValue.FALSE  :  Token.TRUE;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(true)?  TernaryValue.FALSE  :  Token.TRUE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(true)?  TernaryValue.FALSE  :  Token.TRUE;	  return    leftVal.toBoolean(true)?    TernaryValue.FALSE    :    Token.TRUE;    	non-compiled	[CE]  	42	None	replace
104	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.TRUE  :  Token.FALSE;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.TRUE  :  Token.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  TernaryValue.TRUE  :  Token.FALSE;	  return    leftVal.toBoolean(true)?    TernaryValue.FALSE    :    Token.TRUE;    	non-compiled	[CE]  	42	None	replace
105	[BUG]  [BUGGY]  return  n.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN;	  return    leftVal.toBoolean(false)?    TernaryValue.UNKNOWN    :    TernaryValue.UNKNOWN;    	non-compiled	[CE]  	12	None	replace
106	[BUG]  [BUGGY]  return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN;	  return    leftVal.toBoolean(false)?    TernaryValue.UNKNOWN    :    TernaryValue.UNKNOWN;    	non-compiled	[CE]  	12	None	replace
107	[BUG]  [BUGGY]  return  left.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN;	  return    leftVal.toBoolean(false)?    TernaryValue.UNKNOWN    :    TernaryValue.UNKNOWN;    	non-compiled	[CE]  	12	None	replace
108	[BUG]  [BUGGY]  return  left.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN;	  return    leftVal.toBoolean(false)?    TernaryValue.UNKNOWN    :    TernaryValue.UNKNOWN;    	non-compiled	[CE]  	12	None	replace
109	[BUG]  [BUGGY]  return  n.toBoolean()?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean()?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean()?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN;	  return    leftVal.toBoolean(false)?    TernaryValue.UNKNOWN    :    TernaryValue.UNKNOWN;    	non-compiled	[CE]  	12	None	replace
110	[BUG]  [BUGGY]  return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.NULL;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.NULL;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.NULL;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.NULL;    	non-compiled	[CE]  	56	None	replace
111	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.NULL;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.NULL;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.NULL;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.NULL;    	non-compiled	[CE]  	56	None	replace
112	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.FUNCTION;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.NULL;    	non-compiled	[CE]  	56	None	replace
113	[BUG]  [BUGGY]  return  n.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.NULL;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.NULL;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.NULL;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.NULL;    	non-compiled	[CE]  	56	None	replace
114	[BUG]  [BUGGY]  return  left.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.NULL;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.NULL;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.NULL;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.NULL;    	non-compiled	[CE]  	56	None	replace
115	[BUG]  [BUGGY]  return  n.getfirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getfirstChild();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getfirstChild();	  return    left.getfirstChild();    	non-compiled	[CE]  	59	None	replace
116	[BUG]  [BUGGY]  return  leftVal.getNext()  -  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.getNext()  -  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.getNext()  -  1;	  return    leftVal.getNext();    	non-compiled	[CE]  	53	None	replace
117	[BUG]  [BUGGY]  return  leftVal.getNext()  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.getNext()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.getNext()  +  1;	  return    leftVal.getNext();    	non-compiled	[CE]  	53	None	replace
118	[BUG]  [BUGGY]  return  left.replaceChild(n,  new  Node(Token.EMPTY,  numValue));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(n,  new  Node(Token.EMPTY,  numValue));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(n,  new  Node(Token.EMPTY,  numValue));	  return    left.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	60	None	replace
119	[BUG]  [BUGGY]  return  n.replaceChild(left,  new  Node(Token.EMPTY));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.replaceChild(left,  new  Node(Token.EMPTY));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.replaceChild(left,  new  Node(Token.EMPTY));	  return    left.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	60	None	replace
120	[BUG]  [BUGGY]  return  left.replaceChild(n,  new  Node(Token.EMPTY)+  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(n,  new  Node(Token.EMPTY)+  1);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(n,  new  Node(Token.EMPTY)+  1);	  return    left.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	60	None	replace
121	[BUG]  [BUGGY]  return  left.replaceChild(n,  new  Node(Token.EMPTY,  0));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(n,  new  Node(Token.EMPTY,  0));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(n,  new  Node(Token.EMPTY,  0));	  return    left.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	60	None	replace
122	[BUG]  [BUGGY]  return  left.replaceChild(n,  new  Node(Token.EMPTY),  numValue);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(n,  new  Node(Token.EMPTY),  numValue);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(n,  new  Node(Token.EMPTY),  numValue);	  return    left.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	60	None	replace
123	[BUG]  [BUGGY]  return  left.replaceChild(left,  new  Node(Token.EMPTY));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(left,  new  Node(Token.EMPTY));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(left,  new  Node(Token.EMPTY));	  return    left.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	60	None	replace
124	[BUG]  [BUGGY]  return  left.removeLastChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.removeLastChild();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.removeLastChild();	  return    left.removeFirstChild();    	non-compiled	[CE]  	7	None	replace
125	[BUG]  [BUGGY]  return  left.removeFirstChild()  -  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.removeFirstChild()  -  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.removeFirstChild()  -  1;	  return    left.removeFirstChild();    	non-compiled	[CE]  	7	None	replace
126	[BUG]  [BUGGY]  return  left.getType()  -  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getType()  -  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getType()  -  1;	  return    left.getType();    	non-compiled	[CE]  	23	None	replace
127	[BUG]  [BUGGY]  return  left.getValue();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getValue();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getValue();	  return    left.getType();    	non-compiled	[CE]  	23	None	replace
128	[BUG]  [BUGGY]  return  left.getNode()  -  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getNode()  -  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getNode()  -  1;	  return    left.getNode();    	non-compiled	[CE]  	19	None	replace
129	[BUG]  [BUGGY]  return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.NOT;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.NOT;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.NOT;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.NOT;    	non-compiled	[CE]  	57	None	replace
130	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.NOT;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.NOT;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.NOT;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.NOT;    	non-compiled	[CE]  	57	None	replace
131	[BUG]  [BUGGY]  return  left.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.NOT;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.NOT;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.NOT;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.NOT;    	non-compiled	[CE]  	57	None	replace
132	[BUG]  [BUGGY]  return  n.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.NOT;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.NOT;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.NOT;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.NOT;    	non-compiled	[CE]  	57	None	replace
133	[BUG]  [BUGGY]  return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  false;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  false;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  false;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    false;    	non-compiled	[CE]  	13	None	replace
134	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  true;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  true;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  true;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    false;    	non-compiled	[CE]  	13	None	replace
135	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  false;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  false;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  false;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    false;    	non-compiled	[CE]  	13	None	replace
136	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  true;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  true;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  true;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    false;    	non-compiled	[CE]  	13	None	replace
137	[BUG]  [BUGGY]  return  left.replaceChild(n,  new  Node(Token.FUNCTION,  numValue));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(n,  new  Node(Token.FUNCTION,  numValue));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(n,  new  Node(Token.FUNCTION,  numValue));	  return    left.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	9	None	replace
138	[BUG]  [BUGGY]  return  n.replaceChild(left,  new  Node(Token.FUNCTION));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.replaceChild(left,  new  Node(Token.FUNCTION));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.replaceChild(left,  new  Node(Token.FUNCTION));	  return    left.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	9	None	replace
139	[BUG]  [BUGGY]  return  left.replaceChild(n,  new  Node(Token.FUNCTION),  numValue);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(n,  new  Node(Token.FUNCTION),  numValue);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(n,  new  Node(Token.FUNCTION),  numValue);	  return    left.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	9	None	replace
140	[BUG]  [BUGGY]  return  left.replaceChild(n,  new  Node(Token.FUNCTION,  0));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(n,  new  Node(Token.FUNCTION,  0));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(n,  new  Node(Token.FUNCTION,  0));	  return    left.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	9	None	replace
141	[BUG]  [BUGGY]  return  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  parent.replaceChild(n,  new  Node(Token.FUNCTION));	  return    left.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	9	None	replace
142	[BUG]  [BUGGY]  return  left.replaceChild(left,  new  Node(Token.FUNCTION));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(left,  new  Node(Token.FUNCTION));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(left,  new  Node(Token.FUNCTION));	  return    left.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	9	None	replace
143	[BUG]  [BUGGY]  n  =  left.getNext()  +  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.getNext()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.getNext()  +  1;	  n    =    left.getNext();    	non-compiled	[CE]  	27	None	replace
144	[BUG]  [BUGGY]  return  n.getString();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getString();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getString();	  return    left.getString();    	non-compiled	[CE]  	6	None	replace
145	[BUG]  [BUGGY]  return  left.getString()  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getString()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getString()  +  1;	  return    left.getString();    	non-compiled	[CE]  	6	None	replace
146	[BUG]  [BUGGY]  return  left.getString()  -  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getString()  -  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getString()  -  1;	  return    left.getString();    	non-compiled	[CE]  	6	None	replace
147	[BUG]  [BUGGY]  return  left.getType()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getType()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getType()  +  1;	  return    n.getType()    +    1;    	non-compiled	[CE]  	24	None	replace
148	[BUG]  [BUGGY]  return  left.getType()  /  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getType()  /  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getType()  /  1;	  return    n.getType()    +    1;    	non-compiled	[CE]  	24	None	replace
149	[BUG]  [BUGGY]  return  n.getValue();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getValue();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getValue();	  return    n.getType()    +    1;    	non-compiled	[CE]  	24	None	replace
150	[BUG]  [BUGGY]  return  leftVal.getDouble();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.getDouble();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.getDouble();	  return    leftVal.getType();    	non-compiled	[CE]  	43	None	replace
151	[BUG]  [BUGGY]  return  leftVal.getIntValue();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.getIntValue();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.getIntValue();	  return    leftVal.getType();    	non-compiled	[CE]  	43	None	replace
152	[BUG]  [BUGGY]  return  leftVal.getType()  -  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.getType()  -  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.getType()  -  1;	  return    leftVal.getType();    	non-compiled	[CE]  	43	None	replace
153	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  Boolean.TRUE  :  Boolean.FALSE;	  return    leftVal.toBoolean(true)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  	11	None	replace
154	[BUG]  [BUGGY]  return  n.toBoolean(true)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(true)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(true)?  Boolean.TRUE  :  Boolean.FALSE;	  return    leftVal.toBoolean(true)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  	11	None	replace
155	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  Token.TRUE  :  Boolean.FALSE;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  Token.TRUE  :  Boolean.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  Token.TRUE  :  Boolean.FALSE;	  return    leftVal.toBoolean(true)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  	11	None	replace
156	[BUG]  [BUGGY]  return  left.toBoolean(true)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.toBoolean(true)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.toBoolean(true)?  Boolean.TRUE  :  Boolean.FALSE;	  return    leftVal.toBoolean(true)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  	11	None	replace
157	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  Token.FALSE;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  Token.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  Token.FALSE;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    Token.FALSE;    	non-compiled	[CE]  	41	None	replace
158	[BUG]  [BUGGY]  return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  Token.FALSE;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  Token.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  Token.FALSE;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    Token.FALSE;    	non-compiled	[CE]  	41	None	replace
159	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  Token.UNKNOWN  :  Token.TRUE;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  Token.UNKNOWN  :  Token.TRUE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  Token.UNKNOWN  :  Token.TRUE;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    Token.FALSE;    	non-compiled	[CE]  	41	None	replace
160	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  Token.UNKNOWN  :  Token.FALSE;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  Token.UNKNOWN  :  Token.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  Token.UNKNOWN  :  Token.FALSE;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    Token.FALSE;    	non-compiled	[CE]  	41	None	replace
161	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Token.TRUE;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Token.TRUE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Token.TRUE;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    Token.FALSE;    	non-compiled	[CE]  	41	None	replace
162	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  Token.TRUE;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  Token.TRUE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  Token.TRUE;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    Token.FALSE;    	non-compiled	[CE]  	41	None	replace
163	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  Token.NUMBER  :  Token.TRUE;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  Token.NUMBER  :  Token.TRUE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  Token.NUMBER  :  Token.TRUE;	  return    leftVal.toBoolean(true)?    Token.NUMBER    :    Token.FALSE;    	non-compiled	[CE]  	49	None	replace
164	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  Token.NUMBER  :  Token.TRUE;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  Token.NUMBER  :  Token.TRUE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  Token.NUMBER  :  Token.TRUE;	  return    leftVal.toBoolean(true)?    Token.NUMBER    :    Token.FALSE;    	non-compiled	[CE]  	49	None	replace
165	[BUG]  [BUGGY]  return  n.toBoolean(true)?  Token.NUMBER  :  Token.FALSE;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(true)?  Token.NUMBER  :  Token.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(true)?  Token.NUMBER  :  Token.FALSE;	  return    leftVal.toBoolean(true)?    Token.NUMBER    :    Token.FALSE;    	non-compiled	[CE]  	49	None	replace
166	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  Token.NUMBER  :  Token.FALSE;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  Token.NUMBER  :  Token.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  Token.NUMBER  :  Token.FALSE;	  return    leftVal.toBoolean(true)?    Token.NUMBER    :    Token.FALSE;    	non-compiled	[CE]  	49	None	replace
167	[BUG]  [BUGGY]  return  left.toBoolean(true)?  Token.NUMBER  :  Token.TRUE;  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.toBoolean(true)?  Token.NUMBER  :  Token.TRUE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.toBoolean(true)?  Token.NUMBER  :  Token.TRUE;	  return    leftVal.toBoolean(true)?    Token.NUMBER    :    Token.FALSE;    	non-compiled	[CE]  	49	None	replace
168	[BUG]  [BUGGY]  return  n.toBoolean(true)?  Token.FALSE  :  Token.TRUE;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(true)?  Token.FALSE  :  Token.TRUE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(true)?  Token.FALSE  :  Token.TRUE;	  return    leftVal.toBoolean(true)?    Token.FALSE    :    Token.TRUE;    	non-compiled	[CE]  	45	None	replace
169	[BUG]  [BUGGY]  return  left.toBoolean(true)?  Token.FALSE  :  Token.TRUE;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.toBoolean(true)?  Token.FALSE  :  Token.TRUE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.toBoolean(true)?  Token.FALSE  :  Token.TRUE;	  return    leftVal.toBoolean(true)?    Token.FALSE    :    Token.TRUE;    	non-compiled	[CE]  	45	None	replace
170	[BUG]  [BUGGY]  return  left.toBoolean(false)?  Token.FALSE  :  Token.TRUE;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.toBoolean(false)?  Token.FALSE  :  Token.TRUE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.toBoolean(false)?  Token.FALSE  :  Token.TRUE;	  return    leftVal.toBoolean(true)?    Token.FALSE    :    Token.TRUE;    	non-compiled	[CE]  	45	None	replace
171	[BUG]  [BUGGY]  return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(numValue);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(numValue);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(numValue);	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    Byte.valueOf(numValue);    	non-compiled	[CE]  	15	None	replace
172	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  Byte.valueOf(numValue);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  Byte.valueOf(numValue);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  Byte.valueOf(numValue);	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    Byte.valueOf(numValue);    	non-compiled	[CE]  	15	None	replace
173	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(numValue  +  1);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(numValue  +  1);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(numValue  +  1);	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    Byte.valueOf(numValue);    	non-compiled	[CE]  	15	None	replace
174	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(n,  numValue);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(n,  numValue);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(n,  numValue);	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    Byte.valueOf(numValue);    	non-compiled	[CE]  	15	None	replace
175	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(n);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(n);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(n);	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    Byte.valueOf(numValue);    	non-compiled	[CE]  	15	None	replace
176	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  Token.UNKNOWN  :  Byte.valueOf(numValue);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  Token.UNKNOWN  :  Byte.valueOf(numValue);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  Token.UNKNOWN  :  Byte.valueOf(numValue);	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    Byte.valueOf(numValue);    	non-compiled	[CE]  	15	None	replace
177	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  Token.UNKNOWN  :  Token.TRUE;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  Token.UNKNOWN  :  Token.TRUE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  Token.UNKNOWN  :  Token.TRUE;	  return    leftVal.toBoolean(true)?    Token.UNKNOWN    :    Token.FALSE;    	non-compiled	[CE]  	47	None	replace
178	[BUG]  [BUGGY]  return  n.toBoolean(true)?  Token.UNKNOWN  :  Token.FALSE;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(true)?  Token.UNKNOWN  :  Token.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(true)?  Token.UNKNOWN  :  Token.FALSE;	  return    leftVal.toBoolean(true)?    Token.UNKNOWN    :    Token.FALSE;    	non-compiled	[CE]  	47	None	replace
179	[BUG]  [BUGGY]  n  =  left.getLeadingChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.getLeadingChild();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.getLeadingChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	30	None	replace
180	[BUG]  [BUGGY]  n  =  left.getOwnerChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.getOwnerChild();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.getOwnerChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	30	None	replace
181	[BUG]  [BUGGY]  n  =  left.getPreviousChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.getPreviousChild();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.getPreviousChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	30	None	replace
182	[BUG]  [BUGGY]  return  n.getNext()  &&  left.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getNext()  &&  left.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getNext()  &&  left.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getNext()    ||    left.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	17	None	replace
183	[BUG]  [BUGGY]  return  left.getNext()  &&  left.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getNext()  &&  left.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getNext()  &&  left.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getNext()    ||    left.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	17	None	replace
184	[BUG]  [BUGGY]  return  left.getNext()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getNext()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getNext()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getNext()    ||    left.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	17	None	replace
185	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()  ||  left.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getFirstChild().getNext()  ||  left.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getFirstChild().getNext()  ||  left.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getNext()    ||    left.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	17	None	replace
186	[BUG]  [BUGGY]  return  n.getFirstChild().getNext()  ||  left.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getFirstChild().getNext()  ||  left.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getFirstChild().getNext()  ||  left.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getNext()    ||    left.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	17	None	replace
187	[BUG]  [BUGGY]  return  left.getLocalMutator();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getLocalMutator();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getLocalMutator();	  return    left.getFirstChild();    	non-compiled	[CE]  	3	None	replace
188	[BUG]  [BUGGY]  return  left.getNext()  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getNext()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getNext()  +  1;	  return    n.getNext()    +    1;    	non-compiled	[CE]  	16	None	replace
189	[BUG]  [BUGGY]  return  n.getFirstChild().getNext()  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getFirstChild().getNext()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getFirstChild().getNext()  +  1;	  return    n.getNext()    +    1;    	non-compiled	[CE]  	16	None	replace
190	[BUG]  [BUGGY]  return  n.getFirstChild().getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getFirstChild().getNext();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getFirstChild().getNext();	  return    n.getNext()    +    1;    	non-compiled	[CE]  	16	None	replace
191	[BUG]  [BUGGY]  return  n.getParent()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getParent()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getParent()  +  1;	  return    n.getNext()    +    1;    	non-compiled	[CE]  	16	None	replace
192	[BUG]  [BUGGY]  return  right.getNext()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  right.getNext()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  right.getNext()  +  1;	  return    n.getNext()    +    1;    	non-compiled	[CE]  	16	None	replace
193	[BUG]  [BUGGY]  n.removeChild(left,  numValue);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.removeChild(left,  numValue);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.removeChild(left,  numValue);	  n.removeChild(left);    	non-compiled	[CE]  	25	None	replace
194	[BUG]  [BUGGY]  n.replaceChild(left,  left);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.replaceChild(left,  left);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.replaceChild(left,  left);	  n.removeChild(left);    	non-compiled	[CE]  	25	None	replace
195	[BUG]  [BUGGY]  n.replaceChild(left,  numValue);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.replaceChild(left,  numValue);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.replaceChild(left,  numValue);	  n.removeChild(left);    	non-compiled	[CE]  	25	None	replace
196	[BUG]  [BUGGY]  n.replaceChild(left,  new  Node(Token.FUNCTION));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.replaceChild(left,  new  Node(Token.FUNCTION));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.replaceChild(left,  new  Node(Token.FUNCTION));	  n.removeChild(left);    	non-compiled	[CE]  	25	None	replace
197	[BUG]  [BUGGY]  n.replaceChild(left,  new  Node(Token.EMPTY));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.replaceChild(left,  new  Node(Token.EMPTY));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.replaceChild(left,  new  Node(Token.EMPTY));	  n.removeChild(left);    	non-compiled	[CE]  	25	None	replace
198	[BUG]  [BUGGY]  n.replaceChild(left,  new  Node(Token.FALSE));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.replaceChild(left,  new  Node(Token.FALSE));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.replaceChild(left,  new  Node(Token.FALSE));	  n.removeChild(left);    	non-compiled	[CE]  	25	None	replace
199	[BUG]  [BUGGY]  n  =  left.getNumberOfChildren();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.getNumberOfChildren();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.getNumberOfChildren();	  n    =    left.getLastChild();    	non-compiled	[CE]  	29	None	replace
200	[BUG]  [BUGGY]  n  =  left.getLastChild()  +  1;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.getLastChild()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.getLastChild()  +  1;	  n    =    left.getLastChild();    	non-compiled	[CE]  	29	None	replace
201	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  right.getFirstChild();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  right.getFirstChild();	  n    =    left.getLastChild();    	non-compiled	[CE]  	29	None	replace
202	[BUG]  [BUGGY]  return  n.getNumber();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getNumber();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getNumber();	  return    n.getDouble();    	non-compiled	[CE]  	20	None	replace
203	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Token.UNKNOWN;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Token.UNKNOWN;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Token.UNKNOWN;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.UNKNOWN;    	non-compiled	[CE]  	10	None	replace
204	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  n;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  n;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  n;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.UNKNOWN;    	non-compiled	[CE]  	10	None	replace
205	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Token.FUNCTION;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.UNKNOWN;    	non-compiled	[CE]  	10	None	replace
206	[BUG]  [BUGGY]  return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.EMPTY;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.EMPTY;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.EMPTY;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.EMPTY;    	non-compiled	[CE]  	40	None	replace
207	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.EMPTY;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.EMPTY;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.EMPTY;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.EMPTY;    	non-compiled	[CE]  	40	None	replace
208	[BUG]  [BUGGY]  return  left.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.EMPTY;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.EMPTY;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.EMPTY;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.EMPTY;    	non-compiled	[CE]  	40	None	replace
209	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Token.EMPTY;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Token.EMPTY;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Token.EMPTY;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.EMPTY;    	non-compiled	[CE]  	40	None	replace
210	[BUG]  [BUGGY]  return  right.getNode()  -  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  right.getNode()  -  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  right.getNode()  -  1;	  return    right.getNode();    	non-compiled	[CE]  	21	None	replace
211	[BUG]  [BUGGY]  return  right.getDouble();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  right.getDouble();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  right.getDouble();	  return    right.getNode();    	non-compiled	[CE]  	21	None	replace
212	[BUG]  [BUGGY]  return  node.getNode();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  node.getNode();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  node.getNode();	  return    right.getNode();    	non-compiled	[CE]  	21	None	replace
213	[BUG]  [BUGGY]  return  left.getNext()  -  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getNext()  -  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getNext()  -  1;	  return    left.getNext();    	non-compiled	[CE]  	1	None	replace
214	[BUG]  [BUGGY]  return  left.getNext()  +  numValue;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getNext()  +  numValue;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getNext()  +  numValue;	  return    left.getNext();    	non-compiled	[CE]  	1	None	replace
215	[BUG]  [BUGGY]  return  left.toBoolean(true)?  Token.UNKNOWN  :  Token.FALSE;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.toBoolean(true)?  Token.UNKNOWN  :  Token.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.toBoolean(true)?  Token.UNKNOWN  :  Token.FALSE;	  return    leftVal.toBoolean(true)?    Token.UNKNOWN    :    Token.FALSE;    	non-compiled	[CE]  	47	None	replace
216	[BUG]  [BUGGY]  return  n.getNumber()  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getNumber()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getNumber()  +  1;	  return    n.getNext()    +    1;    	non-compiled	[CE]  	16	None	replace
217	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  Token.FALSE  :  Boolean.TRUE;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  Token.FALSE  :  Boolean.TRUE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  Token.FALSE  :  Boolean.TRUE;	  return    leftVal.toBoolean(true)?    Token.FALSE    :    false;    	non-compiled	[CE]  	14	None	replace
218	[BUG]  [BUGGY]  return  n.getNextNode();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getNextNode();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getNextNode();	  return    n.getParentNode();    	non-compiled	[CE]  	61	None	replace
219	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.NULL  :  TernaryValue.UNKNOWN;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.NULL  :  TernaryValue.UNKNOWN;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.NULL  :  TernaryValue.UNKNOWN;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.NULL;    	non-compiled	[CE]  	56	None	replace
220	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.NULL  :  TernaryValue.UNKNOWN;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.NULL  :  TernaryValue.UNKNOWN;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  TernaryValue.NULL  :  TernaryValue.UNKNOWN;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.NULL;    	non-compiled	[CE]  	56	None	replace
221	[BUG]  [BUGGY]  return  n.toBoolean(true)?  TernaryValue.NULL  :  TernaryValue.UNKNOWN;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(true)?  TernaryValue.NULL  :  TernaryValue.UNKNOWN;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(true)?  TernaryValue.NULL  :  TernaryValue.UNKNOWN;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.NULL;    	non-compiled	[CE]  	56	None	replace
222	[BUG]  [BUGGY]  return  leftVal.removeFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.removeFirstChild();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.removeFirstChild();	  return    leftVal.getLastChild();    	non-compiled	[CE]  	35	None	replace
223	[BUG]  [BUGGY]  return  left.replaceChild(parent,  new  Node(Token.EMPTY));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(parent,  new  Node(Token.EMPTY));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(parent,  new  Node(Token.EMPTY));	  return    left.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	60	None	replace
224	[BUG]  [BUGGY]  Node  leftVal  =  left.getfirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  Node  leftVal  =  left.getfirstChild();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	Node  leftVal  =  left.getfirstChild();	  Node    leftVal    =    left.getLastChild();    	non-compiled	[CE]  	28	None	replace
225	[BUG]  [BUGGY]  return  right.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  right.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  right.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.UNKNOWN;    	non-compiled	[CE]  	10	None	replace
226	[BUG]  [BUGGY]  return  left.getIntValNode();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getIntValNode();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getIntValNode();	  return    left.getDouble();    	non-compiled	[CE]  	4	None	replace
227	[BUG]  [BUGGY]  return  n.getOperatorNode();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getOperatorNode();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getOperatorNode();	  return    n.getNode()    +    1;    	non-compiled	[CE]  	36	None	replace
228	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.UNKNOWN  +  1;	  return    leftVal.toBoolean(false)?    TernaryValue.UNKNOWN    :    TernaryValue.UNKNOWN;    	non-compiled	[CE]  	12	None	replace
229	[BUG]  [BUGGY]  return  left.toBoolean(true)?  Token.FALSE  :  Token.FUNCTION;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.toBoolean(true)?  Token.FALSE  :  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.toBoolean(true)?  Token.FALSE  :  Token.FUNCTION;	  return    leftVal.toBoolean(true)?    Token.FALSE    :    Token.FUNCTION;    	non-compiled	[CE]  	46	None	replace
230	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  Token.FUNCTION  :  Token.FALSE;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  Token.FUNCTION  :  Token.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  Token.FUNCTION  :  Token.FALSE;	  return    leftVal.toBoolean(true)?    Token.FALSE    :    Token.FUNCTION;    	non-compiled	[CE]  	46	None	replace
231	[BUG]  [BUGGY]  return  left.getNext()  -  left.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getNext()  -  left.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getNext()  -  left.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getNext()    ||    left.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	17	None	replace
232	[BUG]  [BUGGY]  n.removeChild(left);  return  name;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.removeChild(left);  return  name;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.removeChild(left);  return  name;	  n.removeChild(left);    return    null;    	non-compiled	[CE]  	55	None	replace
233	[BUG]  [BUGGY]  return  left.replaceChild(parent,  numValue);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(parent,  numValue);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(parent,  numValue);	  return    left.replaceChild(n,    numValue);    	non-compiled	[CE]  	52	None	replace
234	[BUG]  [BUGGY]  return  left.replaceChild(n,  value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(n,  value);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(n,  value);	  return    left.replaceChild(n,    numValue);    	non-compiled	[CE]  	52	None	replace
235	[BUG]  [BUGGY]  return(numValue  >=  0)?  MAX_FOLD_NUMBER  :  numValue;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return(numValue  >=  0)?  MAX_FOLD_NUMBER  :  numValue;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return(numValue  >=  0)?  MAX_FOLD_NUMBER  :  numValue;	  return    numValue;    	non-compiled	[CE]  	5	None	replace
236	[BUG]  [BUGGY]  return(numValue  ==  0)?  MAX_FOLD_NUMBER  :  numValue;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return(numValue  ==  0)?  MAX_FOLD_NUMBER  :  numValue;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return(numValue  ==  0)?  MAX_FOLD_NUMBER  :  numValue;	  return    numValue;    	non-compiled	[CE]  	5	None	replace
237	[BUG]  [BUGGY]  return(numValue  ==  0)?  n  :  numValue;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return(numValue  ==  0)?  n  :  numValue;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return(numValue  ==  0)?  n  :  numValue;	  return    numValue;    	non-compiled	[CE]  	5	None	replace
238	[BUG]  [BUGGY]  return(numValue  >=  0)?  n  :  numValue;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return(numValue  >=  0)?  n  :  numValue;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return(numValue  >=  0)?  n  :  numValue;	  return    numValue;    	non-compiled	[CE]  	5	None	replace
239	[BUG]  [BUGGY]  return(numValue  ==  0)?  MAX_FOLD_NUMBER  :  NUMBER;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return(numValue  ==  0)?  MAX_FOLD_NUMBER  :  NUMBER;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return(numValue  ==  0)?  MAX_FOLD_NUMBER  :  NUMBER;	  return    numValue;    	non-compiled	[CE]  	5	None	replace
240	[BUG]  [BUGGY]  return  n.getOperator()  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getOperator()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getOperator()  +  1;	  return    n.getOperator();    	non-compiled	[CE]  	37	None	replace
241	[BUG]  [BUGGY]  return  leftVal.getOperator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.getOperator();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.getOperator();	  return    n.getOperator();    	non-compiled	[CE]  	37	None	replace
242	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.TRUE  :  Token.FALSE;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.TRUE  :  Token.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.TRUE  :  Token.FALSE;	  return    leftVal.toBoolean(true)?    TernaryValue.FALSE    :    Token.TRUE;    	non-compiled	[CE]  	42	None	replace
243	[BUG]  [BUGGY]  n  =  left.getfirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.getfirstChild();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.getfirstChild();	  n    =    left.getLastChild();    	non-compiled	[CE]  	29	None	replace
244	[BUG]  [BUGGY]  return  n.getIntValNode();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getIntValNode();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getIntValNode();	  return    n.getDouble();    	non-compiled	[CE]  	20	None	replace
245	[BUG]  [BUGGY]  n.replaceChild(left,  n);  return  n;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.replaceChild(left,  n);  return  n;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.replaceChild(left,  n);  return  n;	  n.removeChild(left);    return    n;    	non-compiled	[CE]  	26	None	replace
246	[BUG]  [BUGGY]  n.addChildToFront(left);  return  n;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.addChildToFront(left);  return  n;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.addChildToFront(left);  return  n;	  n.removeChild(left);    return    n;    	non-compiled	[CE]  	26	None	replace
247	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  Token.TRUE  :  Boolean.FALSE;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  Token.TRUE  :  Boolean.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  Token.TRUE  :  Boolean.FALSE;	  return    leftVal.toBoolean(true)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  	11	None	replace
248	[BUG]  [BUGGY]  double  val  =  left.getValue();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  double  val  =  left.getValue();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	double  val  =  left.getValue();	  double    val    =    left.getDouble();    	non-compiled	[CE]  	54	None	replace
249	[BUG]  [BUGGY]  double  val  =  left.getDouble()  +  2;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  double  val  =  left.getDouble()  +  2;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	double  val  =  left.getDouble()  +  2;	  double    val    =    left.getDouble();    	non-compiled	[CE]  	54	None	replace
250	[BUG]  [BUGGY]  Double  val  =  left.getDouble();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  Double  val  =  left.getDouble();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	Double  val  =  left.getDouble();	  double    val    =    left.getDouble();    	non-compiled	[CE]  	54	None	replace
251	[BUG]  [BUGGY]  n  =  left.removeFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.removeFirstChild();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.removeFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	30	None	replace
252	[BUG]  [BUGGY]  n  =  left.getFirstChild()  +  1;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.getFirstChild()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.getFirstChild()  +  1;	  n    =    left.getFirstChild();    	non-compiled	[CE]  	30	None	replace
253	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  Token.TRUE  :  Token.FALSE;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  Token.TRUE  :  Token.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  Token.TRUE  :  Token.FALSE;	  return    leftVal.toBoolean(true)?    Token.FALSE    :    Token.TRUE;    	non-compiled	[CE]  	45	None	replace
254	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(negNumValue);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(negNumValue);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(negNumValue);	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    Byte.valueOf(numValue);    	non-compiled	[CE]  	15	None	replace
255	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(negNum);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(negNum);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(negNum);	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    Byte.valueOf(numValue);    	non-compiled	[CE]  	15	None	replace
256	[BUG]  [BUGGY]  return  n.toBoolean(false)?  TernaryValue.UNKNOWN  :  Byte.valueOf(numValue);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(false)?  TernaryValue.UNKNOWN  :  Byte.valueOf(numValue);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(false)?  TernaryValue.UNKNOWN  :  Byte.valueOf(numValue);	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    Byte.valueOf(numValue);    	non-compiled	[CE]  	15	None	replace
257	[BUG]  [BUGGY]  return  n.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.EMPTY;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.EMPTY;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.EMPTY;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.EMPTY;    	non-compiled	[CE]  	40	None	replace
258	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.EMPTY  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.EMPTY  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  TernaryValue.EMPTY  +  1;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.EMPTY;    	non-compiled	[CE]  	40	None	replace
259	[BUG]  [BUGGY]  return  left.getGrandparent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getGrandparent();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getGrandparent();	  return    left.getParent();    	non-compiled	[CE]  	2	None	replace
260	[BUG]  [BUGGY]  return  right.getNode()  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  right.getNode()  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  right.getNode()  +  1;	  return    right.getNode();    	non-compiled	[CE]  	21	None	replace
261	[BUG]  [BUGGY]  return  leftVal.getNext()  +  numValue;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.getNext()  +  numValue;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.getNext()  +  numValue;	  return    leftVal.getNext();    	non-compiled	[CE]  	53	None	replace
262	[BUG]  [BUGGY]  n  =  left.getParent();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.getParent();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.getParent();	  n    =    left.getNext();    	non-compiled	[CE]  	27	None	replace
263	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.NUMBER  :  TernaryValue.UNKNOWN  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.NUMBER  :  TernaryValue.UNKNOWN  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.NUMBER  :  TernaryValue.UNKNOWN  +  1;	  return    leftVal.toBoolean(true)?    TernaryValue.NUMBER    :    TernaryValue.UNKNOWN;    	non-compiled	[CE]  	38	None	replace
264	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.NUMBER  :  TernaryValue.UNKNOWN  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.NUMBER  :  TernaryValue.UNKNOWN  +  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  TernaryValue.NUMBER  :  TernaryValue.UNKNOWN  +  1;	  return    leftVal.toBoolean(true)?    TernaryValue.NUMBER    :    TernaryValue.UNKNOWN;    	non-compiled	[CE]  	38	None	replace
265	[BUG]  [BUGGY]  return  n.getNodeValue();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getNodeValue();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getNodeValue();	  return    n.getNodeType();    	non-compiled	[CE]  	44	None	replace
266	[BUG]  [BUGGY]  return  leftVal.getNodeType();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.getNodeType();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.getNodeType();	  return    n.getNodeType();    	non-compiled	[CE]  	44	None	replace
267	[BUG]  [BUGGY]  n  =  left.getIntValNode();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.getIntValNode();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.getIntValNode();	  n    =    left.getDouble();    	non-compiled	[CE]  	31	None	replace
268	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  Token.FALSE  :  Token.NUMBER;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  Token.FALSE  :  Token.NUMBER;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  Token.FALSE  :  Token.NUMBER;	  return    leftVal.toBoolean(true)?    Token.NUMBER    :    Token.FALSE;    	non-compiled	[CE]  	49	None	replace
269	[BUG]  [BUGGY]  return  left.toBoolean(true)?  Token.NUMBER  :  Token.FALSE;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.toBoolean(true)?  Token.NUMBER  :  Token.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.toBoolean(true)?  Token.NUMBER  :  Token.FALSE;	  return    leftVal.toBoolean(true)?    Token.NUMBER    :    Token.FALSE;    	non-compiled	[CE]  	49	None	replace
270	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.TRUE;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.TRUE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  TernaryValue.TRUE;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    TernaryValue.FALSE;    	non-compiled	[CE]  	39	None	replace
271	[BUG]  [BUGGY]  return  leftVal.replaceChild(left,  n);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.replaceChild(left,  n);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.replaceChild(left,  n);	  return    left.replaceChild(left,    n);    	non-compiled	[CE]  	50	None	replace
272	[BUG]  [BUGGY]  return  left.replaceChild(left,  n  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(left,  n  +  1);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(left,  n  +  1);	  return    left.replaceChild(left,    n);    	non-compiled	[CE]  	50	None	replace
273	[BUG]  [BUGGY]  return  left.replaceChild(left,  n)-  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(left,  n)-  1;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(left,  n)-  1;	  return    left.replaceChild(left,    n);    	non-compiled	[CE]  	50	None	replace
274	[BUG]  [BUGGY]  return  left.toBoolean(true)?  Token.FALSE  :  Token.EMPTY;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.toBoolean(true)?  Token.FALSE  :  Token.EMPTY;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.toBoolean(true)?  Token.FALSE  :  Token.EMPTY;	  return    leftVal.toBoolean(true)?    Token.FALSE    :    Token.EMPTY;    	non-compiled	[CE]  	48	None	replace
275	[BUG]  [BUGGY]  return  left.replaceChild(parent,  new  Node(Token.FUNCTION));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(parent,  new  Node(Token.FUNCTION));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(parent,  new  Node(Token.FUNCTION));	  return    left.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	9	None	replace
276	[BUG]  [BUGGY]  return  left.getNext()?  n.getFirstChild().getType()  :  Token.FUNCTION;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getNext()?  n.getFirstChild().getType()  :  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getNext()?  n.getFirstChild().getType()  :  Token.FUNCTION;	  return    n.getNext()    ||    left.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	17	None	replace
277	[BUG]  [BUGGY]  return  left.toBoolean(true)?  TernaryValue.FALSE  :  Token.TRUE;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.toBoolean(true)?  TernaryValue.FALSE  :  Token.TRUE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.toBoolean(true)?  TernaryValue.FALSE  :  Token.TRUE;	  return    leftVal.toBoolean(true)?    TernaryValue.FALSE    :    Token.TRUE;    	non-compiled	[CE]  	42	None	replace
278	[BUG]  [BUGGY]  n  =  left.getOperator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.getOperator();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.getOperator();	  return    n.getOperator();    	non-compiled	[CE]  	37	None	replace
279	[BUG]  [BUGGY]  n  =  left.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.replaceChild(n,  new  Node(Token.EMPTY));	  n    =    left.getLastChild();    	non-compiled	[CE]  	29	None	replace
280	[BUG]  [BUGGY]  n  =  left.replaceChild(n,  new  Node(Token.FALSE));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.replaceChild(n,  new  Node(Token.FALSE));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.replaceChild(n,  new  Node(Token.FALSE));	  n    =    left.getLastChild();    	non-compiled	[CE]  	29	None	replace
281	[BUG]  [BUGGY]  n  =  left.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.replaceChild(n,  new  Node(Token.FUNCTION));	  n    =    left.getLastChild();    	non-compiled	[CE]  	29	None	replace
282	[BUG]  [BUGGY]  n  =  left.replaceChild(n,  new  Node(Token.TRUE));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n  =  left.replaceChild(n,  new  Node(Token.TRUE));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n  =  left.replaceChild(n,  new  Node(Token.TRUE));	  n    =    left.getLastChild();    	non-compiled	[CE]  	29	None	replace
283	[BUG]  [BUGGY]  return  left.toBoolean(true)?  Token.TRUE  :  Boolean.FALSE;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.toBoolean(true)?  Token.TRUE  :  Boolean.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.toBoolean(true)?  Token.TRUE  :  Boolean.FALSE;	  return    leftVal.toBoolean(true)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  	11	None	replace
284	[BUG]  [BUGGY]  return(numValue  ==  left.getLastChild())?  TernaryValue.UNKNOWN  :  n;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return(numValue  ==  left.getLastChild())?  TernaryValue.UNKNOWN  :  n;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return(numValue  ==  left.getLastChild())?  TernaryValue.UNKNOWN  :  n;	  return    numValue;    	non-compiled	[CE]  	5	None	replace
285	[BUG]  [BUGGY]  return(numValue  ==  n)?  TernaryValue.UNKNOWN  :  n;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return(numValue  ==  n)?  TernaryValue.UNKNOWN  :  n;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return(numValue  ==  n)?  TernaryValue.UNKNOWN  :  n;	  return    numValue;    	non-compiled	[CE]  	5	None	replace
286	[BUG]  [BUGGY]  return(numValue  ==  left.getLastChild())?  0  :  numValue;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return(numValue  ==  left.getLastChild())?  0  :  numValue;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return(numValue  ==  left.getLastChild())?  0  :  numValue;	  return    numValue;    	non-compiled	[CE]  	5	None	replace
287	[BUG]  [BUGGY]  return(numValue  ==  left.getDouble())?  0  :  numValue;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return(numValue  ==  left.getDouble())?  0  :  numValue;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return(numValue  ==  left.getDouble())?  0  :  numValue;	  return    numValue;    	non-compiled	[CE]  	5	None	replace
288	[BUG]  [BUGGY]  return  left.getChildCount();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getChildCount();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getChildCount();	  return    right.getNode();    	non-compiled	[CE]  	21	None	replace
289	[BUG]  [BUGGY]  return  left.replaceChild(n,  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.replaceChild(n,  null);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.replaceChild(n,  null);	  return    left.replaceChild(n,    n);    	non-compiled	[CE]  	51	None	replace
290	[BUG]  [BUGGY]  double  val  =  left.getDouble()  ||  numValue  >  TernaryValue.UNKNOWN;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  double  val  =  left.getDouble()  ||  numValue  >  TernaryValue.UNKNOWN;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	double  val  =  left.getDouble()  ||  numValue  >  TernaryValue.UNKNOWN;	  double    val    =    left.getDouble();    	non-compiled	[CE]  	54	None	replace
291	[BUG]  [BUGGY]  double  val  =  left.getDouble()  ||  numValue  >  TernaryValue.NUMBER;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  double  val  =  left.getDouble()  ||  numValue  >  TernaryValue.NUMBER;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	double  val  =  left.getDouble()  ||  numValue  >  TernaryValue.NUMBER;	  double    val    =    left.getDouble();    	non-compiled	[CE]  	54	None	replace
292	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.NUMBER  :  TernaryValue.FALSE;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.NUMBER  :  TernaryValue.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.NUMBER  :  TernaryValue.FALSE;	  return    leftVal.toBoolean(true)?    TernaryValue.NUMBER    :    TernaryValue.UNKNOWN;    	non-compiled	[CE]  	38	None	replace
293	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.NUMBER  :  TernaryValue.TRUE;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.NUMBER  :  TernaryValue.TRUE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.NUMBER  :  TernaryValue.TRUE;	  return    leftVal.toBoolean(true)?    TernaryValue.NUMBER    :    TernaryValue.UNKNOWN;    	non-compiled	[CE]  	38	None	replace
294	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(negated);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(negated);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(negated);	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    Byte.valueOf(numValue);    	non-compiled	[CE]  	15	None	replace
295	[BUG]  [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  Byte.valueOf(negNumValue);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  Byte.valueOf(negNumValue);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(false)?  TernaryValue.UNKNOWN  :  Byte.valueOf(negNumValue);	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    Byte.valueOf(numValue);    	non-compiled	[CE]  	15	None	replace
296	[BUG]  [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(null);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(null);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  leftVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  Byte.valueOf(null);	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    Byte.valueOf(numValue);    	non-compiled	[CE]  	15	None	replace
297	[BUG]  [BUGGY]  return  left.toBoolean(true)?  TernaryValue.UNKNOWN  :  Token.FALSE;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.toBoolean(true)?  TernaryValue.UNKNOWN  :  Token.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.toBoolean(true)?  TernaryValue.UNKNOWN  :  Token.FALSE;	  return    leftVal.toBoolean(true)?    TernaryValue.UNKNOWN    :    Token.FALSE;    	non-compiled	[CE]  	41	None	replace
298	[BUG]  [BUGGY]  return  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  parent.replaceChild(n,  new  Node(Token.EMPTY));	  return    left.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	60	None	replace
299	[BUG]  [BUGGY]  return  left.toBoolean(false)?  Token.FALSE  :  Token.FUNCTION;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.toBoolean(false)?  Token.FALSE  :  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.toBoolean(false)?  Token.FALSE  :  Token.FUNCTION;	  return    leftVal.toBoolean(true)?    Token.FALSE    :    Token.FUNCTION;    	non-compiled	[CE]  	46	None	replace
300	[BUG]  [BUGGY]  return  parent.replaceChild(n,  numValue);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  parent.replaceChild(n,  numValue);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  parent.replaceChild(n,  numValue);	  return    left.replaceChild(n,    numValue);    	non-compiled	[CE]  	52	None	replace
301	[BUG]  [BUGGY]  Node  leftVal  =  left.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  Node  leftVal  =  left.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	Node  leftVal  =  left.replaceChild(n,  new  Node(Token.EMPTY));	  Node    leftVal    =    left.getLastChild();    	non-compiled	[CE]  	28	None	replace
302	[BUG]  [BUGGY]  Node  leftVal  =  left.cloneTree();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  Node  leftVal  =  left.cloneTree();  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	Node  leftVal  =  left.cloneTree();	  Node    leftVal    =    left.getLastChild();    	non-compiled	[CE]  	28	None	replace
303	[BUG]  [BUGGY]  return  left.toBoolean(false)?  Token.UNKNOWN  :  Token.FALSE;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.toBoolean(false)?  Token.UNKNOWN  :  Token.FALSE;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.toBoolean(false)?  Token.UNKNOWN  :  Token.FALSE;	  return    leftVal.toBoolean(true)?    Token.UNKNOWN    :    Token.FALSE;    	non-compiled	[CE]  	47	None	replace
304	[BUG]  [BUGGY]  n.addChildToFront(left);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.addChildToFront(left);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.addChildToFront(left);	  n.removeChild(left);    	non-compiled	[CE]  	25	None	replace
305	[BUG]  [BUGGY]  n.replaceChild(left,  new  Node(Token.TRUE));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  n.replaceChild(left,  new  Node(Token.TRUE));  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	n.replaceChild(left,  new  Node(Token.TRUE));	  n.removeChild(left);    	non-compiled	[CE]  	25	None	replace
306	[BUG]  [BUGGY]  return  n.replaceChild(left,  left);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.replaceChild(left,  left);  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.replaceChild(left,  left);	  return    left.replaceChild(left,    n);    	non-compiled	[CE]  	50	None	replace
307	[BUG]  [BUGGY]  return  n.getFirstChild().getNext()  ||  left.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  n.getFirstChild().getNext()  ||  left.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  n.getFirstChild().getNext()  ||  left.getLastChild().getType()  ==  Token.FUNCTION;	  return    n.getNext()    ||    left.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	18	None	replace
308	[BUG]  [BUGGY]  return  left.getNext()  -  left.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {      [BUGGY]  return  left.getNext()  -  left.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  if  (NodeUtil.isNumericResult(left))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865476	346	346	3	replace	return  left.getNext()  -  left.getLastChild().getType()  ==  Token.FUNCTION;	  return    n.getNext()    ||    left.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	18	None	replace
