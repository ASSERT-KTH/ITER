bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
2	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getFirstChild(),  false))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType.getFirstChild(),  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
3	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  true))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  true))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  true))  {	  switch(lhType    &    NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
4	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
5	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rh.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rh.getFirstChild(),  false))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rh.getFirstChild(),  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
6	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  undefinedRight))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  undefinedRight))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType,  undefinedRight))  {	  switch    (lhType    &    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	3	None	replace
7	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType),  undefinedRight)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType),  undefinedRight)  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType),  undefinedRight)  {	  switch    (lhType    &    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	3	None	replace
8	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left,  rhType))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left,  rhType))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(left,  rhType))  {	  switch    (lhType    &    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	3	None	replace
9	[BUG]  [BUGGY]  switch  (lhType  |  NodeUtil.isLiteralValue(rhType))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch  (lhType  |  NodeUtil.isLiteralValue(rhType))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch  (lhType  |  NodeUtil.isLiteralValue(rhType))  {	  switch    (lhType    &    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	3	None	replace
10	[BUG]  [BUGGY]  switch(lhType.toLowerCase())  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType.toLowerCase())  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.toLowerCase())  {	  switch(rhType)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
11	[BUG]  [BUGGY]  switch(lhType,  rhType)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType,  rhType)  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType,  rhType)  {	  switch(rhType)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
12	[BUG]  [BUGGY]  if(lhType!=  rhType)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  if(lhType!=  rhType)  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  rhType)  {	  switch(rhType)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
13	[BUG]  [BUGGY]  if(lhType  ==  rhType)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  if(lhType  ==  rhType)  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  rhType)  {	  switch(rhType)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
14	[BUG]  [BUGGY]  switch(lhType.toString())  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType.toString())  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.toString())  {	  switch(rhType)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
15	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
16	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
17	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getFirstChild(),  true))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getFirstChild(),  true))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType.getFirstChild(),  true))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
18	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rh.getFirstChild(),  true))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rh.getFirstChild(),  true))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rh.getFirstChild(),  true))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
19	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
20	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType),  true)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType),  true)  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType),  true)  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType),    false)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
21	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  true))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  true))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType,  true))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType),    false)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
22	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(right,  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType),    false)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
23	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  switch    (lhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
24	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
25	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getFirstChild()))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getFirstChild()))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType.getFirstChild()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
26	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left.getLastChild()))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left.getLastChild()))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(left.getLastChild()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
27	[BUG]  [BUGGY]  switch(right.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(right.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(right.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
28	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.TRUE  :  Boolean.FALSE;	      	non-compiled	[CE]  orphaned  case	5	None	replace
29	[BUG]  [BUGGY]  int  lhType  =  left.getType();  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  int  lhType  =  left.getType();  break;  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	int  lhType  =  left.getType();  break;	      	non-compiled	[CE]  orphaned  case	5	None	replace
30	[BUG]  [BUGGY]  n  =  left.getFirstChild();  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  n  =  left.getFirstChild();  break;  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	n  =  left.getFirstChild();  break;	      	non-compiled	[CE]  orphaned  case	5	None	replace
31	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.TRUE  :  Boolean.FALSE;  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.TRUE  :  Boolean.FALSE;  break;  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.TRUE  :  Boolean.FALSE;  break;	      	non-compiled	[CE]  orphaned  case	5	None	replace
32	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.valueOf(lhType).booleanValue();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.valueOf(lhType).booleanValue();  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.valueOf(lhType).booleanValue();	      	non-compiled	[CE]  orphaned  case	5	None	replace
33	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.TRUE;  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.TRUE;  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.TRUE;	      	non-compiled	[CE]  orphaned  case	5	None	replace
34	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  n  =  left.getFirstChild();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  case  Token.OBJECTLIT:  n  =  left.getFirstChild();  break;  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  n  =  left.getFirstChild();  break;	      	non-compiled	[CE]  orphaned  case	5	None	replace
35	[BUG]  [BUGGY]  switch  (lhType  &  NodeUtil.isLiteralValue(left,  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch  (lhType  &  NodeUtil.isLiteralValue(left,  false))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch  (lhType  &  NodeUtil.isLiteralValue(left,  false))  {	  switch    (lhType    &    NodeUtil.isLiteralValue(rhType,    false))    {    	non-compiled	[CE]  orphaned  case	4	None	replace
36	[BUG]  [BUGGY]  switch  (lhType  |  NodeUtil.isLiteralValue(rhType,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch  (lhType  |  NodeUtil.isLiteralValue(rhType,  false))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch  (lhType  |  NodeUtil.isLiteralValue(rhType,  false))  {	  switch    (lhType    &    NodeUtil.isLiteralValue(rhType,    false))    {    	non-compiled	[CE]  orphaned  case	4	None	replace
37	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left,  rhType),  false)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left,  rhType),  false)  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(left,  rhType),  false)  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType),    false)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
38	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType;  }  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType;  }	      	non-compiled	[CE]  orphaned  case	5	None	replace
39	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }	      	non-compiled	[CE]  orphaned  case	5	None	replace
40	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  rhType;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  rhType;  }  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  rhType;  }	      	non-compiled	[CE]  orphaned  case	5	None	replace
41	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;	      	non-compiled	[CE]  orphaned  case	5	None	replace
42	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  return  lhType;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  return  lhType;  }  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  return  lhType;  }	      	non-compiled	[CE]  orphaned  case	5	None	replace
43	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  return  lhType;  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  return  lhType;  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  return  lhType;	      	non-compiled	[CE]  orphaned  case	5	None	replace
44	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  =  rhType;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  =  rhType;  }  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  =  rhType;  }	      	non-compiled	[CE]  orphaned  case	5	None	replace
45	[BUG]  [BUGGY]  switch(left.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(left.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
46	[BUG]  [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
47	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
48	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(lhType,  false))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(lhType,  false))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(lhType,  false))  {	  switch(rhType)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
49	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhtype.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhtype.getFirstChild(),  false))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhtype.getFirstChild(),  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
50	[BUG]  [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
51	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(left))  {	  switch    (lhType    &    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	3	None	replace
52	[BUG]  [BUGGY]  switch(lhType  +  NodeUtil.isLiteralValue(rhType))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  +  NodeUtil.isLiteralValue(rhType))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  +  NodeUtil.isLiteralValue(rhType))  {	  switch    (lhType    &    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	3	None	replace
53	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(result  ==  null)  {  return  n;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  case  Token.EXPR_RESULT:  if(result  ==  null)  {  return  n;  }  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(result  ==  null)  {  return  n;  }	      	non-compiled	[CE]  orphaned  case	5	None	replace
54	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)  {  return  n;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)  {  return  n;  }  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)  {  return  n;  }	      	non-compiled	[CE]  orphaned  case	5	None	replace
55	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(result  ==  null)  {  return  lhType;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  case  Token.EXPR_RESULT:  if(result  ==  null)  {  return  lhType;  }  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(result  ==  null)  {  return  lhType;  }	      	non-compiled	[CE]  orphaned  case	5	None	replace
56	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.FUNCTION)  {  return  n;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.FUNCTION)  {  return  n;  }	      	non-compiled	[CE]  orphaned  case	5	None	replace
57	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM)  {  return  n;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM)  {  return  n;  }	      	non-compiled	[CE]  orphaned  case	5	None	replace
58	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID)  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID)  {  return  n;  }  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID)  {  return  n;  }	      	non-compiled	[CE]  orphaned  case	5	None	replace
59	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  return  n;  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  case  Token.EXPR_RESULT:  return  n;  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  return  n;	      	non-compiled	[CE]  orphaned  case	5	None	replace
60	[BUG]  [BUGGY]  switch(lhType.equals(rhType))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType.equals(rhType))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.equals(rhType))  {	  switch(rhType)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
61	[BUG]  [BUGGY]  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VOID)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VOID)  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  Token.NAME  ||  rhType  ==  Token.VOID)  {	  switch(rhType)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
62	[BUG]  [BUGGY]  if(lhType!=  Token.NAME  &&  rhType  ==  Token.VOID)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  if(lhType!=  Token.NAME  &&  rhType  ==  Token.VOID)  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  Token.NAME  &&  rhType  ==  Token.VOID)  {	  switch(rhType)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
63	[BUG]  [BUGGY]  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VAR)  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  Token.NAME  ||  rhType  ==  Token.VAR)  {	  switch(rhType)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
64	[BUG]  [BUGGY]  if(lhType!=  Token.NAME  &&  rhType  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  if(lhType!=  Token.NAME  &&  rhType  ==  Token.VAR)  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  Token.NAME  &&  rhType  ==  Token.VAR)  {	  switch(rhType)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
65	[BUG]  [BUGGY]  if(lhType!=  Token.NAME  &&  rhType!=  Token.VOID)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  if(lhType!=  Token.NAME  &&  rhType!=  Token.VOID)  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  Token.NAME  &&  rhType!=  Token.VOID)  {	  switch(rhType)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
66	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
67	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(n,  rhType),  false)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();    [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(n,  rhType),  false)  {  [BUGGY]    case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(n,  rhType),  false)  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType),    false)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
