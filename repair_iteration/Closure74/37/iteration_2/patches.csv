bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  return  lhType;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  return  lhType;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  return  lhType;	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    return    lhType;    	non-compiled	[CE]  orphaned  case	43	None	replace
2	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  return  lhType;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  return  lhType;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  return  lhType;	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    return    lhType;    	non-compiled	[CE]  orphaned  case	43	None	replace
3	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  return  n;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  return  n;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  return  n;	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    return    lhType;    	non-compiled	[CE]  orphaned  case	43	None	replace
4	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(left))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(left))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(left))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left))    {    	non-compiled	[CE]  orphaned  case	51	None	replace
5	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isAssignmentOp(rhType))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isAssignmentOp(rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isAssignmentOp(rhType))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left))    {    	non-compiled	[CE]  orphaned  case	51	None	replace
6	[BUG]  [BUGGY]  switch(left  &  NodeUtil.isLiteralValue(lhType))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left  &  NodeUtil.isLiteralValue(lhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left  &  NodeUtil.isLiteralValue(lhType))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left))    {    	non-compiled	[CE]  orphaned  case	51	None	replace
7	[BUG]  [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(left))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(left))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rightLiteral  &  NodeUtil.isLiteralValue(left))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left))    {    	non-compiled	[CE]  orphaned  case	51	None	replace
8	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLocalValue(rhType))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLocalValue(rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLocalValue(rhType))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left))    {    	non-compiled	[CE]  orphaned  case	51	None	replace
9	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhtype))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhtype))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhtype))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left))    {    	non-compiled	[CE]  orphaned  case	51	None	replace
10	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left,  rhType),  true)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left,  rhType),  true)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(left,  rhType),  true)  {	  switch(lhType    &    NodeUtil.isLiteralValue(left,    rhType),    false)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
11	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  left),  false)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  left),  false)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType,  left),  false)  {	  switch(lhType    &    NodeUtil.isLiteralValue(left,    rhType),    false)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
12	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right,  rhType),  true)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right,  rhType),  true)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(right,  rhType),  true)  {	  switch(lhType    &    NodeUtil.isLiteralValue(left,    rhType),    false)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
13	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left,  undefinedRight),  false)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left,  undefinedRight),  false)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(left,  undefinedRight),  false)  {	  switch(lhType    &    NodeUtil.isLiteralValue(left,    rhType),    false)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
14	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right,  rhType),  false)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right,  rhType),  false)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(right,  rhType),  false)  {	  switch(lhType    &    NodeUtil.isLiteralValue(left,    rhType),    false)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
15	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left,  rhType),  undefinedRight)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left,  rhType),  undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(left,  rhType),  undefinedRight)  {	  switch(lhType    &    NodeUtil.isLiteralValue(left,    rhType),    false)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
16	[BUG]  [BUGGY]  switch(lhType.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(left.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
17	[BUG]  [BUGGY]  switch(left.getType()  &  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getType()  &  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getType()  &  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  switch(left.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
18	[BUG]  [BUGGY]  switch(left.getType()  |  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getType()  |  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getType()  |  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(left.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
19	[BUG]  [BUGGY]  switch(lhType.getType()  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.getType()  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.getType()  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {	  switch(left.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
20	[BUG]  [BUGGY]  switch(left.getType()  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getType()  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getType()  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {	  switch(left.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
21	[BUG]  [BUGGY]  switch(left.getType()  >  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getType()  >  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getType()  >  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(left.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
22	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  n;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  n;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    n;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
23	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    n;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
24	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  n;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    n;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
25	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  return  n;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  return  n;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    n;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
26	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  return  n;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  return  n;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    n;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
27	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  true))  {  return  lhType;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  true))  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  true))  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
28	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
29	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(rhType.getFirstChild(),  false))  {  return  lhType;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(rhType.getFirstChild(),  false))  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(rhType.getFirstChild(),  false))  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
30	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  return  lhType;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
31	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&  rhType!=  null)  {  return  lhType;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&  rhType!=  null)  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&  rhType!=  null)  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
32	[BUG]  [BUGGY]  if(lhType!=  rhType  ||  rhType!=  null)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType!=  rhType  ||  rhType!=  null)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  rhType  ||  rhType!=  null)  {	  if(lhType!=    rhType)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
33	[BUG]  [BUGGY]  if(lhType!=  rhType  ||  rhType!=  undefinedRight)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType!=  rhType  ||  rhType!=  undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  rhType  ||  rhType!=  undefinedRight)  {	  if(lhType!=    rhType)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
34	[BUG]  [BUGGY]  if(lhType  ==  rhType  ||  rhType!=  null)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  rhType  ||  rhType!=  null)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  rhType  ||  rhType!=  null)  {	  if(lhType!=    rhType)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
35	[BUG]  [BUGGY]  if(lhType!=  rhType  ||  rhType  ==  null)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType!=  rhType  ||  rhType  ==  null)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  rhType  ||  rhType  ==  null)  {	  if(lhType!=    rhType)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
36	[BUG]  [BUGGY]  if(lhType  ==  rhType  ||  rhType!=  undefinedRight)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  rhType  ||  rhType!=  undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  rhType  ||  rhType!=  undefinedRight)  {	  if(lhType!=    rhType)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
37	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(lhType,  true))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(lhType,  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(lhType,  true))  {	  switch(rhType    &    NodeUtil.isLiteralValue(lhType,    false))    {    	non-compiled	[CE]  orphaned  case	48	None	replace
38	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(left,  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(left,  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(left,  false))  {	  switch(rhType    &    NodeUtil.isLiteralValue(lhType,    false))    {    	non-compiled	[CE]  orphaned  case	48	None	replace
39	[BUG]  [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(lhType,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(lhType,  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rightLiteral  &  NodeUtil.isLiteralValue(lhType,  false))  {	  switch(rhType    &    NodeUtil.isLiteralValue(lhType,    false))    {    	non-compiled	[CE]  orphaned  case	48	None	replace
40	[BUG]  [BUGGY]  switch(op  &  NodeUtil.isLiteralValue(lhType,  false))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(op  &  NodeUtil.isLiteralValue(lhType,  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(op  &  NodeUtil.isLiteralValue(lhType,  false))  {	  switch(rhType    &    NodeUtil.isLiteralValue(lhType,    false))    {    	non-compiled	[CE]  orphaned  case	48	None	replace
41	[BUG]  [BUGGY]  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)  {	  if(lhType!=    Token.NAME    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
42	[BUG]  [BUGGY]  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VAR)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VAR)  {	  if(lhType!=    Token.NAME    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
43	[BUG]  [BUGGY]  if(lhType  ==  Token.NAME  ||  rhType!=  Token.VAR)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  Token.NAME  ||  rhType!=  Token.VAR)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  Token.NAME  ||  rhType!=  Token.VAR)  {	  if(lhType!=    Token.NAME    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
44	[BUG]  [BUGGY]  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.NAME)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  Token.VAR  ||  rhType  ==  Token.NAME)  {	  if(lhType!=    Token.NAME    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
45	[BUG]  [BUGGY]  if(rhType!=  Token.NAME  ||  lhType  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(rhType!=  Token.NAME  ||  lhType  ==  Token.VAR)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(rhType!=  Token.NAME  ||  lhType  ==  Token.VAR)  {	  if(lhType!=    Token.NAME    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
46	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  orphaned  case	19	None	replace
47	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getLastChild(),  false))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getLastChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType.getLastChild(),  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  orphaned  case	19	None	replace
48	[BUG]  [BUGGY]  switch(rhType.toLowerCase())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType.toLowerCase())  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType.toLowerCase())  {	  switch(lhType.toLowerCase())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
49	[BUG]  [BUGGY]  switch(lhType.toLowerCase(),  undefinedRight)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.toLowerCase(),  undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.toLowerCase(),  undefinedRight)  {	  switch(lhType.toLowerCase())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
50	[BUG]  [BUGGY]  switch(lhType.toLowerCase()  ||  rhType.toLowerCase())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.toLowerCase()  ||  rhType.toLowerCase())  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.toLowerCase()  ||  rhType.toLowerCase())  {	  switch(lhType.toLowerCase())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
51	[BUG]  [BUGGY]  switch(lhType.toUpperCase())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.toUpperCase())  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.toUpperCase())  {	  switch(lhType.toLowerCase())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
52	[BUG]  [BUGGY]  switch(right.toLowerCase())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(right.toLowerCase())  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(right.toLowerCase())  {	  switch(lhType.toLowerCase())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
53	[BUG]  [BUGGY]  switch(lhType.toLowerCase()  &&  undefinedRight)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.toLowerCase()  &&  undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.toLowerCase()  &&  undefinedRight)  {	  switch(lhType.toLowerCase())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
54	[BUG]  [BUGGY]  switch(right.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(right.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(right.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  switch(right.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	27	None	replace
55	[BUG]  [BUGGY]  switch(rhType.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(right.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	27	None	replace
56	[BUG]  [BUGGY]  switch(right.getType()  |  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(right.getType()  |  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(right.getType()  |  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(right.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	27	None	replace
57	[BUG]  [BUGGY]  switch(right.getType()  +  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(right.getType()  +  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(right.getType()  +  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(right.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	27	None	replace
58	[BUG]  [BUGGY]  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID)  {	  if(lhType!=    Token.NAME    &&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  orphaned  case	62	None	replace
59	[BUG]  [BUGGY]  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VOID)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VOID)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VOID)  {	  if(lhType!=    Token.NAME    &&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  orphaned  case	62	None	replace
60	[BUG]  [BUGGY]  if(rhType!=  Token.NAME  &&  lhType  ==  Token.VOID)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(rhType!=  Token.NAME  &&  lhType  ==  Token.VOID)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(rhType!=  Token.NAME  &&  lhType  ==  Token.VOID)  {	  if(lhType!=    Token.NAME    &&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  orphaned  case	62	None	replace
61	[BUG]  [BUGGY]  if(lhType  >=  Token.NAME  ||  rhType  ==  Token.VOID)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  >=  Token.NAME  ||  rhType  ==  Token.VOID)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  >=  Token.NAME  ||  rhType  ==  Token.VOID)  {	  if(lhType!=    Token.NAME    &&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  orphaned  case	62	None	replace
62	[BUG]  [BUGGY]  if(lhType  ==  Token.NAME  &&  rhType!=  Token.VOID)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  Token.NAME  &&  rhType!=  Token.VOID)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  Token.NAME  &&  rhType!=  Token.VOID)  {	  if(lhType!=    Token.NAME    &&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  orphaned  case	62	None	replace
63	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType!=  Token.NAME  ||  rhType  ==  Token.GETELEM)  {  return  n;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType!=  Token.NAME  ||  rhType  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType!=  Token.NAME  ||  rhType  ==  Token.GETELEM)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	57	None	replace
64	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType!=  Token.GETELEM)  {  return  n;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType!=  Token.GETELEM)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType!=  Token.GETELEM)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	57	None	replace
65	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.GETELEM  ||  rhType  ==  Token.GETELEM)  {  return  n;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.GETELEM  ||  rhType  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.GETELEM  ||  rhType  ==  Token.GETELEM)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	57	None	replace
66	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.GETELEM)  {  return  n;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.GETELEM)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	57	None	replace
67	[BUG]  [BUGGY]  Case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM)  {  return  n;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  Case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	Case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	57	None	replace
68	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.GETELEM)  {  return  n;  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.GETELEM)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	57	None	replace
69	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  lhType!=  rhType?  Boolean.FALSE  :  Boolean.TRUE;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  return  lhType!=  rhType?  Boolean.FALSE  :  Boolean.TRUE;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  lhType!=  rhType?  Boolean.FALSE  :  Boolean.TRUE;	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.FALSE    :    Boolean.TRUE;    	non-compiled	[CE]  orphaned  case	33	None	replace
70	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  null?  Boolean.FALSE  :  Boolean.TRUE;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  null?  Boolean.FALSE  :  Boolean.TRUE;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  lhType  ==  null?  Boolean.FALSE  :  Boolean.TRUE;	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.FALSE    :    Boolean.TRUE;    	non-compiled	[CE]  orphaned  case	33	None	replace
71	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  rhType  ==  lhType?  Boolean.FALSE  :  Boolean.TRUE;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  return  rhType  ==  lhType?  Boolean.FALSE  :  Boolean.TRUE;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  rhType  ==  lhType?  Boolean.FALSE  :  Boolean.TRUE;	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.FALSE    :    Boolean.TRUE;    	non-compiled	[CE]  orphaned  case	33	None	replace
72	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VAR)  {  return  n;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VAR)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VAR)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
73	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType!=  Token.VAR)  {  return  n;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType!=  Token.VAR)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType!=  Token.VAR)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
74	[BUG]  [BUGGY]  case  Token.VAR:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.VAR:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.VAR:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
75	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.NAME)  {  return  n;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.NAME)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.NAME)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
76	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)  {  return  left;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)  {  return  left;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)  {  return  left;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
77	[BUG]  [BUGGY]  Case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)  {  return  n;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  Case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	Case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
78	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(right.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	47	None	replace
79	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right.getLastChild()))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right.getLastChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(right.getLastChild()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(right.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	47	None	replace
80	[BUG]  [BUGGY]  switch(right.getType()  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(right.getType()  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(right.getType()  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(right.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	47	None	replace
81	[BUG]  [BUGGY]  if(lhType  ==  Token.NAME  ||  rhType!=  Token.VOID)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  Token.NAME  ||  rhType!=  Token.VOID)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  Token.NAME  ||  rhType!=  Token.VOID)  {	  if(lhType!=    Token.NAME    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  orphaned  case	61	None	replace
82	[BUG]  [BUGGY]  if(rhType!=  Token.NAME  ||  lhType  ==  Token.VOID)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(rhType!=  Token.NAME  ||  lhType  ==  Token.VOID)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(rhType!=  Token.NAME  ||  lhType  ==  Token.VOID)  {	  if(lhType!=    Token.NAME    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  orphaned  case	61	None	replace
83	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rh.getLastChild(),  false))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rh.getLastChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rh.getLastChild(),  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rh.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	18	None	replace
84	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rh.getLastChild(),  true))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rh.getLastChild(),  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rh.getLastChild(),  true))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rh.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	18	None	replace
85	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(n.getFirstChild(),  true))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(n.getFirstChild(),  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(n.getFirstChild(),  true))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rh.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	18	None	replace
86	[BUG]  [BUGGY]  switch(lhType.equals(rhType)||  rhType.equals(undefinedRight))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.equals(rhType)||  rhType.equals(undefinedRight))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.equals(rhType)||  rhType.equals(undefinedRight))  {	  switch(lhType.equals(rhType))    {    	non-compiled	[CE]  orphaned  case	60	None	replace
87	[BUG]  [BUGGY]  switch(lhType.equals(rhType)||  undefinedRight)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.equals(rhType)||  undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.equals(rhType)||  undefinedRight)  {	  switch(lhType.equals(rhType))    {    	non-compiled	[CE]  orphaned  case	60	None	replace
88	[BUG]  [BUGGY]  switch(lhType.equals(rhType),  undefinedRight)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.equals(rhType),  undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.equals(rhType),  undefinedRight)  {	  switch(lhType.equals(rhType))    {    	non-compiled	[CE]  orphaned  case	60	None	replace
89	[BUG]  [BUGGY]  switch(lhType.equals(rhType)&&!undefinedRight)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.equals(rhType)&&!undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.equals(rhType)&&!undefinedRight)  {	  switch(lhType.equals(rhType))    {    	non-compiled	[CE]  orphaned  case	60	None	replace
90	[BUG]  [BUGGY]  switch(lhType.equals(rhType)||  rhType.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.equals(rhType)||  rhType.equals( "undefined "))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.equals(rhType)||  rhType.equals( "undefined "))  {	  switch(lhType.equals(rhType))    {    	non-compiled	[CE]  orphaned  case	60	None	replace
91	[BUG]  [BUGGY]  switch(lhType.equals(rhType,  undefinedRight))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.equals(rhType,  undefinedRight))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.equals(rhType,  undefinedRight))  {	  switch(lhType.equals(rhType))    {    	non-compiled	[CE]  orphaned  case	60	None	replace
92	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VOID)  {  return  n;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VOID)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VOID)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
93	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType!=  Token.VOID)  {  return  n;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType!=  Token.VOID)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType!=  Token.VOID)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
94	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.EMPTY)  {  return  n;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.EMPTY)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.EMPTY)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
95	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  undefinedRight)  {  return  n;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  undefinedRight)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  undefinedRight)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
96	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VOID)  {  return  n;  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VOID)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VOID)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
97	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getString(),  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getString(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType.getString(),  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
98	[BUG]  [BUGGY]  switch(lhType  |  NodeUtil.isLiteralValue(rhType.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  |  NodeUtil.isLiteralValue(rhType.getFirstChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  |  NodeUtil.isLiteralValue(rhType.getFirstChild(),  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
99	[BUG]  [BUGGY]  int  lhType  =  right.getType();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  int  lhType  =  right.getType();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	int  lhType  =  right.getType();  break;	  int    lhType    =    left.getType();    break;    	non-compiled	[CE]  orphaned  case	29	None	replace
100	[BUG]  [BUGGY]  int  lhType  =  undefinedRight.getType();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  int  lhType  =  undefinedRight.getType();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	int  lhType  =  undefinedRight.getType();  break;	  int    lhType    =    left.getType();    break;    	non-compiled	[CE]  orphaned  case	29	None	replace
101	[BUG]  [BUGGY]  if(undefinedRight)  {  int  lhType  =  left.getType();  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(undefinedRight)  {  int  lhType  =  left.getType();  break;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(undefinedRight)  {  int  lhType  =  left.getType();  break;  }	  int    lhType    =    left.getType();    break;    	non-compiled	[CE]  orphaned  case	29	None	replace
102	[BUG]  [BUGGY]  boolean  lhType  =  left.getType();  int  rhType  =  right.getType();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  boolean  lhType  =  left.getType();  int  rhType  =  right.getType();  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	boolean  lhType  =  left.getType();  int  rhType  =  right.getType();	  int    lhType    =    left.getType();    break;    	non-compiled	[CE]  orphaned  case	29	None	replace
103	[BUG]  [BUGGY]  if(undefinedRight)  {  int  lhType  =  left.getType();  break;  }  else  {  undefinedRight  =  NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(undefinedRight)  {  int  lhType  =  left.getType();  break;  }  else  {  undefinedRight  =  NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight);  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(undefinedRight)  {  int  lhType  =  left.getType();  break;  }  else  {  undefinedRight  =  NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight);  }	  int    lhType    =    left.getType();    break;    	non-compiled	[CE]  orphaned  case	29	None	replace
104	[BUG]  [BUGGY]  if(undefinedRight)  {  int  lhType  =  left.getType();  break;  }  else  {  undefinedRight  =  NodeUtil.isLiteralValue(left.getFirstChild(),  false);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(undefinedRight)  {  int  lhType  =  left.getType();  break;  }  else  {  undefinedRight  =  NodeUtil.isLiteralValue(left.getFirstChild(),  false);  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(undefinedRight)  {  int  lhType  =  left.getType();  break;  }  else  {  undefinedRight  =  NodeUtil.isLiteralValue(left.getFirstChild(),  false);  }	  int    lhType    =    left.getType();    break;    	non-compiled	[CE]  orphaned  case	29	None	replace
105	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType)||  true)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType)||  true)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType)||  true)  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType),    true)    {    	non-compiled	[CE]  orphaned  case	20	None	replace
106	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(n,  rhType),  true)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(n,  rhType),  true)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(n,  rhType),  true)  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType),    true)    {    	non-compiled	[CE]  orphaned  case	20	None	replace
107	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(right,  true))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType),    true)    {    	non-compiled	[CE]  orphaned  case	20	None	replace
108	[BUG]  [BUGGY]  switch(lhType  +  NodeUtil.isLiteralValue(rhType,  undefinedRight))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  +  NodeUtil.isLiteralValue(rhType,  undefinedRight))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  +  NodeUtil.isLiteralValue(rhType,  undefinedRight))  {	  switch(lhType    +    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	52	None	replace
109	[BUG]  [BUGGY]  switch(lhType  +  NodeUtil.isLiteralValue(right,  rhType))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  +  NodeUtil.isLiteralValue(right,  rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  +  NodeUtil.isLiteralValue(right,  rhType))  {	  switch(lhType    +    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	52	None	replace
110	[BUG]  [BUGGY]  switch(lhType  +  NodeUtil.isLiteralValue(left,  rhType))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  +  NodeUtil.isLiteralValue(left,  rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  +  NodeUtil.isLiteralValue(left,  rhType))  {	  switch(lhType    +    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	52	None	replace
111	[BUG]  [BUGGY]  switch(lhType  +  NodeUtil.isLiteralValue(rhType),  undefinedRight)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  +  NodeUtil.isLiteralValue(rhType),  undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  +  NodeUtil.isLiteralValue(rhType),  undefinedRight)  {	  switch(lhType    +    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	52	None	replace
112	[BUG]  [BUGGY]  switch(lhType  +  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  +  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  +  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  switch(lhType    +    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	52	None	replace
113	[BUG]  [BUGGY]  switch(lhType  /  NodeUtil.isLiteralValue(rhType))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  /  NodeUtil.isLiteralValue(rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  /  NodeUtil.isLiteralValue(rhType))  {	  switch(lhType    +    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	52	None	replace
114	[BUG]  [BUGGY]  switch(lhType  +  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  +  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  +  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  switch(lhType    +    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	52	None	replace
115	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  true))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  true))  {	  switch(lhType    &    NodeUtil.isLiteralValue(right.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	3	None	replace
116	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {	  switch(lhType    &    NodeUtil.isLiteralValue(right.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	3	None	replace
117	[BUG]  [BUGGY]  switch(lhType,  rhType),  undefinedRight)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType,  rhType),  undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType,  rhType),  undefinedRight)  {	  switch(lhType,    rhType)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
118	[BUG]  [BUGGY]  switch(lhType,  rhType,  undefinedRight)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType,  rhType,  undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType,  rhType,  undefinedRight)  {	  switch(lhType,    rhType)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
119	[BUG]  [BUGGY]  switch(lhType,  rhType.restrictByNotNullOrUndefined)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType,  rhType.restrictByNotNullOrUndefined)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType,  rhType.restrictByNotNullOrUndefined)  {	  switch(lhType,    rhType)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
120	[BUG]  [BUGGY]  switch(rhType,  lhType)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType,  lhType)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType,  lhType)  {	  switch(lhType,    rhType)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
121	[BUG]  [BUGGY]  switch(lhType,  rhType.toLowerCase())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType,  rhType.toLowerCase())  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType,  rhType.toLowerCase())  {	  switch(lhType,    rhType)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
122	[BUG]  [BUGGY]  switch(lhType,  rhType.restrictByNotNullOrUndefined())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType,  rhType.restrictByNotNullOrUndefined())  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType,  rhType.restrictByNotNullOrUndefined())  {	  switch(lhType,    rhType)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
123	[BUG]  [BUGGY]  if(rhType!=  Token.NAME  &&  lhType  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(rhType!=  Token.NAME  &&  lhType  ==  Token.VAR)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(rhType!=  Token.NAME  &&  lhType  ==  Token.VAR)  {	  if(lhType!=    Token.NAME    &&    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
124	[BUG]  [BUGGY]  if(lhType!=  Token.VAR  &&  rhType  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType!=  Token.VAR  &&  rhType  ==  Token.NAME)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  Token.VAR  &&  rhType  ==  Token.NAME)  {	  if(lhType!=    Token.NAME    &&    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
125	[BUG]  [BUGGY]  if(lhType  >=  Token.NAME  ||  rhType  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  >=  Token.NAME  ||  rhType  ==  Token.VAR)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  >=  Token.NAME  ||  rhType  ==  Token.VAR)  {	  if(lhType!=    Token.NAME    &&    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
126	[BUG]  [BUGGY]  switch  (lhType  |  NodeUtil.isLiteralValue(rhType,  true))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch  (lhType  |  NodeUtil.isLiteralValue(rhType,  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch  (lhType  |  NodeUtil.isLiteralValue(rhType,  true))  {	  switch    (lhType    |    NodeUtil.isLiteralValue(rhType,    false))    {    	non-compiled	[CE]  orphaned  case	36	None	replace
127	[BUG]  [BUGGY]  switch  (lhType  |  NodeUtil.isLiteralValue(left,  false))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch  (lhType  |  NodeUtil.isLiteralValue(left,  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch  (lhType  |  NodeUtil.isLiteralValue(left,  false))  {	  switch    (lhType    |    NodeUtil.isLiteralValue(rhType,    false))    {    	non-compiled	[CE]  orphaned  case	36	None	replace
128	[BUG]  [BUGGY]  switch  (lhType  |  NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch  (lhType  |  NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch  (lhType  |  NodeUtil.isLiteralValue(right,  false))  {	  switch    (lhType    |    NodeUtil.isLiteralValue(rhType,    false))    {    	non-compiled	[CE]  orphaned  case	36	None	replace
129	[BUG]  [BUGGY]  switch  (lhType  <=  NodeUtil.isLiteralValue(rhType,  false))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch  (lhType  <=  NodeUtil.isLiteralValue(rhType,  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch  (lhType  <=  NodeUtil.isLiteralValue(rhType,  false))  {	  switch    (lhType    |    NodeUtil.isLiteralValue(rhType,    false))    {    	non-compiled	[CE]  orphaned  case	36	None	replace
130	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    undefinedRight))    {    	non-compiled	[CE]  orphaned  case	66	None	replace
131	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rh.getFirstChild(),  undefinedRight))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rh.getFirstChild(),  undefinedRight))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rh.getFirstChild(),  undefinedRight))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    undefinedRight))    {    	non-compiled	[CE]  orphaned  case	66	None	replace
132	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  rhType))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  rhType))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    undefinedRight))    {    	non-compiled	[CE]  orphaned  case	66	None	replace
133	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left.getLastChild(),  rhType))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left.getLastChild(),  rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(left.getLastChild(),  rhType))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    undefinedRight))    {    	non-compiled	[CE]  orphaned  case	66	None	replace
134	[BUG]  [BUGGY]  switch(right.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(right.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(right.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {	  switch(rhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	15	None	replace
135	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  null)  {  return  result;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  null)  {  return  result;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  null)  {  return  result;  }	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
136	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(rhType  ==  null)  {  return  lhType;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(rhType  ==  null)  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(rhType  ==  null)  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
137	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType!=  null)  {  return  result;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType!=  null)  {  return  result;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType!=  null)  {  return  result;  }	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
138	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(rhType!=  null)  {  return  lhType;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(rhType!=  null)  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(rhType!=  null)  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
139	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(rhType  ==  null)  {  return  result;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(rhType  ==  null)  {  return  result;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(rhType  ==  null)  {  return  result;  }	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
140	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  return  lhType;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  return  lhType;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  return  lhType;	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
141	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(undefinedRight)  {  return  lhType;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(undefinedRight)  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(undefinedRight)  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
142	[BUG]  [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  switch(rightLiteral    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	46	None	replace
143	[BUG]  [BUGGY]  switch(left.getFirstChild()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getFirstChild()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getFirstChild()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(rightLiteral    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	46	None	replace
144	[BUG]  [BUGGY]  switch(left.getFirstChild()  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getFirstChild()  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getFirstChild()  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {	  switch(rightLiteral    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	46	None	replace
145	[BUG]  [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getLastChild()))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getLastChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getLastChild()))  {	  switch(rightLiteral    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	46	None	replace
146	[BUG]  [BUGGY]  switch(leftLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(leftLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(leftLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(rightLiteral    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	46	None	replace
147	[BUG]  [BUGGY]  switch(rhType.toString())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType.toString())  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType.toString())  {	  switch(lhType.toString())    {    	non-compiled	[CE]  orphaned  case	14	None	replace
148	[BUG]  [BUGGY]  switch(lhType.toString(),  undefinedRight)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.toString(),  undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.toString(),  undefinedRight)  {	  switch(lhType.toString())    {    	non-compiled	[CE]  orphaned  case	14	None	replace
149	[BUG]  [BUGGY]  switch(lhType.toString()  ||  rhType.toString().equals( "undefined "))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.toString()  ||  rhType.toString().equals( "undefined "))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.toString()  ||  rhType.toString().equals( "undefined "))  {	  switch(lhType.toString())    {    	non-compiled	[CE]  orphaned  case	14	None	replace
150	[BUG]  [BUGGY]  switch(lhType.toString()  &&  rhType.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.toString()  &&  rhType.equals( "undefined "))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.toString()  &&  rhType.equals( "undefined "))  {	  switch(lhType.toString())    {    	non-compiled	[CE]  orphaned  case	14	None	replace
151	[BUG]  [BUGGY]  switch(lhType.getQualifiedName())  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.getQualifiedName())  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.getQualifiedName())  {	  switch(lhType.toString())    {    	non-compiled	[CE]  orphaned  case	14	None	replace
152	[BUG]  [BUGGY]  switch(right.toString())  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(right.toString())  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(right.toString())  {	  switch(lhType.toString())    {    	non-compiled	[CE]  orphaned  case	14	None	replace
153	[BUG]  [BUGGY]  switch  (lhType  &  NodeUtil.isLiteralValue(rh,  false))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch  (lhType  &  NodeUtil.isLiteralValue(rh,  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch  (lhType  &  NodeUtil.isLiteralValue(rh,  false))  {	  switch    (lhType    &    NodeUtil.isLiteralValue(left,    false))    {    	non-compiled	[CE]  orphaned  case	35	None	replace
154	[BUG]  [BUGGY]  switch  (lhType  &  NodeUtil.isLiteralValue(left,  true))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch  (lhType  &  NodeUtil.isLiteralValue(left,  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch  (lhType  &  NodeUtil.isLiteralValue(left,  true))  {	  switch    (lhType    &    NodeUtil.isLiteralValue(left,    false))    {    	non-compiled	[CE]  orphaned  case	35	None	replace
155	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  return  rhType;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  return  rhType;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  return  rhType;	  case    Token.EXPR_RESULT:    return    n;    	non-compiled	[CE]  orphaned  case	59	None	replace
156	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  return  undefinedRight;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  return  undefinedRight;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  return  undefinedRight;	  case    Token.EXPR_RESULT:    return    n;    	non-compiled	[CE]  orphaned  case	59	None	replace
157	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  return  n.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  return  n.restrictByNotNullOrUndefined();  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  return  n.restrictByNotNullOrUndefined();	  case    Token.EXPR_RESULT:    return    n;    	non-compiled	[CE]  orphaned  case	59	None	replace
158	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  return  left;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  return  left;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  return  left;	  case    Token.EXPR_RESULT:    return    n;    	non-compiled	[CE]  orphaned  case	59	None	replace
159	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  return  lhType  +  rhType;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  return  lhType  +  rhType;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  return  lhType  +  rhType;	  case    Token.EXPR_RESULT:    return    n;    	non-compiled	[CE]  orphaned  case	59	None	replace
160	[BUG]  [BUGGY]  Case  Token.EXPR_RESULT:  return  lhType;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  Case  Token.EXPR_RESULT:  return  lhType;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	Case  Token.EXPR_RESULT:  return  lhType;	  case    Token.EXPR_RESULT:    return    n;    	non-compiled	[CE]  orphaned  case	59	None	replace
161	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  lhType!=  rhType?  Boolean.TRUE  :  Boolean.FALSE;  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  return  lhType!=  rhType?  Boolean.TRUE  :  Boolean.FALSE;  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  lhType!=  rhType?  Boolean.TRUE  :  Boolean.FALSE;  break;	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.TRUE    :    Boolean.FALSE;    break;    	non-compiled	[CE]  orphaned  case	31	None	replace
162	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  null?  Boolean.TRUE  :  Boolean.FALSE;  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  null?  Boolean.TRUE  :  Boolean.FALSE;  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  lhType  ==  null?  Boolean.TRUE  :  Boolean.FALSE;  break;	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.TRUE    :    Boolean.FALSE;    break;    	non-compiled	[CE]  orphaned  case	31	None	replace
163	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  rhType  ==  lhType?  Boolean.TRUE  :  Boolean.FALSE;  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  return  rhType  ==  lhType?  Boolean.TRUE  :  Boolean.FALSE;  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  rhType  ==  lhType?  Boolean.TRUE  :  Boolean.FALSE;  break;	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.TRUE    :    Boolean.FALSE;    break;    	non-compiled	[CE]  orphaned  case	31	None	replace
164	[BUG]  [BUGGY]  Case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.TRUE  :  Boolean.FALSE;  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  Case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.TRUE  :  Boolean.FALSE;  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	Case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.TRUE  :  Boolean.FALSE;  break;	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.TRUE    :    Boolean.FALSE;    break;    	non-compiled	[CE]  orphaned  case	31	None	replace
165	[BUG]  [BUGGY]  Switch(lhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  Switch(lhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	Switch(lhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  switch(rhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	23	None	replace
166	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.getLiteralValue(left.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.getLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.getLiteralValue(left.getFirstChild(),  false))  {	  switch(rhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	23	None	replace
167	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(right.getLastChild(),    false))    {    	non-compiled	[CE]  orphaned  case	4	None	replace
168	[BUG]  [BUGGY]  n  =  left.getLastChild();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  n  =  left.getLastChild();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	n  =  left.getLastChild();  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	30	None	replace
169	[BUG]  [BUGGY]  n  =  right.getFirstChild();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  n  =  right.getFirstChild();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	n  =  right.getFirstChild();  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	30	None	replace
170	[BUG]  [BUGGY]  n  =  left.getNext();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  n  =  left.getNext();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	n  =  left.getNext();  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	30	None	replace
171	[BUG]  [BUGGY]  n  =  right.getLastChild();  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  n  =  right.getLastChild();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	n  =  right.getLastChild();  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	30	None	replace
172	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getLastChild()))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getLastChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType.getLastChild()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	25	None	replace
173	[BUG]  [BUGGY]  switch(lhType  |  NodeUtil.isLiteralValue(rhType.getFirstChild()))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  |  NodeUtil.isLiteralValue(rhType.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  |  NodeUtil.isLiteralValue(rhType.getFirstChild()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	25	None	replace
174	[BUG]  [BUGGY]  switch(lhType  +  NodeUtil.isLiteralValue(rhType.getFirstChild()))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  +  NodeUtil.isLiteralValue(rhType.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  +  NodeUtil.isLiteralValue(rhType.getFirstChild()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	25	None	replace
175	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getString()))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getString()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType.getString()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	25	None	replace
176	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType!=  Token.NAME  ||  rhType  ==  Token.FUNCTION)  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType!=  Token.NAME  ||  rhType  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType!=  Token.NAME  ||  rhType  ==  Token.FUNCTION)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
177	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType!=  Token.FUNCTION)  {  return  n;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType!=  Token.FUNCTION)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType!=  Token.FUNCTION)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
178	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.FUNCTION)  {  return  n;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.FUNCTION)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
179	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.FUNCTION)  {  return  left;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.FUNCTION)  {  return  left;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.FUNCTION)  {  return  left;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
180	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  return  n;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
181	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.FUNCTION)  {  return  n;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.FUNCTION)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
182	[BUG]  [BUGGY]  if(lhType!=  Token.NAME  ||  rhType!=  Token.VOID)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType!=  Token.NAME  ||  rhType!=  Token.VOID)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  Token.NAME  ||  rhType!=  Token.VOID)  {	  if(lhType!=    Token.NAME    &&    rhType!=    Token.VOID)    {    	non-compiled	[CE]  orphaned  case	65	None	replace
183	[BUG]  [BUGGY]  if(rhType!=  Token.NAME  &&  lhType!=  Token.VOID)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(rhType!=  Token.NAME  &&  lhType!=  Token.VOID)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(rhType!=  Token.NAME  &&  lhType!=  Token.VOID)  {	  if(lhType!=    Token.NAME    &&    rhType!=    Token.VOID)    {    	non-compiled	[CE]  orphaned  case	65	None	replace
184	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(n.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(n.getFirstChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(n.getFirstChild(),  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rh.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
185	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rh.getString(),  false))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rh.getString(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rh.getString(),  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rh.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
186	[BUG]  [BUGGY]  switch(right.getType()  &  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(right.getType()  &  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(right.getType()  &  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  switch(rhType    &    NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	1	None	replace
187	[BUG]  [BUGGY]  Switch(lhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  Switch(lhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	Switch(lhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  switch(rhType    &    NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	1	None	replace
188	[BUG]  [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rightLiteral  &  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  switch(rhType    &    NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	1	None	replace
189	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  undefinedRight;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  undefinedRight;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  undefinedRight;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    +    rhType;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
190	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  +  undefinedRight;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  +  undefinedRight;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  +  undefinedRight;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    +    rhType;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
191	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRight)  {  return  lhType  +  rhType;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRight)  {  return  lhType  +  rhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRight)  {  return  lhType  +  rhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    +    rhType;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
192	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  left.getType();  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  left.getType();  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  left.getType();  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    +    rhType;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
193	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  right.getType();  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  right.getType();  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  right.getType();  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    +    rhType;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
194	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  +  rhType;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  +  rhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  +  rhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    +    rhType;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
195	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  1;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  1;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  1;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    +    rhType;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
196	[BUG]  [BUGGY]  switch  (lhType  |  NodeUtil.isLiteralValue(rhType,  undefinedRight))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch  (lhType  |  NodeUtil.isLiteralValue(rhType,  undefinedRight))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch  (lhType  |  NodeUtil.isLiteralValue(rhType,  undefinedRight))  {	  switch    (lhType    |    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
197	[BUG]  [BUGGY]  switch  (lhType  |  NodeUtil.isLiteralValue(lhType,  rhType))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch  (lhType  |  NodeUtil.isLiteralValue(lhType,  rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch  (lhType  |  NodeUtil.isLiteralValue(lhType,  rhType))  {	  switch    (lhType    |    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
198	[BUG]  [BUGGY]  switch  (lhType  |  NodeUtil.isLiteralValue(right,  rhType))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch  (lhType  |  NodeUtil.isLiteralValue(right,  rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch  (lhType  |  NodeUtil.isLiteralValue(right,  rhType))  {	  switch    (lhType    |    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
199	[BUG]  [BUGGY]  switch  (lhType  |  NodeUtil.isLiteralValue(rhType)||  undefinedRight)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch  (lhType  |  NodeUtil.isLiteralValue(rhType)||  undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch  (lhType  |  NodeUtil.isLiteralValue(rhType)||  undefinedRight)  {	  switch    (lhType    |    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
200	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  lhType  =  left.getType();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  lhType  =  left.getType();  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  lhType  =  left.getType();	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    =    rhType;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
201	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  =  left.getType();  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  =  left.getType();  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  =  left.getType();  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    =    rhType;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
202	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  lhType  =  left.getType();  break;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  lhType  =  left.getType();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  lhType  =  left.getType();  break;	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    =    rhType;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
203	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  =  undefinedRight;  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  =  undefinedRight;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  =  undefinedRight;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    =    rhType;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
204	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  =  left.getType();  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  =  left.getType();  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  =  left.getType();  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    =    rhType;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
205	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType),  undefinedLeft)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType),  undefinedLeft)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType),  undefinedLeft)  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType),    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
206	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right,  rhType),  undefinedRight)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right,  rhType),  undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(right,  rhType),  undefinedRight)  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType),    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
207	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType),  undefinedRight,  result)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType),  undefinedRight,  result)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType),  undefinedRight,  result)  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType),    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
208	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  null)  {  return  n;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  null)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  null)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
209	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  null  ||  rhType  ==  null)  {  return  n;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  null  ||  rhType  ==  null)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  null  ||  rhType  ==  null)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
210	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(rhType  ==  null)  {  return  n;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(rhType  ==  null)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(rhType  ==  null)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
211	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType!=  null)  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType!=  null)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType!=  null)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
212	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType!=  null  ||  rhType  ==  null)  {  return  n;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType!=  null  ||  rhType  ==  null)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType!=  null  ||  rhType  ==  null)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
213	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  null  ||  rhType!=  null)  {  return  n;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  null  ||  rhType!=  null)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  null  ||  rhType!=  null)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
214	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(rightLiteral  ==  null)  {  return  n;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(rightLiteral  ==  null)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(rightLiteral  ==  null)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
215	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getLastChild(),  true))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getLastChild(),  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType.getLastChild(),  true))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	17	None	replace
216	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getString(),  true))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getString(),  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType.getString(),  true))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	17	None	replace
217	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getLastChild(),    true))    {    	non-compiled	[CE]  orphaned  case	16	None	replace
218	[BUG]  [BUGGY]  switch(left.getLastChild()  &  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getLastChild()  &  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getLastChild()  &  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getLastChild(),    true))    {    	non-compiled	[CE]  orphaned  case	16	None	replace
219	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(right,  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	22	None	replace
220	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(lh,  false))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(lh,  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(lh,  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	22	None	replace
221	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhtype,  false))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhtype,  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhtype,  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	22	None	replace
222	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  undefinedLeft))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  undefinedLeft))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType,  undefinedLeft))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType,    undefinedRight))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
223	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right,  undefinedRight))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right,  undefinedRight))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(right,  undefinedRight))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType,    undefinedRight))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
224	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left,  rhType,  undefinedRight))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left,  rhType,  undefinedRight))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(left,  rhType,  undefinedRight))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType,    undefinedRight))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
225	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left,  undefinedRight))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left,  undefinedRight))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(left,  undefinedRight))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType,    undefinedRight))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
226	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(lhType,  rhType))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(lhType,  rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(lhType,  rhType))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType,    undefinedRight))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
227	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.getLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.getLiteralValue(left.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.getLiteralValue(left.getFirstChild()))  {	  switch(rhType    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
228	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  lhType!=  rhType?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  return  lhType!=  rhType?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  lhType!=  rhType?  Boolean.TRUE  :  Boolean.FALSE;	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  orphaned  case	28	None	replace
229	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  null?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  null?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  lhType  ==  null?  Boolean.TRUE  :  Boolean.FALSE;	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  orphaned  case	28	None	replace
230	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  rhType  ==  lhType?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  return  rhType  ==  lhType?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  rhType  ==  lhType?  Boolean.TRUE  :  Boolean.FALSE;	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  orphaned  case	28	None	replace
231	[BUG]  [BUGGY]  Case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  Case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	Case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.TRUE  :  Boolean.FALSE;	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  orphaned  case	28	None	replace
232	[BUG]  [BUGGY]  if(lhType  ==  rhType  ||  rhType  ==  null)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  rhType  ||  rhType  ==  null)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  rhType  ||  rhType  ==  null)  {	  if(lhType    ==    rhType)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
233	[BUG]  [BUGGY]  if(lhType  ==  rhType  ||  rhType  ==  undefinedRight)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  rhType  ||  rhType  ==  undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  rhType  ||  rhType  ==  undefinedRight)  {	  if(lhType    ==    rhType)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
234	[BUG]  [BUGGY]  if(lhType  ==  rhType  ||!undefinedRight)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  rhType  ||!undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  rhType  ||!undefinedRight)  {	  if(lhType    ==    rhType)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
235	[BUG]  [BUGGY]  if(rhType  ==  lhType)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(rhType  ==  lhType)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(rhType  ==  lhType)  {	  if(lhType    ==    rhType)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
236	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  n;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  n;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  n;	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    n;    	non-compiled	[CE]  orphaned  case	41	None	replace
237	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType;	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    n;    	non-compiled	[CE]  orphaned  case	41	None	replace
238	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType;	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    n;    	non-compiled	[CE]  orphaned  case	41	None	replace
239	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  n;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  n;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  n;	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    n;    	non-compiled	[CE]  orphaned  case	41	None	replace
240	[BUG]  [BUGGY]  switch(leftLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(leftLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(leftLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  switch(rightLiteral    &    NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
241	[BUG]  [BUGGY]  switch(left.getFirstChild()  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getFirstChild()  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getFirstChild()  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {	  switch(rightLiteral    &    NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
242	[BUG]  [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {	  switch(rightLiteral    &    NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
243	[BUG]  [BUGGY]  switch(leftLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(leftLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(leftLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {	  switch(rightLiteral    &    NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
244	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(n,  true))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(n,  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(n,  true))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType,    true))    {    	non-compiled	[CE]  orphaned  case	21	None	replace
245	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  false)||  undefinedRight)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  false)||  undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType,  false)||  undefinedRight)  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType,    true))    {    	non-compiled	[CE]  orphaned  case	21	None	replace
246	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  n))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  n))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType,  n))  {	  switch(lhType    &    NodeUtil.isLiteralValue(n,    rhType),    false)    {    	non-compiled	[CE]  orphaned  case	67	None	replace
247	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(n,  lhType),  false)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(n,  lhType),  false)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(n,  lhType),  false)  {	  switch(lhType    &    NodeUtil.isLiteralValue(n,    rhType),    false)    {    	non-compiled	[CE]  orphaned  case	67	None	replace
248	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  n),  false)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  n),  false)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType,  n),  false)  {	  switch(lhType    &    NodeUtil.isLiteralValue(n,    rhType),    false)    {    	non-compiled	[CE]  orphaned  case	67	None	replace
249	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  n  =  left.getLastChild();  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  n  =  left.getLastChild();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  n  =  left.getLastChild();  break;	  case    Token.OBJECTLIT:    n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
250	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  n  =  right.getFirstChild();  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  n  =  right.getFirstChild();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  n  =  right.getFirstChild();  break;	  case    Token.OBJECTLIT:    n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
251	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  n  =  left.getNext();  break;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  n  =  left.getNext();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  n  =  left.getNext();  break;	  case    Token.OBJECTLIT:    n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
252	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  lhType  =  left.getFirstChild();  break;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  lhType  =  left.getFirstChild();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  lhType  =  left.getFirstChild();  break;	  case    Token.OBJECTLIT:    n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
253	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  n  =  left.getString();  break;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  n  =  left.getString();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  n  =  left.getString();  break;	  case    Token.OBJECTLIT:    n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
254	[BUG]  [BUGGY]  Case  Token.OBJECTLIT:  n  =  left.getFirstChild();  break;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  Case  Token.OBJECTLIT:  n  =  left.getFirstChild();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	Case  Token.OBJECTLIT:  n  =  left.getFirstChild();  break;	  case    Token.OBJECTLIT:    n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
255	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	38	None	replace
256	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  return  lhType;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	38	None	replace
257	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  rhType!=  null)  {  return  lhType;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  rhType!=  null)  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  rhType!=  null)  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	38	None	replace
258	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhtype.getLastChild(),  false))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhtype.getLastChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhtype.getLastChild(),  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhtype.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	49	None	replace
259	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhtype.getFirstChild(),  true))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhtype.getFirstChild(),  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhtype.getFirstChild(),  true))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhtype.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	49	None	replace
260	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhtype.getString(),  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhtype.getString(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhtype.getString(),  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhtype.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	49	None	replace
261	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(left.getLastChild()))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(left.getLastChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(left.getLastChild()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getLastChild()))    {    	non-compiled	[CE]  orphaned  case	26	None	replace
262	[BUG]  [BUGGY]  switch(right.getType()  &  NodeUtil.isLiteralValue(left.getLastChild()))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(right.getType()  &  NodeUtil.isLiteralValue(left.getLastChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(right.getType()  &  NodeUtil.isLiteralValue(left.getLastChild()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getLastChild()))    {    	non-compiled	[CE]  orphaned  case	26	None	replace
263	[BUG]  [BUGGY]  switch(left.getLastChild()  &  NodeUtil.isLiteralValue(lhType))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getLastChild()  &  NodeUtil.isLiteralValue(lhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getLastChild()  &  NodeUtil.isLiteralValue(lhType))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getLastChild()))    {    	non-compiled	[CE]  orphaned  case	26	None	replace
264	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  lhType!=  rhType?  Boolean.FALSE  :  Boolean.valueOf(lhType).booleanValue();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  return  lhType!=  rhType?  Boolean.FALSE  :  Boolean.valueOf(lhType).booleanValue();  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  lhType!=  rhType?  Boolean.FALSE  :  Boolean.valueOf(lhType).booleanValue();	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.FALSE    :    Boolean.valueOf(lhType).booleanValue();    	non-compiled	[CE]  orphaned  case	32	None	replace
265	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  null?  Boolean.FALSE  :  Boolean.valueOf(lhType).booleanValue();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  null?  Boolean.FALSE  :  Boolean.valueOf(lhType).booleanValue();  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  lhType  ==  null?  Boolean.FALSE  :  Boolean.valueOf(lhType).booleanValue();	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.FALSE    :    Boolean.valueOf(lhType).booleanValue();    	non-compiled	[CE]  orphaned  case	32	None	replace
266	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  Boolean.FALSE?  Boolean.TRUE  :  Boolean.valueOf(lhType).booleanValue();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  Boolean.FALSE?  Boolean.TRUE  :  Boolean.valueOf(lhType).booleanValue();  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  lhType  ==  Boolean.FALSE?  Boolean.TRUE  :  Boolean.valueOf(lhType).booleanValue();	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.FALSE    :    Boolean.valueOf(lhType).booleanValue();    	non-compiled	[CE]  orphaned  case	32	None	replace
267	[BUG]  [BUGGY]  Case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.valueOf(lhType).booleanValue();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  Case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.valueOf(lhType).booleanValue();  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	Case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.valueOf(lhType).booleanValue();	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.FALSE    :    Boolean.valueOf(lhType).booleanValue();    	non-compiled	[CE]  orphaned  case	32	None	replace
268	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right,  rhType))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right,  rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(right,  rhType))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left,    rhType))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
269	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rh,  left))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rh,  left))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rh,  left))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left,    rhType))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
270	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  left))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  left))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType,  left))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left,    rhType))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
271	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(n,  rhType))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(n,  rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(n,  rhType))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left,    rhType))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
272	[BUG]  [BUGGY]  switch(lhType  |  NodeUtil.isLiteralValue(left,  rhType))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  |  NodeUtil.isLiteralValue(left,  rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  |  NodeUtil.isLiteralValue(left,  rhType))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left,    rhType))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
273	[BUG]  [BUGGY]  switch(lhType,  rhType  +  1)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType,  rhType  +  1)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType,  rhType  +  1)  {	  switch(lhType,    rhType)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
274	[BUG]  [BUGGY]  switch(rightLiteral,  rhType)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rightLiteral,  rhType)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rightLiteral,  rhType)  {	  switch(lhType,    rhType)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
275	[BUG]  [BUGGY]  switch(op,  rhType)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(op,  rhType)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(op,  rhType)  {	  switch(lhType,    rhType)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
276	[BUG]  [BUGGY]  if(rhType!=  lhType)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(rhType!=  lhType)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(rhType!=  lhType)  {	  if(lhType!=    rhType)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
277	[BUG]  [BUGGY]  if(lhType  >=  rhType)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  >=  rhType)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  >=  rhType)  {	  if(lhType!=    rhType)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
278	[BUG]  [BUGGY]  if(!lhType.equals(rhType))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(!lhType.equals(rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(!lhType.equals(rhType))  {	  if(lhType!=    rhType)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
279	[BUG]  [BUGGY]  if(lhType!=  rhType  ||!undefinedRight)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType!=  rhType  ||!undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  rhType  ||!undefinedRight)  {	  if(lhType!=    rhType)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
280	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(lhType,  false))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(lhType,  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(lhType,  false))  {	  switch(rhType    &    NodeUtil.isLiteralValue(lhType,    false))    {    	non-compiled	[CE]  orphaned  case	48	None	replace
281	[BUG]  [BUGGY]  if(rhType!=  Token.NAME  &&  lhType!=  Token.VAR)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(rhType!=  Token.NAME  &&  lhType!=  Token.VAR)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(rhType!=  Token.NAME  &&  lhType!=  Token.VAR)  {	  if(lhType!=    Token.NAME    &&    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
282	[BUG]  [BUGGY]  if(lhType  >=  Token.NAME  &&  rhType  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  >=  Token.NAME  &&  rhType  ==  Token.VAR)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  >=  Token.NAME  &&  rhType  ==  Token.VAR)  {	  if(lhType!=    Token.NAME    &&    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
283	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  lhType  ==  Token.NAME  ||  rhType  ==  Token.FUNCTION)  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  lhType  ==  Token.NAME  ||  rhType  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  lhType  ==  Token.NAME  ||  rhType  ==  Token.FUNCTION)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
284	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  return  lhType;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  return  lhType;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  return  lhType;	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    return    lhType;    	non-compiled	[CE]  orphaned  case	43	None	replace
285	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false))  return  lhType;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false))  return  lhType;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false))  return  lhType;	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    return    lhType;    	non-compiled	[CE]  orphaned  case	43	None	replace
286	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getNext(),  true))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getNext(),  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType.getNext(),  true))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	17	None	replace
287	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(lhType),  false)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(lhType),  false)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(lhType),  false)  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType),    true)    {    	non-compiled	[CE]  orphaned  case	20	None	replace
288	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.getLiteralValue(rhType),  false)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.getLiteralValue(rhType),  false)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.getLiteralValue(rhType),  false)  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType),    true)    {    	non-compiled	[CE]  orphaned  case	20	None	replace
289	[BUG]  [BUGGY]  switch(lhType.equals(rhType)||!undefinedRight)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.equals(rhType)||!undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.equals(rhType)||!undefinedRight)  {	  switch(lhType.equals(rhType))    {    	non-compiled	[CE]  orphaned  case	60	None	replace
290	[BUG]  [BUGGY]  switch(lhType!=  null  &&  rhType.equals( "null "))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType!=  null  &&  rhType.equals( "null "))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType!=  null  &&  rhType.equals( "null "))  {	  switch(lhType.equals(rhType))    {    	non-compiled	[CE]  orphaned  case	60	None	replace
291	[BUG]  [BUGGY]  switch(rhType.equals(lhType))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType.equals(lhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType.equals(lhType))  {	  switch(lhType.equals(rhType))    {    	non-compiled	[CE]  orphaned  case	60	None	replace
292	[BUG]  [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  switch(rightLiteral    &    NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
293	[BUG]  [BUGGY]  switch(left  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {	  switch(rightLiteral    &    NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
294	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)  {  return  n;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
295	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VAR)  {  return  n;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VAR)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VAR)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
296	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETPROP)  {  return  n;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETPROP)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETPROP)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	57	None	replace
297	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM)  {  return  n;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	57	None	replace
298	[BUG]  [BUGGY]  boolean  lhType  =  left.getType();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  boolean  lhType  =  left.getType();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	boolean  lhType  =  left.getType();  break;	  int    lhType    =    left.getType();    break;    	non-compiled	[CE]  orphaned  case	29	None	replace
299	[BUG]  [BUGGY]  Integer  lhType  =  left.getType();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  Integer  lhType  =  left.getType();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	Integer  lhType  =  left.getType();  break;	  int    lhType    =    left.getType();    break;    	non-compiled	[CE]  orphaned  case	29	None	replace
300	[BUG]  [BUGGY]  float  lhType  =  left.getType();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  float  lhType  =  left.getType();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	float  lhType  =  left.getType();  break;	  int    lhType    =    left.getType();    break;    	non-compiled	[CE]  orphaned  case	29	None	replace
301	[BUG]  [BUGGY]  switch(left  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(rightLiteral    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	46	None	replace
302	[BUG]  [BUGGY]  switch(rightType  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rightType  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rightType  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(rhType    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
303	[BUG]  [BUGGY]  switch(left.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  switch(rhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	23	None	replace
304	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  =  rhType;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  =  rhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  =  rhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    =    rhType;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
305	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  =  rhType;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  =  rhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  =  rhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    =    rhType;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
306	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  =  left.getType();  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  =  left.getType();  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  =  left.getType();  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    =    rhType;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
307	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  left  =  left.getLastChild();  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  left  =  left.getLastChild();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  left  =  left.getLastChild();  break;	  case    Token.OBJECTLIT:    n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
308	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  n  =  left.getFirstChild()  +  1;  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  n  =  left.getFirstChild()  +  1;  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  n  =  left.getFirstChild()  +  1;  break;	  case    Token.OBJECTLIT:    n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
309	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(rhType!=  null)  {  return  result;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(rhType!=  null)  {  return  result;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(rhType!=  null)  {  return  result;  }	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
310	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType;	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    n;    	non-compiled	[CE]  orphaned  case	41	None	replace
311	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType;	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    n;    	non-compiled	[CE]  orphaned  case	41	None	replace
312	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  rightLiteral)  {  return  n;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  rightLiteral)  {  return  n;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  rightLiteral)  {  return  n;	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    n;    	non-compiled	[CE]  orphaned  case	41	None	replace
313	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  return  lhType;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  return  lhType;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  return  lhType;	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    n;    	non-compiled	[CE]  orphaned  case	41	None	replace
314	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getFirstChild(),  undefinedRight))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getFirstChild(),  undefinedRight))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType.getFirstChild(),  undefinedRight))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    undefinedRight))    {    	non-compiled	[CE]  orphaned  case	66	None	replace
315	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  rhType))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  rhType))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    undefinedRight))    {    	non-compiled	[CE]  orphaned  case	66	None	replace
316	[BUG]  [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rightLiteral  &  NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    undefinedRight))    {    	non-compiled	[CE]  orphaned  case	66	None	replace
317	[BUG]  [BUGGY]  switch  (lhType  -  NodeUtil.isLiteralValue(rhType))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch  (lhType  -  NodeUtil.isLiteralValue(rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch  (lhType  -  NodeUtil.isLiteralValue(rhType))  {	  switch    (lhType    |    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
318	[BUG]  [BUGGY]  switch  (lhType  |  NodeUtil.isLiteralValue(left))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch  (lhType  |  NodeUtil.isLiteralValue(left))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch  (lhType  |  NodeUtil.isLiteralValue(left))  {	  switch    (lhType    |    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
319	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.valueOf(rhType).booleanValue();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.valueOf(rhType).booleanValue();  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.valueOf(rhType).booleanValue();	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.FALSE    :    Boolean.valueOf(lhType).booleanValue();    	non-compiled	[CE]  orphaned  case	32	None	replace
320	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left),  undefinedRight)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(left),  undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(left),  undefinedRight)  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType),    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
321	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  return  right;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  return  right;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  return  right;	  case    Token.EXPR_RESULT:    return    n;    	non-compiled	[CE]  orphaned  case	59	None	replace
322	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  return  n  +  1;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  return  n  +  1;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  return  n  +  1;	  case    Token.EXPR_RESULT:    return    n;    	non-compiled	[CE]  orphaned  case	59	None	replace
323	[BUG]  [BUGGY]  switch(left.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {	  switch(rhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	15	None	replace
324	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.getLiteralValue(left.getFirstChild(),  true))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.getLiteralValue(left.getFirstChild(),  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.getLiteralValue(left.getFirstChild(),  true))  {	  switch(rhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	15	None	replace
325	[BUG]  [BUGGY]  Switch(lhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  Switch(lhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	Switch(lhType  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {	  switch(rhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	15	None	replace
326	[BUG]  [BUGGY]  n  =  left.getFirstChild()  +  1;  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  n  =  left.getFirstChild()  +  1;  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	n  =  left.getFirstChild()  +  1;  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	30	None	replace
327	[BUG]  [BUGGY]  switch  (lhType  -  NodeUtil.isLiteralValue(rhType,  false))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch  (lhType  -  NodeUtil.isLiteralValue(rhType,  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch  (lhType  -  NodeUtil.isLiteralValue(rhType,  false))  {	  switch    (lhType    |    NodeUtil.isLiteralValue(rhType,    false))    {    	non-compiled	[CE]  orphaned  case	36	None	replace
328	[BUG]  [BUGGY]  switch(lhType!=  left.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType!=  left.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType!=  left.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(right.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	27	None	replace
329	[BUG]  [BUGGY]  switch(lhType  ==  left.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  ==  left.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  ==  left.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(right.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	27	None	replace
330	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  rightLiteral)  {  return  n;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  rightLiteral)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  rightLiteral)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    n;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
331	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(lhType.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(lhType.getFirstChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(lhType.getFirstChild(),  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
332	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.getLiteralValue(rhType,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.getLiteralValue(rhType,  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.getLiteralValue(rhType,  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType,    true))    {    	non-compiled	[CE]  orphaned  case	21	None	replace
333	[BUG]  [BUGGY]  if(lhType!=  Token.VAR  ||  rhType  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType!=  Token.VAR  ||  rhType  ==  Token.NAME)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  Token.VAR  ||  rhType  ==  Token.NAME)  {	  if(lhType!=    Token.NAME    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
334	[BUG]  [BUGGY]  if(rhType!=  Token.VAR  ||  lhType!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(rhType!=  Token.VAR  ||  lhType!=  Token.NAME)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(rhType!=  Token.VAR  ||  lhType!=  Token.NAME)  {	  if(lhType!=    Token.NAME    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
335	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  left.getType();  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  left.getType();  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  left.getType();  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    +    rhType;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
336	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  +  left.getType();  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  +  left.getType();  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  +  left.getType();  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    +    rhType;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
337	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  +  right.getType();  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  +  right.getType();  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  +  right.getType();  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    +    rhType;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
338	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  +  left.getType();  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  +  left.getType();  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  return  lhType  +  left.getType();  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    +    rhType;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
339	[BUG]  [BUGGY]  switch(left.getType()  &  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getType()  &  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getType()  &  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  orphaned  case	19	None	replace
340	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  Boolean.TRUE?  Boolean.FALSE  :  Boolean.TRUE;  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  Boolean.TRUE?  Boolean.FALSE  :  Boolean.TRUE;  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  lhType  ==  Boolean.TRUE?  Boolean.FALSE  :  Boolean.TRUE;  break;	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.TRUE    :    Boolean.FALSE;    break;    	non-compiled	[CE]  orphaned  case	31	None	replace
341	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.TRUE;  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.TRUE;  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.TRUE;  break;	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.TRUE    :    Boolean.FALSE;    break;    	non-compiled	[CE]  orphaned  case	31	None	replace
342	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  rhType  ==  null)  {  return  lhType;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  rhType  ==  null)  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  rhType  ==  null)  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	38	None	replace
343	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(lhType.getFirstChild()))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(lhType.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(lhType.getFirstChild()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	25	None	replace
344	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(right.getFirstChild(),  true))  {  return  lhType;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(right.getFirstChild(),  true))  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(right.getFirstChild(),  true))  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
345	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(rhType,  false))  {  return  lhType;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(rhType,  false))  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(rhType,  false))  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
346	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(rhType,  false))  {  return  lhType;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(rhType,  false))  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(rhType,  false))  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
347	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)||  rhType!=  null)  {  return  lhType;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)||  rhType!=  null)  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)||  rhType!=  null)  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
348	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(left,  lhType))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(left,  lhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(left,  lhType))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left,    rhType))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
349	[BUG]  [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(left,  rhType))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(left,  rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rightLiteral  &  NodeUtil.isLiteralValue(left,  rhType))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left,    rhType))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
350	[BUG]  [BUGGY]  switch(op  &  NodeUtil.isLiteralValue(left,  rhType))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(op  &  NodeUtil.isLiteralValue(left,  rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(op  &  NodeUtil.isLiteralValue(left,  rhType))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left,    rhType))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
351	[BUG]  [BUGGY]  switch(left.getType()  &  NodeUtil.isLiteralValue(rhType))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getType()  &  NodeUtil.isLiteralValue(rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getType()  &  NodeUtil.isLiteralValue(rhType))  {	  switch(left.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
352	[BUG]  [BUGGY]  switch(left.getType()  &  NodeUtil.isLiteralValue(right.getLastChild()))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getType()  &  NodeUtil.isLiteralValue(right.getLastChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getType()  &  NodeUtil.isLiteralValue(right.getLastChild()))  {	  switch(left.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
353	[BUG]  [BUGGY]  switch(left.getType()  +  NodeUtil.isLiteralValue(right.getFirstChild()))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getType()  +  NodeUtil.isLiteralValue(right.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getType()  +  NodeUtil.isLiteralValue(right.getFirstChild()))  {	  switch(left.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
354	[BUG]  [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rightLiteral  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rightLiteral  &  NodeUtil.isLiteralValue(right.getFirstChild()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(right.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	47	None	replace
355	[BUG]  [BUGGY]  switch(left.getType()  &  NodeUtil.isLiteralValue(left.getLastChild()))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getType()  &  NodeUtil.isLiteralValue(left.getLastChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getType()  &  NodeUtil.isLiteralValue(left.getLastChild()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getLastChild()))    {    	non-compiled	[CE]  orphaned  case	26	None	replace
356	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(rightLiteral)  {  return  n;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(rightLiteral)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(rightLiteral)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
357	[BUG]  [BUGGY]  Case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.TRUE;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  Case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.TRUE;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	Case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.TRUE;	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.FALSE    :    Boolean.TRUE;    	non-compiled	[CE]  orphaned  case	33	None	replace
358	[BUG]  [BUGGY]  if(lhType!=  Token.NAME  &&  rhType!=  Token.VAR)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType!=  Token.NAME  &&  rhType!=  Token.VAR)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  Token.NAME  &&  rhType!=  Token.VAR)  {	  if(lhType!=    Token.NAME    &&    rhType!=    Token.VOID)    {    	non-compiled	[CE]  orphaned  case	65	None	replace
359	[BUG]  [BUGGY]  if(lhType  ==  Token.NAME  &&  rhType!=  Token.VAR)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  Token.NAME  &&  rhType!=  Token.VAR)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  Token.NAME  &&  rhType!=  Token.VAR)  {	  if(lhType!=    Token.NAME    &&    rhType!=    Token.VOID)    {    	non-compiled	[CE]  orphaned  case	65	None	replace
360	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.getLiteralValue(right.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.getLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.getLiteralValue(right.getFirstChild(),  false))  {	  switch(rhType    &    NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	1	None	replace
361	[BUG]  [BUGGY]  switch(lhType.toLowerCase(),  rhType.toLowerCase())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.toLowerCase(),  rhType.toLowerCase())  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.toLowerCase(),  rhType.toLowerCase())  {	  switch(lhType.toLowerCase())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
362	[BUG]  [BUGGY]  switch(lhType.toLowerCase()  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.toLowerCase()  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.toLowerCase()  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  switch(lhType.toLowerCase())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
363	[BUG]  [BUGGY]  switch(lhType!=  null?  rhType.toLowerCase()  :  lhType.toLowerCase())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType!=  null?  rhType.toLowerCase()  :  lhType.toLowerCase())  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType!=  null?  rhType.toLowerCase()  :  lhType.toLowerCase())  {	  switch(lhType.toLowerCase())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
364	[BUG]  [BUGGY]  switch(lhType.toLowerCase()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.toLowerCase()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.toLowerCase()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  switch(lhType.toLowerCase())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
365	[BUG]  [BUGGY]  if(lhType  ==  rhType  &&!undefinedRight)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  rhType  &&!undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  rhType  &&!undefinedRight)  {	  if(lhType    ==    rhType)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
366	[BUG]  [BUGGY]  if(lhType!=  rhType  &&!undefinedRight)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType!=  rhType  &&!undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  rhType  &&!undefinedRight)  {	  if(lhType    ==    rhType)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
367	[BUG]  [BUGGY]  switch(lhType.restrictByNotNullOrUndefined())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.restrictByNotNullOrUndefined())  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.restrictByNotNullOrUndefined())  {	  switch(lhType.toString())    {    	non-compiled	[CE]  orphaned  case	14	None	replace
368	[BUG]  [BUGGY]  switch(lhType.toString(),  rhType.toString())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.toString(),  rhType.toString())  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.toString(),  rhType.toString())  {	  switch(lhType.toString())    {    	non-compiled	[CE]  orphaned  case	14	None	replace
369	[BUG]  [BUGGY]  switch(lhType!=  null?  rhType.toString()  :  lhType.toString())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType!=  null?  rhType.toString()  :  lhType.toString())  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType!=  null?  rhType.toString()  :  lhType.toString())  {	  switch(lhType.toString())    {    	non-compiled	[CE]  orphaned  case	14	None	replace
370	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  Boolean.TRUE?  Boolean.FALSE  :  Boolean.TRUE;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  Boolean.TRUE?  Boolean.FALSE  :  Boolean.TRUE;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  lhType  ==  Boolean.TRUE?  Boolean.FALSE  :  Boolean.TRUE;	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  orphaned  case	28	None	replace
371	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID)  {  return  n;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
372	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID)  {  return  n;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
373	[BUG]  [BUGGY]  switch(left.getType()  &  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getType()  &  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getType()  &  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getLastChild(),    true))    {    	non-compiled	[CE]  orphaned  case	16	None	replace
374	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.getLiteralValue(rhType))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.getLiteralValue(rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.getLiteralValue(rhType))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left))    {    	non-compiled	[CE]  orphaned  case	51	None	replace
375	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isAssignmentOp(left))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isAssignmentOp(left))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isAssignmentOp(left))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left))    {    	non-compiled	[CE]  orphaned  case	51	None	replace
376	[BUG]  [BUGGY]  switch(lhType  +  NodeUtil.isLiteralValue(left))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  +  NodeUtil.isLiteralValue(left))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  +  NodeUtil.isLiteralValue(left))  {	  switch(lhType    +    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	52	None	replace
377	[BUG]  [BUGGY]  switch(lhType  +  NodeUtil.isLiteralValue(right))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  +  NodeUtil.isLiteralValue(right))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  +  NodeUtil.isLiteralValue(right))  {	  switch(lhType    +    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	52	None	replace
378	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM)return  n;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM)return  n;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM)return  n;	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	57	None	replace
379	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM  ||  undefinedRight)  {  return  n;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM  ||  undefinedRight)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM  ||  undefinedRight)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	57	None	replace
380	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM,  undefinedRight)  {  return  n;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM,  undefinedRight)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM,  undefinedRight)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	57	None	replace
381	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getNext(),  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType.getNext(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType.getNext(),  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
382	[BUG]  [BUGGY]  change(lhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  change(lhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	change(lhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  switch(rhType    &    NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	1	None	replace
383	[BUG]  [BUGGY]  Switch(lhType  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  Switch(lhType  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	Switch(lhType  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(rhType    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
384	[BUG]  [BUGGY]  if(lhType!=  rhType  ||  rhType  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType!=  rhType  ||  rhType  ==  Token.VAR)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  rhType  ||  rhType  ==  Token.VAR)  {	  if(lhType!=    rhType)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
385	[BUG]  [BUGGY]  if(lhType!=  rhType  ||  rhType  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType!=  rhType  ||  rhType  ==  Token.NAME)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  rhType  ||  rhType  ==  Token.NAME)  {	  if(lhType!=    rhType)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
386	[BUG]  [BUGGY]  if(lhType!=  Token.VAR  &&  rhType!=  Token.VOID)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType!=  Token.VAR  &&  rhType!=  Token.VOID)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  Token.VAR  &&  rhType!=  Token.VOID)  {	  if(lhType!=    Token.NAME    &&    rhType!=    Token.VOID)    {    	non-compiled	[CE]  orphaned  case	65	None	replace
387	[BUG]  [BUGGY]  if(lhType!=  Token.VOID  &&  rhType!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType!=  Token.VOID  &&  rhType!=  Token.NAME)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  Token.VOID  &&  rhType!=  Token.NAME)  {	  if(lhType!=    Token.NAME    &&    rhType!=    Token.VOID)    {    	non-compiled	[CE]  orphaned  case	65	None	replace
388	[BUG]  [BUGGY]  int  lhType  =  n.getType();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  int  lhType  =  n.getType();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	int  lhType  =  n.getType();  break;	  int    lhType    =    left.getType();    break;    	non-compiled	[CE]  orphaned  case	29	None	replace
389	[BUG]  [BUGGY]  int  lhType  =  rh.getType();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  int  lhType  =  rh.getType();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	int  lhType  =  rh.getType();  break;	  int    lhType    =    left.getType();    break;    	non-compiled	[CE]  orphaned  case	29	None	replace
390	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(n,  rhType),  undefinedRight)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(n,  rhType),  undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(n,  rhType),  undefinedRight)  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType),    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
391	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  return  lhType;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	38	None	replace
392	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  rhType  ==  Token.VOID)  {  return  lhType;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  rhType  ==  Token.VOID)  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  rhType  ==  Token.VOID)  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	38	None	replace
393	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  return  lhType  +  rhType;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  return  lhType  +  rhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  return  lhType  +  rhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    +    rhType;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
394	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  return  lhType  +  rhType;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  return  lhType  +  rhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  return  lhType  +  rhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    +    rhType;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
395	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  undefinedRight;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  undefinedRight;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  +  undefinedRight;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    +    rhType;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
396	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  lhType  ==  rhType);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  lhType  ==  rhType);  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  lhType  ==  rhType);	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    +    rhType;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
397	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  lhType  ==  rhType;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  lhType  ==  rhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  lhType  ==  rhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    +    rhType;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
398	[BUG]  [BUGGY]  if(lhType  ==  rhType  ||  rhType  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  rhType  ||  rhType  ==  Token.NAME)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  rhType  ||  rhType  ==  Token.NAME)  {	  if(lhType    ==    rhType)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
399	[BUG]  [BUGGY]  if(lhType  ==  rhType  ||  rhType  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  rhType  ||  rhType  ==  Token.VAR)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  rhType  ||  rhType  ==  Token.VAR)  {	  if(lhType    ==    rhType)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
400	[BUG]  [BUGGY]  if(lhType  ==  rhType  ||  rhType  ==  Token.EMPTY)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  rhType  ||  rhType  ==  Token.EMPTY)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  rhType  ||  rhType  ==  Token.EMPTY)  {	  if(lhType    ==    rhType)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
401	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isVarDeclaration(left))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isVarDeclaration(left))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isVarDeclaration(left))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left))    {    	non-compiled	[CE]  orphaned  case	51	None	replace
402	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isVarDeclaration(rhType))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isVarDeclaration(rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isVarDeclaration(rhType))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left))    {    	non-compiled	[CE]  orphaned  case	51	None	replace
403	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(n.getFirstChild()))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(n.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(n.getFirstChild()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(right.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	47	None	replace
404	[BUG]  [BUGGY]  switch(lhType  <  Node>  &  NodeUtil.isLiteralValue(rhType.getFirstChild()))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  <  Node>  &  NodeUtil.isLiteralValue(rhType.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  <  Node>  &  NodeUtil.isLiteralValue(rhType.getFirstChild()))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	25	None	replace
405	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.FUNCTION)  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.FUNCTION)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
406	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.CALL  ||  rhType  ==  Token.FUNCTION)  {  return  n;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.CALL  ||  rhType  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.CALL  ||  rhType  ==  Token.FUNCTION)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
407	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  lhType),  false)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  lhType),  false)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType,  lhType),  false)  {	  switch(lhType    &    NodeUtil.isLiteralValue(n,    rhType),    false)    {    	non-compiled	[CE]  orphaned  case	67	None	replace
408	[BUG]  [BUGGY]  switch(lhType  |  NodeUtil.isLiteralValue(rhType),  undefinedRight)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  |  NodeUtil.isLiteralValue(rhType),  undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  |  NodeUtil.isLiteralValue(rhType),  undefinedRight)  {	  switch    (lhType    |    NodeUtil.isLiteralValue(rhType))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
409	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)return  n;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)return  n;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR)return  n;	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
410	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.CALL  ||  rhType  ==  Token.VAR)  {  return  n;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.CALL  ||  rhType  ==  Token.VAR)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.CALL  ||  rhType  ==  Token.VAR)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
411	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.VAR)  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.VAR)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.VAR)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
412	[BUG]  [BUGGY]  switch(lhType.toLowerCase()  ||  rhType.toLowerCase()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.toLowerCase()  ||  rhType.toLowerCase()  ==  Token.VAR)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.toLowerCase()  ||  rhType.toLowerCase()  ==  Token.VAR)  {	  switch(lhType.toLowerCase())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
413	[BUG]  [BUGGY]  switch(lhType.toLowerCase()  ||  rhType.toLowerCase()!=  Token.VAR)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.toLowerCase()  ||  rhType.toLowerCase()!=  Token.VAR)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.toLowerCase()  ||  rhType.toLowerCase()!=  Token.VAR)  {	  switch(lhType.toLowerCase())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
414	[BUG]  [BUGGY]  switch(lhType.toLowerCase()  &&!undefinedRight)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.toLowerCase()  &&!undefinedRight)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.toLowerCase()  &&!undefinedRight)  {	  switch(lhType.toLowerCase())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
415	[BUG]  [BUGGY]  if(lhType!=  Token.VAR  ||  rhType  ==  Token.VOID)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType!=  Token.VAR  ||  rhType  ==  Token.VOID)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  Token.VAR  ||  rhType  ==  Token.VOID)  {	  if(lhType!=    Token.NAME    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  orphaned  case	61	None	replace
416	[BUG]  [BUGGY]  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID)  {	  if(lhType!=    Token.NAME    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  orphaned  case	61	None	replace
417	[BUG]  [BUGGY]  if(lhType!=  Token.VOID  ||  rhType  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType!=  Token.VOID  ||  rhType  ==  Token.NAME)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  Token.VOID  ||  rhType  ==  Token.NAME)  {	  if(lhType!=    Token.NAME    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  orphaned  case	61	None	replace
418	[BUG]  [BUGGY]  n  =  left.removeFirstChild();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  n  =  left.removeFirstChild();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	n  =  left.removeFirstChild();  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	30	None	replace
419	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  rhType);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  n  =  left.replaceChild(left,  rhType);  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	n  =  left.replaceChild(left,  rhType);  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	30	None	replace
420	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(lhType,  false))  {  return  lhType;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(lhType,  false))  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(lhType,  false))  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
421	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    n;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
422	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  left.getType()  ==  Token.NAME)  {  return  n;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  left.getType()  ==  Token.NAME)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  left.getType()  ==  Token.NAME)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    n;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
423	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  lhType  ==  left.getString())  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  lhType  ==  left.getString())  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  lhType  ==  left.getString())  {  return  n;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    n;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
424	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(undefinedRight)  {  return  n;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(undefinedRight)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(undefinedRight)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
425	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(result  ==  null  ||  lhType  ==  rhType)  {  return  n;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(result  ==  null  ||  lhType  ==  rhType)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(result  ==  null  ||  lhType  ==  rhType)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
426	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID)  {  return  n;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
427	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {  return  n;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
428	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.EMPTY  ||  rhType  ==  Token.VOID)  {  return  n;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  Token.EMPTY  ||  rhType  ==  Token.VOID)  {  return  n;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  Token.EMPTY  ||  rhType  ==  Token.VOID)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
429	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    n;    	non-compiled	[CE]  orphaned  case	41	None	replace
430	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  undefinedRight))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  undefinedRight))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(right.getFirstChild(),  undefinedRight))  {	  switch(lhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    undefinedRight))    {    	non-compiled	[CE]  orphaned  case	66	None	replace
431	[BUG]  [BUGGY]  switch(op  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(op  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(op  &  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  switch(rhType    &    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  orphaned  case	23	None	replace
432	[BUG]  [BUGGY]  switch(left.getType()  <  NodeUtil.isLiteralValue(right.getFirstChild()))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getType()  <  NodeUtil.isLiteralValue(right.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getType()  <  NodeUtil.isLiteralValue(right.getFirstChild()))  {	  switch(left.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
433	[BUG]  [BUGGY]  switch(left.getType()  <  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getType()  <  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getType()  <  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(left.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
434	[BUG]  [BUGGY]  switch(left.getType()  ==  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getType()  ==  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getType()  ==  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(left.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
435	[BUG]  [BUGGY]  switch(left.getType()!=  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(left.getType()!=  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(left.getType()!=  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(left.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
436	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  null))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  null))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType,  null))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType,    true))    {    	non-compiled	[CE]  orphaned  case	21	None	replace
437	[BUG]  [BUGGY]  Switch(lhType  &  NodeUtil.isLiteralValue(rhType,  false))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  Switch(lhType  &  NodeUtil.isLiteralValue(rhType,  false))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	Switch(lhType  &  NodeUtil.isLiteralValue(rhType,  false))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType,    true))    {    	non-compiled	[CE]  orphaned  case	21	None	replace
438	[BUG]  [BUGGY]  switch(lhType.equals(rhType)||  lhType.equals(rhType))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.equals(rhType)||  lhType.equals(rhType))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.equals(rhType)||  lhType.equals(rhType))  {	  switch(lhType.equals(rhType))    {    	non-compiled	[CE]  orphaned  case	60	None	replace
439	[BUG]  [BUGGY]  switch(undefinedRight  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(undefinedRight  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(undefinedRight  &  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {	  switch(rightLiteral    &    NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
440	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  rhType  &  Boolean.TRUE  :  Boolean.FALSE;  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  rhType  &  Boolean.TRUE  :  Boolean.FALSE;  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  lhType  ==  rhType  &  Boolean.TRUE  :  Boolean.FALSE;  break;	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.TRUE    :    Boolean.FALSE;    break;    	non-compiled	[CE]  orphaned  case	31	None	replace
441	[BUG]  [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(lhType,  undefinedRight))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(rhType  &  NodeUtil.isLiteralValue(lhType,  undefinedRight))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(rhType  &  NodeUtil.isLiteralValue(lhType,  undefinedRight))  {	  switch(rhType    &    NodeUtil.isLiteralValue(lhType,    false))    {    	non-compiled	[CE]  orphaned  case	48	None	replace
442	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  return  lhType  <  1?  lhType  :  rhType;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  return  lhType  <  1?  lhType  :  rhType;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  return  lhType  <  1?  lhType  :  rhType;	  case    Token.EXPR_RESULT:    return    n;    	non-compiled	[CE]  orphaned  case	59	None	replace
443	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  return  lh;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  return  lh;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  return  lh;	  case    Token.EXPR_RESULT:    return    n;    	non-compiled	[CE]  orphaned  case	59	None	replace
444	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  return  lhType  <  1?  rhType  :  n;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  return  lhType  <  1?  rhType  :  n;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  return  lhType  <  1?  rhType  :  n;	  case    Token.EXPR_RESULT:    return    n;    	non-compiled	[CE]  orphaned  case	59	None	replace
445	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  return  newNode;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  return  newNode;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  return  newNode;	  case    Token.EXPR_RESULT:    return    n;    	non-compiled	[CE]  orphaned  case	59	None	replace
446	[BUG]  [BUGGY]  switch(lhType.toString()  ||  rhType.equals( "undefined "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType.toString()  ||  rhType.equals( "undefined "))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType.toString()  ||  rhType.equals( "undefined "))  {	  switch(lhType.toString())    {    	non-compiled	[CE]  orphaned  case	14	None	replace
447	[BUG]  [BUGGY]  switch(right.getType()  <  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(right.getType()  <  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(right.getType()  <  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(right.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	27	None	replace
448	[BUG]  [BUGGY]  switch(lhType!=  right.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType!=  right.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType!=  right.getType()  &  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  switch(right.getType()    &    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  orphaned  case	27	None	replace
449	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  null)  {  return  lhType;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(lhType  ==  null)  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(lhType  ==  null)  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
450	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(result  ==  null  ||  lhType!=  rhType)  {  return  lhType;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(result  ==  null  ||  lhType!=  rhType)  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(result  ==  null  ||  lhType!=  rhType)  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
451	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(result!=  null)  {  return  lhType;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(result!=  null)  {  return  lhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(result!=  null)  {  return  lhType;  }	  case    Token.EXPR_RESULT:    if(result    ==    null)    {    return    lhType;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
452	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  n  =  left.removeFirstChild();  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  n  =  left.removeFirstChild();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  n  =  left.removeFirstChild();  break;	  case    Token.OBJECTLIT:    n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
453	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  ln  =  left.getFirstChild();  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  ln  =  left.getFirstChild();  break;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  ln  =  left.getFirstChild();  break;	  case    Token.OBJECTLIT:    n    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
454	[BUG]  [BUGGY]  if(lhType!=  Token.VAR  &&  rhType  ==  Token.VOID)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType!=  Token.VAR  &&  rhType  ==  Token.VOID)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  Token.VAR  &&  rhType  ==  Token.VOID)  {	  if(lhType!=    Token.NAME    &&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  orphaned  case	62	None	replace
455	[BUG]  [BUGGY]  if(lhType!=  Token.VOID  &&  rhType  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType!=  Token.VOID  &&  rhType  ==  Token.NAME)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType!=  Token.VOID  &&  rhType  ==  Token.NAME)  {	  if(lhType!=    Token.NAME    &&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  orphaned  case	62	None	replace
456	[BUG]  [BUGGY]  if(lhType  ==  Token.VAR  &&  rhType  ==  Token.VOID)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  Token.VAR  &&  rhType  ==  Token.VOID)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  Token.VAR  &&  rhType  ==  Token.VOID)  {	  if(lhType!=    Token.NAME    &&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  orphaned  case	62	None	replace
457	[BUG]  [BUGGY]  switch(lhType,  rhType.toString())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType,  rhType.toString())  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType,  rhType.toString())  {	  switch(lhType,    rhType)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
458	[BUG]  [BUGGY]  switch(lhType),  rhType)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType),  rhType)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType),  rhType)  {	  switch(lhType,    rhType)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
459	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  undefinedRight),  false)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(rhType,  undefinedRight),  false)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(rhType,  undefinedRight),  false)  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType,    undefinedRight))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
460	[BUG]  [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(n,  rhType,  undefinedRight))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  switch(lhType  &  NodeUtil.isLiteralValue(n,  rhType,  undefinedRight))  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	switch(lhType  &  NodeUtil.isLiteralValue(n,  rhType,  undefinedRight))  {	  switch(lhType    &    NodeUtil.isLiteralValue(rhType,    undefinedRight))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
461	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.valueOf(lhType,  undefinedRight).booleanValue();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.valueOf(lhType,  undefinedRight).booleanValue();  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.FALSE  :  Boolean.valueOf(lhType,  undefinedRight).booleanValue();	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.FALSE    :    Boolean.valueOf(lhType).booleanValue();    	non-compiled	[CE]  orphaned  case	32	None	replace
462	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.TRUE  :  Boolean.valueOf(lhType).booleanValue();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.TRUE  :  Boolean.valueOf(lhType).booleanValue();  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.OBJECTLIT:  return  lhType  ==  rhType?  Boolean.TRUE  :  Boolean.valueOf(lhType).booleanValue();	  case    Token.OBJECTLIT:    return    lhType    ==    rhType?    Boolean.FALSE    :    Boolean.valueOf(lhType).booleanValue();    	non-compiled	[CE]  orphaned  case	32	None	replace
463	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  return  lhType  =  rhType;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  return  lhType  =  rhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  return  lhType  =  rhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    =    rhType;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
464	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  return  lhType  =  rhType;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  return  lhType  =  rhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  undefinedRight))  {  return  lhType  =  rhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    =    rhType;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
465	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  lhType  =  rhType;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  lhType  =  rhType;  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  lhType  =  rhType;	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    =    rhType;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
466	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  =  rhType;  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  =  rhType;  }  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	case  Token.EXPR_RESULT:  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  lhType  =  rhType;  }	  case    Token.EXPR_RESULT:    if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    return    lhType    =    rhType;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
467	[BUG]  [BUGGY]  if(lhType  ==  Token.VAR  &&  rhType!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]        boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();      [BUGGY]  if(lhType  ==  Token.VAR  &&  rhType!=  Token.NAME)  {  [BUGGY]      case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	909	909	3	replace	if(lhType  ==  Token.VAR  &&  rhType!=  Token.NAME)  {	  if(lhType!=    Token.NAME    &&    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
