bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isImmutableValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isImmutableValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isImmutableValue(left,    false)||!NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	31	None	replace
2	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isImmutableValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isImmutableValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isImmutableValue(left,    false)||!NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	31	None	replace
3	[BUG]  [BUGGY]  NodeUtil.isLiteralValue(right,  false))  {  return  n;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  NodeUtil.isLiteralValue(right,  false))  {  return  n;  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	NodeUtil.isLiteralValue(right,  false))  {  return  n;	  NodeUtil.isLiteralValue(left,    true))    {    return    n;    	non-compiled	[CE]  orphaned  case	45	None	replace
4	[BUG]  [BUGGY]  NodeUtil.isLiteralValue(right,  true))  {  return  n;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  NodeUtil.isLiteralValue(right,  true))  {  return  n;  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	NodeUtil.isLiteralValue(right,  true))  {  return  n;	  NodeUtil.isLiteralValue(left,    true))    {    return    n;    	non-compiled	[CE]  orphaned  case	45	None	replace
5	[BUG]  [BUGGY]  NodeUtil.isLiteralValue(left,  false))  {  return  left;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  NodeUtil.isLiteralValue(left,  false))  {  return  left;  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	NodeUtil.isLiteralValue(left,  false))  {  return  left;	  NodeUtil.isLiteralValue(left,    true))    {    return    n;    	non-compiled	[CE]  orphaned  case	45	None	replace
6	[BUG]  [BUGGY]  NodeUtil.isLiteralValue(left,  false))  {  return  n;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  NodeUtil.isLiteralValue(left,  false))  {  return  n;  }  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	NodeUtil.isLiteralValue(left,  false))  {  return  n;  }	  NodeUtil.isLiteralValue(left,    true))    {    return    n;    	non-compiled	[CE]  orphaned  case	45	None	replace
7	[BUG]  [BUGGY]  NodeUtil.isImmutableValue(left,  true))  {  return  n;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  NodeUtil.isImmutableValue(left,  true))  {  return  n;  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	NodeUtil.isImmutableValue(left,  true))  {  return  n;	  NodeUtil.isLiteralValue(left,    true))    {    return    n;    	non-compiled	[CE]  orphaned  case	45	None	replace
8	[BUG]  [BUGGY]  if(!NodeUtil.isImmutableValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(!NodeUtil.isImmutableValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(!NodeUtil.isImmutableValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {	  if(!NodeUtil.isImmutableValue(left,    true)||!NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	15	None	replace
9	[BUG]  [BUGGY]  if(!NodeUtil.isImmutableValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(!NodeUtil.isImmutableValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(!NodeUtil.isImmutableValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {	  if(!NodeUtil.isImmutableValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	13	None	replace
10	[BUG]  [BUGGY]  Node  n  =  left.getLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  left.getLastChild();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  n  =  left.getLastChild();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	22	None	replace
11	[BUG]  [BUGGY]  Node  n  =  left.getNext();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  left.getNext();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  n  =  left.getNext();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	22	None	replace
12	[BUG]  [BUGGY]  Node  n  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  right.getFirstChild();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  n  =  right.getFirstChild();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	22	None	replace
13	[BUG]  [BUGGY]  Node  n  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  left.removeFirstChild();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  n  =  left.removeFirstChild();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	22	None	replace
14	[BUG]  [BUGGY]  Node  n  =  left.cloneTree();  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  left.cloneTree();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  n  =  left.cloneTree();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	22	None	replace
15	[BUG]  [BUGGY]  if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(result    ==    null    ||!NodeUtil.isLiteralValue(left,    true)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	36	None	replace
16	[BUG]  [BUGGY]  if(right  ==  null  ||!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(right  ==  null  ||!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(result    ==    null    ||!NodeUtil.isLiteralValue(left,    true)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	36	None	replace
17	[BUG]  [BUGGY]  if(result  ==  null  &&!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(result  ==  null  &&!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(result  ==  null  &&!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(result    ==    null    ||!NodeUtil.isLiteralValue(left,    true)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	36	None	replace
18	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.removeFirstChild();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.removeFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	18	None	replace
19	[BUG]  [BUGGY]  if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {	  if(n    ==    null    ||!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
20	[BUG]  [BUGGY]  if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {	  if(n    ==    null    ||!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
21	[BUG]  [BUGGY]  if(left  ==  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(left  ==  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {	  if(n    ==    null    ||!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
22	[BUG]  [BUGGY]  Node  right  =  left.getLastChild().getNext();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getLastChild().getNext();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.getLastChild().getNext();	  Node    right    =    left.getFirstChild().getNext();    	non-compiled	[CE]  orphaned  case	38	None	replace
23	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n.getFirstChild().getNext();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  n.getFirstChild().getNext();	  Node    right    =    left.getFirstChild().getNext();    	non-compiled	[CE]  orphaned  case	38	None	replace
24	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild().getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getFirstChild().getLastChild();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.getFirstChild().getLastChild();	  Node    right    =    left.getFirstChild().getNext();    	non-compiled	[CE]  orphaned  case	38	None	replace
25	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild().getNext()  +  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getFirstChild().getNext()  +  1;  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.getFirstChild().getNext()  +  1;	  Node    right    =    left.getFirstChild().getNext();    	non-compiled	[CE]  orphaned  case	38	None	replace
26	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild().getParent();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getFirstChild().getParent();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.getFirstChild().getParent();	  Node    right    =    left.getFirstChild().getNext();    	non-compiled	[CE]  orphaned  case	38	None	replace
27	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild().getNext(),  right;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getFirstChild().getNext(),  right;  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.getFirstChild().getNext(),  right;	  Node    right    =    left.getFirstChild().getNext();    	non-compiled	[CE]  orphaned  case	38	None	replace
28	[BUG]  [BUGGY]  if(right  ==  null  ||!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(right  ==  null  ||!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {	  if(result    ==    null    ||!NodeUtil.isLiteralValue(left,    true)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	42	None	replace
29	[BUG]  [BUGGY]  if(n!=  null  ||!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n!=  null  ||!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n!=  null  ||!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {	  if(result    ==    null    ||!NodeUtil.isLiteralValue(left,    true)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	42	None	replace
30	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left,  false)||  NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isLiteralValue(left,  false)||  NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isLiteralValue(left,  false)||  NodeUtil.isLiteralValue(right,  true))  {	  if    (!NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
31	[BUG]  [BUGGY]  if(n!=  null  &&!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n!=  null  &&!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n!=  null  &&!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    &&!NodeUtil.isLiteralValue(left,    true)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	47	None	replace
32	[BUG]  [BUGGY]  if(right!=  null  &&!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  &&!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(right!=  null  &&!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    &&!NodeUtil.isLiteralValue(left,    true)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	47	None	replace
33	[BUG]  [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(left!=  null  &&!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    &&!NodeUtil.isLiteralValue(left,    true)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	47	None	replace
34	[BUG]  [BUGGY]  if(result!=  null  ||!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(result!=  null  ||!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(result!=  null  ||!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    &&!NodeUtil.isLiteralValue(left,    true)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	47	None	replace
35	[BUG]  [BUGGY]  if(right  ==  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(right  ==  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(right    ==    null    ||!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
36	[BUG]  [BUGGY]  if(left  ==  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(left  ==  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(right    ==    null    ||!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
37	[BUG]  [BUGGY]  if(right  ==  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(right  ==  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {	  if(right    ==    null    ||!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
38	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getNext()  -  1;  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.getNext()  -  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	17	None	replace
39	[BUG]  [BUGGY]  Node  right  =  left.getNext()  +  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getNext()  +  1;  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.getNext()  +  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	17	None	replace
40	[BUG]  [BUGGY]  Node  right  =  left.getNext()  :  null;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getNext()  :  null;  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.getNext()  :  null;	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	17	None	replace
41	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  true))  {	  if(NodeUtil.isLiteralValue(left,    true)&&!NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
42	[BUG]  [BUGGY]  Node  right  =  left.getParent();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getParent();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.getParent();	  Node    right    =    n.getNext();    	non-compiled	[CE]  orphaned  case	39	None	replace
43	[BUG]  [BUGGY]  if(right!=  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(right!=  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {	  if(right!=    null    &&!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	26	None	replace
44	[BUG]  [BUGGY]  if(left  ==  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(left  ==  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {	  if(right!=    null    &&!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	26	None	replace
45	[BUG]  [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(left!=  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {	  if(right!=    null    &&!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	26	None	replace
46	[BUG]  [BUGGY]  if(n!=  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n!=  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n!=  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    ||!NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	41	None	replace
47	[BUG]  [BUGGY]  if(right!=  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(right!=  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    ||!NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	41	None	replace
48	[BUG]  [BUGGY]  if(result  ==  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(result  ==  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(result  ==  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    ||!NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	41	None	replace
49	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NAME  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NAME  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(left!=  null  ||  left.getType()  ==  Token.NAME  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    ||!NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	41	None	replace
50	[BUG]  [BUGGY]  if(n!=  null  ||!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n!=  null  ||!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n!=  null  ||!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    ||!NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	41	None	replace
51	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isImmutableValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isImmutableValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {	  if(NodeUtil.isImmutableValue(left,    true)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	37	None	replace
52	[BUG]  [BUGGY]  if(!NodeUtil.isImmutableValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(!NodeUtil.isImmutableValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(!NodeUtil.isImmutableValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {	  if(!NodeUtil.isImmutableValue(left,    false)||!NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	16	None	replace
53	[BUG]  [BUGGY]  if(left!=  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(left!=  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {	  if(left!=    null    &&!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	25	None	replace
54	[BUG]  [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(right,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(right,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(left!=  null  &&!NodeUtil.isLiteralValue(right,  false)||!NodeUtil.isLiteralValue(right,  false))  {	  if(left!=    null    &&!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	25	None	replace
55	[BUG]  [BUGGY]  if(right  ==  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(right  ==  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {	  if(result    ==    null    &&!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	33	None	replace
56	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left,  false)&&  NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isLiteralValue(left,  false)&&  NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isLiteralValue(left,  false)&&  NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isLiteralValue(left,    false)||    NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	12	None	replace
57	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left,  true)||  NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isLiteralValue(left,  true)||  NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isLiteralValue(left,  true)||  NodeUtil.isLiteralValue(right,  true))  {	  if(NodeUtil.isLiteralValue(left,    false)||    NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	12	None	replace
58	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left,  true)&&  NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isLiteralValue(left,  true)&&  NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isLiteralValue(left,  true)&&  NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isLiteralValue(left,    false)||    NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	12	None	replace
59	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left,  true)||  NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isLiteralValue(left,  true)||  NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isLiteralValue(left,  true)||  NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isLiteralValue(left,    false)||    NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	12	None	replace
60	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left,  false)||  NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isImmutableValue(left,  false)||  NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isImmutableValue(left,  false)||  NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isLiteralValue(left,    false)||    NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	12	None	replace
61	[BUG]  [BUGGY]  if(NodeUtil.isLocalValue(left,  false)||  NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isLocalValue(left,  false)||  NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isLocalValue(left,  false)||  NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isLiteralValue(left,    false)||    NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	12	None	replace
62	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left,  false)&&  NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isImmutableValue(left,  false)&&  NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isImmutableValue(left,  false)&&  NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isImmutableValue(left,    false)||    NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	46	None	replace
63	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left,  true)||  NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isImmutableValue(left,  true)||  NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isImmutableValue(left,  true)||  NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isImmutableValue(left,    false)||    NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	46	None	replace
64	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left,  true)&&  NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isImmutableValue(left,  true)&&  NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isImmutableValue(left,  true)&&  NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isImmutableValue(left,    false)||    NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	46	None	replace
65	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left,  false)&&  NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isLiteralValue(left,  false)&&  NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isLiteralValue(left,  false)&&  NodeUtil.isLiteralValue(right,  true))  {	  if(NodeUtil.isImmutableValue(left,    false)||    NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	46	None	replace
66	[BUG]  [BUGGY]  Node  rightLiteral  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  rightLiteral  =  left.getFirstChild();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  rightLiteral  =  left.getFirstChild();	  Node    rightLiteral    =    left.getType();    	non-compiled	[CE]  orphaned  case	23	None	replace
67	[BUG]  [BUGGY]  Node  rightLiteral  =  left.getLastChild();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  rightLiteral  =  left.getLastChild();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  rightLiteral  =  left.getLastChild();	  Node    rightLiteral    =    left.getType();    	non-compiled	[CE]  orphaned  case	23	None	replace
68	[BUG]  [BUGGY]  Node  rightLiteral  =  n.getType();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  rightLiteral  =  n.getType();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  rightLiteral  =  n.getType();	  Node    rightLiteral    =    left.getType();    	non-compiled	[CE]  orphaned  case	23	None	replace
69	[BUG]  [BUGGY]  Node  rightLiteral  =  left.getNext();  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  rightLiteral  =  left.getNext();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  rightLiteral  =  left.getNext();	  Node    rightLiteral    =    left.getType();    	non-compiled	[CE]  orphaned  case	23	None	replace
70	[BUG]  [BUGGY]  Node  rightLiteral  =  left.getValue();  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  rightLiteral  =  left.getValue();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  rightLiteral  =  left.getValue();	  Node    rightLiteral    =    left.getType();    	non-compiled	[CE]  orphaned  case	23	None	replace
71	[BUG]  [BUGGY]  Node  rightLiteral  =  left.getNode();  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  rightLiteral  =  left.getNode();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  rightLiteral  =  left.getNode();	  Node    rightLiteral    =    left.getType();    	non-compiled	[CE]  orphaned  case	23	None	replace
72	[BUG]  [BUGGY]  Node  right  =  left.getfirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getfirstChild();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.getfirstChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	20	None	replace
73	[BUG]  [BUGGY]  if(n!=  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n!=  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n!=  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    &&!NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	32	None	replace
74	[BUG]  [BUGGY]  if(right!=  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(right!=  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    &&!NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	32	None	replace
75	[BUG]  [BUGGY]  if(n  ==  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n  ==  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    &&!NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	32	None	replace
76	[BUG]  [BUGGY]  if(result!=  null  &&!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(result!=  null  &&!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(result!=  null  &&!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    &&!NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	32	None	replace
77	[BUG]  [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(right,  true))  {	  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
78	[BUG]  [BUGGY]  if(NodeUtil.isName(left)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isName(left)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isName(left)||!NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
79	[BUG]  [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(n,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(n,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(n,  false))  {	  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
80	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isImmutableValue(left)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isImmutableValue(left)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
81	[BUG]  [BUGGY]  if(NodeUtil.isVar(left)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isVar(left)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isVar(left)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
82	[BUG]  [BUGGY]  if(NodeUtil.isFunction(left)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isFunction(left)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isFunction(left)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
83	[BUG]  [BUGGY]  if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {	  if(n    ==    null    ||!NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
84	[BUG]  [BUGGY]  NodeUtil.isLiteralValue(n,  false))  {  return  left;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  NodeUtil.isLiteralValue(n,  false))  {  return  left;  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	NodeUtil.isLiteralValue(n,  false))  {  return  left;	  NodeUtil.isLiteralValue(left,    false))    {    return    n;    	non-compiled	[CE]  orphaned  case	44	None	replace
85	[BUG]  [BUGGY]  NodeUtil.isLiteralValue(left,  true))  {  return  left;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  NodeUtil.isLiteralValue(left,  true))  {  return  left;  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	NodeUtil.isLiteralValue(left,  true))  {  return  left;	  NodeUtil.isLiteralValue(left,    false))    {    return    n;    	non-compiled	[CE]  orphaned  case	44	None	replace
86	[BUG]  [BUGGY]  NodeUtil.isImmutableValue(left,  false))  {  return  n;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  NodeUtil.isImmutableValue(left,  false))  {  return  n;  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	NodeUtil.isImmutableValue(left,  false))  {  return  n;	  NodeUtil.isLiteralValue(left,    false))    {    return    n;    	non-compiled	[CE]  orphaned  case	44	None	replace
87	[BUG]  [BUGGY]  NodeUtil.isLiteralValue(left,  true))  {  return  n;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  NodeUtil.isLiteralValue(left,  true))  {  return  n;  }  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	NodeUtil.isLiteralValue(left,  true))  {  return  n;  }	  NodeUtil.isLiteralValue(left,    false))    {    return    n;    	non-compiled	[CE]  orphaned  case	44	None	replace
88	[BUG]  [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(left!=  null  &&!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(left!=    null    &&!NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	48	None	replace
89	[BUG]  [BUGGY]  if(left!=  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(left!=  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(left!=    null    &&!NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	48	None	replace
90	[BUG]  [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(right,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(right,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(left!=  null  &&!NodeUtil.isLiteralValue(right,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(left!=    null    &&!NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	48	None	replace
91	[BUG]  [BUGGY]  Node  rn  =  left.getLastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  rn  =  left.getLastChild();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  rn  =  left.getLastChild();	  Node    rn    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	43	None	replace
92	[BUG]  [BUGGY]  Node  rn  =  left.getNext();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  rn  =  left.getNext();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  rn  =  left.getNext();	  Node    rn    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	43	None	replace
93	[BUG]  [BUGGY]  Node  rn  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  rn  =  right.getFirstChild();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  rn  =  right.getFirstChild();	  Node    rn    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	43	None	replace
94	[BUG]  [BUGGY]  Node  rn  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  rn  =  n.getFirstChild();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  rn  =  n.getFirstChild();	  Node    rn    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	43	None	replace
95	[BUG]  [BUGGY]  Node  rn  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  rn  =  left.removeFirstChild();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  rn  =  left.removeFirstChild();	  Node    rn    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	43	None	replace
96	[BUG]  [BUGGY]  Node  rn  =  left.getString();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  rn  =  left.getString();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  rn  =  left.getString();	  Node    rn    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	43	None	replace
97	[BUG]  [BUGGY]  if(n  ==  null  &&!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  &&!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n  ==  null  &&!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {	  if(n    ==    null    &&!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	27	None	replace
98	[BUG]  [BUGGY]  if(n  ==  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n  ==  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {	  if(n    ==    null    &&!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	27	None	replace
99	[BUG]  [BUGGY]  if(NodeUtil.isName(left)||  NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isName(left)||  NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isName(left)||  NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isLiteralValue(left,    false)||    NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	12	None	replace
100	[BUG]  [BUGGY]  Node  n  =  left.replaceChild(left,  newNode);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  left.replaceChild(left,  newNode);  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  n  =  left.replaceChild(left,  newNode);	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	22	None	replace
101	[BUG]  [BUGGY]  if(left  ==  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(left  ==  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(left!=    null    &&!NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	48	None	replace
102	[BUG]  [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(left!=  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {	  if(left!=    null    &&!NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	48	None	replace
103	[BUG]  [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(left,  true))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(left,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(left,  true))  {	  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
104	[BUG]  [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(left,  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(left,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(left,  false))  {	  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
105	[BUG]  [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.mayHaveSideEffects(right,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.mayHaveSideEffects(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isName(left)&&!NodeUtil.mayHaveSideEffects(right,  false))  {	  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
106	[BUG]  [BUGGY]  NodeUtil.isFunction(left,  false))  {  return  n;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  NodeUtil.isFunction(left,  false))  {  return  n;  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	NodeUtil.isFunction(left,  false))  {  return  n;	  NodeUtil.isLiteralValue(left,    false))    {    return    n;    	non-compiled	[CE]  orphaned  case	44	None	replace
107	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(left,  false))  {  return  n;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  NodeUtil.isFunctionDeclaration(left,  false))  {  return  n;  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	NodeUtil.isFunctionDeclaration(left,  false))  {  return  n;	  NodeUtil.isLiteralValue(left,    false))    {    return    n;    	non-compiled	[CE]  orphaned  case	44	None	replace
108	[BUG]  [BUGGY]  NodeUtil.isLhs(left,  false))  {  return  n;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  NodeUtil.isLhs(left,  false))  {  return  n;  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	NodeUtil.isLhs(left,  false))  {  return  n;	  NodeUtil.isLiteralValue(left,    false))    {    return    n;    	non-compiled	[CE]  orphaned  case	44	None	replace
109	[BUG]  [BUGGY]  if(NodeUtil.isLhs(left)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isLhs(left)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isLhs(left)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isLiteralValue(left,    true)&&!NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
110	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left,  false)&&  NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isImmutableValue(left,  false)&&  NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isImmutableValue(left,  false)&&  NodeUtil.isLiteralValue(right,  true))  {	  if(NodeUtil.isImmutableValue(left,    false)||    NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	46	None	replace
111	[BUG]  [BUGGY]  if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {	  if(n    ==    null    ||!NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
112	[BUG]  [BUGGY]  Node  right  =  left.getlastChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getlastChild();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.getlastChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	20	None	replace
113	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(left)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isAssignmentOp(left)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isAssignmentOp(left)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isImmutableValue(left,    false)&&!NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	30	None	replace
114	[BUG]  [BUGGY]  Node  rn  =  left.replaceChild(n,  newNode);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  rn  =  left.replaceChild(n,  newNode);  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  rn  =  left.replaceChild(n,  newNode);	  Node    rn    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	43	None	replace
115	[BUG]  [BUGGY]  Node  rn  =  left.replaceChild(left,  newNode);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  rn  =  left.replaceChild(left,  newNode);  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  rn  =  left.replaceChild(left,  newNode);	  Node    rn    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	43	None	replace
116	[BUG]  [BUGGY]  Node  rightLiteral  =  left.getParent();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  rightLiteral  =  left.getParent();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  rightLiteral  =  left.getParent();	  Node    rightLiteral    =    left.getType();    	non-compiled	[CE]  orphaned  case	23	None	replace
117	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {	  if(right    ==    null    ||!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
118	[BUG]  [BUGGY]  if(right  ==  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(right  ==  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {	  if(right    ==    null    ||!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
119	[BUG]  [BUGGY]  Node  right  =  left!=  null?  left.getLastChild()  :  left.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left!=  null?  left.getLastChild()  :  left.getLastChild();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left!=  null?  left.getLastChild()  :  left.getLastChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	18	None	replace
120	[BUG]  [BUGGY]  Node  right  =  left!=  null?  left.getFirstChild()  :  left.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left!=  null?  left.getFirstChild()  :  left.getLastChild();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left!=  null?  left.getFirstChild()  :  left.getLastChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	18	None	replace
121	[BUG]  [BUGGY]  Node  right  =  left.removeFirst();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.removeFirst();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.removeFirst();	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	17	None	replace
122	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(right,  true))  {	  if(NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	4	None	replace
123	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild().cloneTree();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getFirstChild().cloneTree();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.getFirstChild().cloneTree();	  Node    right    =    left.getFirstChild().getNext();    	non-compiled	[CE]  orphaned  case	38	None	replace
124	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild().removeFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getFirstChild().removeFirstChild();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.getFirstChild().removeFirstChild();	  Node    right    =    left.getFirstChild().getNext();    	non-compiled	[CE]  orphaned  case	38	None	replace
125	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild().getNext(),  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getFirstChild().getNext(),  right);  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.getFirstChild().getNext(),  right);	  Node    right    =    left.getFirstChild().getNext();    	non-compiled	[CE]  orphaned  case	38	None	replace
126	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild().getNext();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.removeFirstChild().getNext();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.removeFirstChild().getNext();	  Node    right    =    left.getFirstChild().getNext();    	non-compiled	[CE]  orphaned  case	38	None	replace
127	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left,  false)&&!NodeUtil.isLiteralValue(n,  true))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isImmutableValue(left,  false)&&!NodeUtil.isLiteralValue(n,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isImmutableValue(left,  false)&&!NodeUtil.isLiteralValue(n,  true))  {	  if(NodeUtil.isImmutableValue(left,    false)&&!NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	30	None	replace
128	[BUG]  [BUGGY]  Node  right  =  left.replaceChild(n,  newNode);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.replaceChild(n,  newNode);  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.replaceChild(n,  newNode);	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	18	None	replace
129	[BUG]  [BUGGY]  Node  right  =  left.cloneTree();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.cloneTree();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.cloneTree();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	18	None	replace
130	[BUG]  [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.isImmutableValue(right,  false))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.isImmutableValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isName(left)&&!NodeUtil.isImmutableValue(right,  false))  {	  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
131	[BUG]  [BUGGY]  if(n  ==  null  ||!NodeUtil.isImmutableValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  ||!NodeUtil.isImmutableValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n  ==  null  ||!NodeUtil.isImmutableValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {	  if(n    ==    null    ||!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
132	[BUG]  [BUGGY]  if(result!=  null  &&!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(result!=  null  &&!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(result!=  null  &&!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {	  if(result!=    null    &&!NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	32	None	replace
133	[BUG]  [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(left!=  null  &&!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {	  if(left!=    null    &&!NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	48	None	replace
134	[BUG]  [BUGGY]  NodeUtil.isFunctionValue(left,  false))  {  return  n;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  NodeUtil.isFunctionValue(left,  false))  {  return  n;  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	NodeUtil.isFunctionValue(left,  false))  {  return  n;	  NodeUtil.isLiteralValue(left,    false))    {    return    n;    	non-compiled	[CE]  orphaned  case	44	None	replace
135	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n,  left)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isAssignmentOp(n,  left)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isAssignmentOp(n,  left)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isImmutableValue(left,    true)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	37	None	replace
136	[BUG]  [BUGGY]  Node  right  =  n.getParent();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n.getParent();  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  n.getParent();	  Node    right    =    n.getNext();    	non-compiled	[CE]  orphaned  case	39	None	replace
137	[BUG]  [BUGGY]  if(n!=  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n!=  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n!=  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {	  if(n!=    null    &&!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
138	[BUG]  [BUGGY]  if(n!=  null  &&!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n!=  null  &&!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n!=  null  &&!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(n!=    null    &&!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
139	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left,  true)&&  NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(NodeUtil.isImmutableValue(left,  true)&&  NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isImmutableValue(left,  true)&&  NodeUtil.isLiteralValue(right,  true))  {	  if(NodeUtil.isImmutableValue(left,    false)||    NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	46	None	replace
140	[BUG]  [BUGGY]  Node  n  =  left.replaceChild(n,  newNode);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  left.replaceChild(n,  newNode);  [BUGGY]      !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  n  =  left.replaceChild(n,  newNode);	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	22	None	replace
