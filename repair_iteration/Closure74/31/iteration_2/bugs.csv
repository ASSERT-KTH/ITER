bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
2	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
3	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
4	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {	  if(NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
5	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if  (!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {	  if    (!NodeUtil.isLiteralValue(left,    true)||!NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
6	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {	  if(NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	7	None	replace
7	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(NodeUtil.isImmutableValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isImmutableValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	7	None	replace
8	[BUG]  [BUGGY]  if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {	  if(result    ==    null    ||!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
9	[BUG]  [BUGGY]  if(right  ==  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(right  ==  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(right  ==  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {	  if(result    ==    null    ||!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
10	[BUG]  [BUGGY]  if(n!=  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n!=  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n!=  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {	  if(result    ==    null    ||!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
11	[BUG]  [BUGGY]  if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n  ==  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(result    ==    null    ||!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
12	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left,  false)||  NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(NodeUtil.isLiteralValue(left,  false)||  NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isLiteralValue(left,  false)||  NodeUtil.isLiteralValue(right,  false))  {	  if(result    ==    null    ||!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
13	[BUG]  [BUGGY]  if(!NodeUtil.isImmutableValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(!NodeUtil.isImmutableValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(!NodeUtil.isImmutableValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(!NodeUtil.isImmutableValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
14	[BUG]  [BUGGY]  if(!NodeUtil.isImmutableValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(!NodeUtil.isImmutableValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(!NodeUtil.isImmutableValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(!NodeUtil.isImmutableValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
15	[BUG]  [BUGGY]  if(!NodeUtil.isImmutableValue(left,  true)||!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(!NodeUtil.isImmutableValue(left,  true)||!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(!NodeUtil.isImmutableValue(left,  true)||!NodeUtil.isLiteralValue(right,  true))  {	  if(!NodeUtil.isImmutableValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
16	[BUG]  [BUGGY]  if(!NodeUtil.isImmutableValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(!NodeUtil.isImmutableValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(!NodeUtil.isImmutableValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {	  if(!NodeUtil.isImmutableValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
17	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  right  =  left.getNext();  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	6	None	replace
18	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
19	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  n.getFirstChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
20	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  n.getLastChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
21	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.getLastChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
22	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  n  =  left.getFirstChild();  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  n  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
23	[BUG]  [BUGGY]  Node  rightLiteral  =  left.getType();  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  rightLiteral  =  left.getType();  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  rightLiteral  =  left.getType();	      	non-compiled	[CE]  orphaned  case	6	None	replace
24	[BUG]  [BUGGY]  if(n!=  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n!=  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n!=  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    &&!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
25	[BUG]  [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(left!=  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    &&!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
26	[BUG]  [BUGGY]  if(right!=  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(right!=  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(right!=  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    &&!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
27	[BUG]  [BUGGY]  if(n  ==  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n  ==  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(n  ==  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    &&!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
28	[BUG]  [BUGGY]  if(result!=  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(result!=  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(result!=  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    &&!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
29	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  true))  {	  if(!NodeUtil.isLiteralValue(left,    true)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	1	None	replace
30	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(NodeUtil.isImmutableValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isImmutableValue(left,  false)&&!NodeUtil.isLiteralValue(right,  true))  {	  if(NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
31	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(NodeUtil.isImmutableValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isImmutableValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {	  if(NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
32	[BUG]  [BUGGY]  if(result!=  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(result!=  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(result!=  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    &&!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
33	[BUG]  [BUGGY]  if(result  ==  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(result  ==  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(result  ==  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    &&!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
34	[BUG]  [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(NodeUtil.isLiteralValue(left,    false)&&!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	7	None	replace
35	[BUG]  [BUGGY]  if(result  ==  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(result  ==  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(result  ==  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(result    ==    null    ||!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
36	[BUG]  [BUGGY]  if(result  ==  null  ||!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(result  ==  null  ||!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(result  ==  null  ||!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(result    ==    null    ||!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
37	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(NodeUtil.isImmutableValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isImmutableValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(!NodeUtil.isImmutableValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
38	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  right  =  left.getFirstChild().getNext();  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  left.getFirstChild().getNext();	      	non-compiled	[CE]  orphaned  case	6	None	replace
39	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  right  =  n.getNext();  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  right  =  n.getNext();	      	non-compiled	[CE]  orphaned  case	6	None	replace
40	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left,  true)||!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(NodeUtil.isImmutableValue(left,  true)||!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isImmutableValue(left,  true)||!NodeUtil.isLiteralValue(right,  true))  {	  if(NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
41	[BUG]  [BUGGY]  if(result!=  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(result!=  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(result!=  null  ||!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(result    ==    null    ||!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
42	[BUG]  [BUGGY]  if(result  ==  null  ||!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(result  ==  null  ||!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(result  ==  null  ||!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {	  if(result    ==    null    ||!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
43	[BUG]  [BUGGY]  Node  rn  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  rn  =  left.getFirstChild();  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	Node  rn  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
44	[BUG]  [BUGGY]  NodeUtil.isLiteralValue(left,  false))  {  return  n;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  NodeUtil.isLiteralValue(left,  false))  {  return  n;  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	NodeUtil.isLiteralValue(left,  false))  {  return  n;	      	non-compiled	[CE]  orphaned  case	6	None	replace
45	[BUG]  [BUGGY]  NodeUtil.isLiteralValue(left,  true))  {  return  n;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  NodeUtil.isLiteralValue(left,  true))  {  return  n;  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	NodeUtil.isLiteralValue(left,  true))  {  return  n;	      	non-compiled	[CE]  orphaned  case	6	None	replace
46	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left,  false)||  NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(NodeUtil.isImmutableValue(left,  false)||  NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isImmutableValue(left,  false)||  NodeUtil.isLiteralValue(right,  true))  {	  if(!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    true))    {    	non-compiled	[CE]  orphaned  case	4	None	replace
47	[BUG]  [BUGGY]  if(result!=  null  &&!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(result!=  null  &&!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(result!=  null  &&!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    &&!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
48	[BUG]  [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]    !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(left!=  null  &&!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	  if(result!=    null    &&!NodeUtil.isLiteralValue(left,    false)||!NodeUtil.isLiteralValue(right,    false))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
