bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(!NodeUtil.isLiteralValue(left,  true)&&!NodeUtil.isLiteralValue(right,  false))  {	if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  	non-compiled	[CE]  orphaned  case	61	None	replace
2	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if  (!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if  (!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  true))  {	if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  	non-compiled	[CE]  orphaned  case	61	None	replace
3	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(!NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  	non-compiled	[CE]  orphaned  case	61	None	replace
4	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]          AssertionFailedError  [CONTEXT]  private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {	if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  	non-compiled	[CE]  orphaned  case	61	None	replace
5	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]            AssertionFailedError  [CONTEXT]  private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(!NodeUtil.isLiteralValue(left,  true)||!NodeUtil.isLiteralValue(right,  false))  {	if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  	non-compiled	[CE]  orphaned  case	61	None	replace
6	[BUG]  [BUGGY]    [CE]  orphaned  case  [FE]              AssertionFailedError  [CONTEXT]  private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  [BUGGY]    [BUGGY]  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	  	if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  	non-compiled	[CE]  orphaned  case	61	None	replace
7	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isLiteralValue(left,  false)&&!NodeUtil.isLiteralValue(right,  false))  {	if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  	non-compiled	[CE]  orphaned  case	61	None	replace
8	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {  [BUGGY]  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  true))  {	if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  	non-compiled	[CE]  orphaned  case	61	None	replace
9	[BUG]  [BUGGY]  if(result  ==  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(result  ==  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(result  ==  null  ||!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {	if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  	non-compiled	[CE]  orphaned  case	61	None	replace
10	[BUG]  [BUGGY]  if(result!=  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(result!=  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(result!=  null  &&!NodeUtil.isLiteralValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {	if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  	non-compiled	[CE]  orphaned  case	61	None	replace
11	[BUG]  [BUGGY]  if(!NodeUtil.isImmutableValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(!NodeUtil.isImmutableValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {  [BUGGY]  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	889	890	3	replace	if(!NodeUtil.isImmutableValue(left,  false)||!NodeUtil.isLiteralValue(right,  false))  {	if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  	non-compiled	[CE]  orphaned  case	61	None	replace
