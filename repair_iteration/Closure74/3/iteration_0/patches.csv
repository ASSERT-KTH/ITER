bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  lhType  ==  rhType;  [CE]  [FE]    AssertionFailedError  [CONTEXT]  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  [BUGGY]  result  =  lhType  ==  rhType;  [BUGGY]  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType;	result  =  lhType  !=  rhType;  	non-compiled	[CE]  	5	None	replace
2	[BUG]  [BUGGY]  result  =  lhType  ==  n;  [CE]  [FE]      AssertionFailedError  [CONTEXT]  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  [BUGGY]  result  =  lhType  ==  n;  [BUGGY]  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n;	result  =  lhType  !=  rhType;  	non-compiled	[CE]  	5	None	replace
3	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  1;  [CE]  [FE]        AssertionFailedError  [CONTEXT]  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  [BUGGY]  result  =  lhType  ==  rhType  +  1;  [BUGGY]  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType  +  1;	result  =  lhType  !=  rhType;  	non-compiled	[CE]  	5	None	replace
4	[BUG]  [BUGGY]  result  =  rhType!=  lhType;  [CE]  [FE]          AssertionFailedError  [CONTEXT]  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  [BUGGY]  result  =  rhType!=  lhType;  [BUGGY]  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType!=  lhType;	result  =  lhType  !=  rhType;  	non-compiled	[CE]  	5	None	replace
5	[BUG]  [BUGGY]  result  =  lhType  ==  n,  rhType;  [CE]  [FE]            AssertionFailedError  [CONTEXT]  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  [BUGGY]  result  =  lhType  ==  n,  rhType;  [BUGGY]  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n,  rhType;	result  =  lhType  !=  rhType;  	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  result  =  lhType!=  n;  [CE]  [FE]              AssertionFailedError  [CONTEXT]  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  [BUGGY]  result  =  lhType!=  n;  [BUGGY]  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType!=  n;	result  =  lhType  !=  rhType;  	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]    [CE]  [FE]                AssertionFailedError  [CONTEXT]  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  [BUGGY]    [BUGGY]  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	  	result  =  lhType  !=  rhType;  	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  result  =  lhType  ==  NE;  [CE]  [FE]    AssertionFailedError  [CONTEXT]  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  [BUGGY]  result  =  lhType  ==  NE;  [BUGGY]  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  NE;	result  =  lhType  !=  rhType;  	non-compiled	[CE]  	5	None	replace
9	[BUG]  [BUGGY]  result  =  lhType  ==  n.getType();  [CE]  [FE]      AssertionFailedError  [CONTEXT]  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  [BUGGY]  result  =  lhType  ==  n.getType();  [BUGGY]  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n.getType();	result  =  lhType  !=  rhType;  	non-compiled	[CE]  	5	None	replace
10	[BUG]  [BUGGY]  result  =  lhClass  ==  rhType;  [CE]  [FE]    AssertionFailedError  [CONTEXT]  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  [BUGGY]  result  =  lhClass  ==  rhType;  [BUGGY]  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhClass  ==  rhType;	result  =  lhType  !=  rhType;  	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  result  =  lhType  >>  rhType;  [CE]  [FE]      AssertionFailedError  [CONTEXT]  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  [BUGGY]  result  =  lhType  >>  rhType;  [BUGGY]  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  >>  rhType;	result  =  lhType  !=  rhType;  	non-compiled	[CE]  	5	None	replace
12	[BUG]  [BUGGY]  result  =  lhType!=  rhType  +  1;  [CE]  [FE]        AssertionFailedError  [CONTEXT]  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  [BUGGY]  result  =  lhType!=  rhType  +  1;  [BUGGY]  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType!=  rhType  +  1;	result  =  lhType  !=  rhType;  	non-compiled	[CE]  	5	None	replace
