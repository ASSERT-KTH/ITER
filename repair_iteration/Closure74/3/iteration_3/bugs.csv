bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  /  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType  /  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType  /  1;	  result    =    lhType    ==    rhType    *    1;    	non-compiled	[CE]  	52	None	replace
2	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  -  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType  -  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType  -  1;	  result    =    lhType    ==    rhType    *    1;    	non-compiled	[CE]  	52	None	replace
3	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  *  2;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType  *  2;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType  *  2;	  result    =    lhType    ==    rhType    *    1;    	non-compiled	[CE]  	52	None	replace
4	[BUG]  [BUGGY]  result  =  lhType  ==  n  *  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  n  *  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n  *  1;	  result    =    lhType    ==    rhType    *    1;    	non-compiled	[CE]  	52	None	replace
5	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  *  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rhType  ==  lhType  *  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  lhType  *  1;	  result    =    lhType    ==    rhType    *    1;    	non-compiled	[CE]  	52	None	replace
6	[BUG]  [BUGGY]  result  =  n!=  rhType;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  n!=  rhType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  n!=  rhType;	  result    =    rhType!=    n;    	non-compiled	[CE]  	50	None	replace
7	[BUG]  [BUGGY]  result  =  n  ==  rhType;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  n  ==  rhType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  n  ==  rhType;	  result    =    rhType!=    n;    	non-compiled	[CE]  	50	None	replace
8	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  right  =  left.getFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  	3	None	replace
9	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  right  =  n.getLastChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  	3	None	replace
10	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  right  =  left.getLastChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  	3	None	replace
11	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  right  =  left.getNext();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  right  =  left.getNext();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  	3	None	replace
12	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  right  =  n.getNext();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  right  =  n.getNext();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  	3	None	replace
13	[BUG]  [BUGGY]  Node  left  =  left.getNext();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  left  =  left.getNext();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  left  =  left.getNext();	  Node    left    =    right.getNext();    	non-compiled	[CE]  	5	None	replace
14	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  left  =  right.getLastChild();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  left  =  right.getLastChild();	  Node    left    =    right.getNext();    	non-compiled	[CE]  	5	None	replace
15	[BUG]  [BUGGY]  Node  left  =  right.getNext()  -  1;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  left  =  right.getNext()  -  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  left  =  right.getNext()  -  1;	  Node    left    =    right.getNext();    	non-compiled	[CE]  	5	None	replace
16	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  left  =  right.getFirstChild();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  left  =  right.getFirstChild();	  Node    left    =    right.getNext();    	non-compiled	[CE]  	5	None	replace
17	[BUG]  [BUGGY]  Node  left  =  right.getNext(),  ln;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  left  =  right.getNext(),  ln;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  left  =  right.getNext(),  ln;	  Node    left    =    right.getNext();    	non-compiled	[CE]  	5	None	replace
18	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  NE;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  NE;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  NE;	  result    =    lhType    ==    NE,    rhType;    	non-compiled	[CE]  	40	None	replace
19	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  0;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  0;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  0;	  result    =    lhType    ==    NE,    rhType;    	non-compiled	[CE]  	40	None	replace
20	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  n  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  n  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  n  +  1;	  result    =    lhType    ==    rhType,    n;    	non-compiled	[CE]  	23	None	replace
21	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  left;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  left;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  left;	  result    =    lhType    ==    rhType,    n;    	non-compiled	[CE]  	23	None	replace
22	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  newNode;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  newNode;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  newNode;	  result    =    lhType    ==    rhType,    n;    	non-compiled	[CE]  	23	None	replace
23	[BUG]  [BUGGY]  result  =  n  ==  lhType,  rhType;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  n  ==  lhType,  rhType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  n  ==  lhType,  rhType;	  result    =    lhType    ==    rhType,    n;    	non-compiled	[CE]  	23	None	replace
24	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  null;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  null;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  null;	  result    =    lhType    ==    rhType,    n;    	non-compiled	[CE]  	23	None	replace
25	[BUG]  [BUGGY]  result  =  rhType  ==  n.type;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rhType  ==  n.type;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  n.type;	  result    =    lhType    ==    n.type;    	non-compiled	[CE]  	18	None	replace
26	[BUG]  [BUGGY]  result  =  n.type  ==  lhType;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  n.type  ==  lhType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  n.type  ==  lhType;	  result    =    lhType    ==    n.type;    	non-compiled	[CE]  	18	None	replace
27	[BUG]  [BUGGY]  result  =  lhType  ==  n,  ln;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  n,  ln;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n,  ln;	  result    =    lhType    ==    rhType,    ln;    	non-compiled	[CE]  	24	None	replace
28	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  ln  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  ln  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  ln  +  1;	  result    =    lhType    ==    rhType,    ln;    	non-compiled	[CE]  	24	None	replace
29	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  val;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  val;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  val;	  result    =    lhType    ==    rhType,    ln;    	non-compiled	[CE]  	24	None	replace
30	[BUG]  [BUGGY]  result  =  rn  ==  lhType;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rn  ==  lhType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rn  ==  lhType;	  result    =    n    ==    lhType;    	non-compiled	[CE]  	48	None	replace
31	[BUG]  [BUGGY]  result  =  rhType!=  lhType.getType();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rhType!=  lhType.getType();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType!=  lhType.getType();	  result    =    lhType!=    rhType.getType();    	non-compiled	[CE]  	28	None	replace
32	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getLeastSupertype();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType.getLeastSupertype();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getLeastSupertype();	  result    =    lhType!=    rhType.getType();    	non-compiled	[CE]  	28	None	replace
33	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getShortValue();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType.getShortValue();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getShortValue();	  result    =    lhType!=    rhType.getType();    	non-compiled	[CE]  	28	None	replace
34	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getSimpleName();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType.getSimpleName();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getSimpleName();	  result    =    lhType!=    rhType.getType();    	non-compiled	[CE]  	28	None	replace
35	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getValue();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType.getValue();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getValue();	  result    =    lhType!=    rhType.getType();    	non-compiled	[CE]  	28	None	replace
36	[BUG]  [BUGGY]  Result  =  lhType  ==  n;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Result  =  lhType  ==  n;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Result  =  lhType  ==  n;	  Result    =    lhType    ==    rhType;    	non-compiled	[CE]  	38	None	replace
37	[BUG]  [BUGGY]  Result  =  lhType  ==  n,  rhType;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Result  =  lhType  ==  n,  rhType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Result  =  lhType  ==  n,  rhType;	  Result    =    lhType    ==    rhType;    	non-compiled	[CE]  	38	None	replace
38	[BUG]  [BUGGY]  Result  =  lhType  ==  rhType  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Result  =  lhType  ==  rhType  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Result  =  lhType  ==  rhType  +  1;	  Result    =    lhType    ==    rhType;    	non-compiled	[CE]  	38	None	replace
39	[BUG]  [BUGGY]  result  =  lhType  ==  n;  break;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  n;  break;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  	2	None	replace
40	[BUG]  [BUGGY]  result  =  lhType  ==  n,  rhType;  break;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  n,  rhType;  break;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n,  rhType;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  	2	None	replace
41	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  1;  break;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType  +  1;  break;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType  +  1;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  	2	None	replace
42	[BUG]  [BUGGY]  result  =  rhType  ==  lhType;  break;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rhType  ==  lhType;  break;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  lhType;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  	2	None	replace
43	[BUG]  [BUGGY]  result  =  lhType!=  n;  break;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType!=  n;  break;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType!=  n;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  	2	None	replace
44	[BUG]  [BUGGY]  result  =  lhType  ==  NE;  break;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  NE;  break;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  NE;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  	2	None	replace
45	[BUG]  [BUGGY]  result  =  lhType  ==  n  +  3;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  n  +  3;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n  +  3;	  result    =    lhType    ==    rhType    +    3;    	non-compiled	[CE]  	17	None	replace
46	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  +  3;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rhType  ==  lhType  +  3;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  lhType  +  3;	  result    =    lhType    ==    rhType    +    3;    	non-compiled	[CE]  	17	None	replace
47	[BUG]  [BUGGY]  result  =  rhType  >=  lhType  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rhType  >=  lhType  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  >=  lhType  +  1;	  result    =    lhType    >=    rhType    +    1;    	non-compiled	[CE]  	15	None	replace
48	[BUG]  [BUGGY]  result  =  rhType  ==  nType;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rhType  ==  nType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  nType;	  result    =    lhClass    ==    nType;    	non-compiled	[CE]  	36	None	replace
49	[BUG]  [BUGGY]  result  =  n  ==  lhClass;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  n  ==  lhClass;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  n  ==  lhClass;	  result    =    lhClass    ==    nType;    	non-compiled	[CE]  	36	None	replace
50	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  left  =  n.getLastChild();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  left  =  n.getLastChild();	  Node    left    =    n.getNext();    	non-compiled	[CE]  	4	None	replace
51	[BUG]  [BUGGY]  Node  left  =  n.getNext()  +  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  left  =  n.getNext()  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  left  =  n.getNext()  +  1;	  Node    left    =    n.getNext();    	non-compiled	[CE]  	4	None	replace
52	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  left  =  left.getFirstChild();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  left  =  left.getFirstChild();	  Node    left    =    n.getNext();    	non-compiled	[CE]  	4	None	replace
53	[BUG]  [BUGGY]  result  =  lhType  ==  n  +  2;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  n  +  2;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n  +  2;	  result    =    lhType    ==    rhType    +    2;    	non-compiled	[CE]  	12	None	replace
54	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  +  2;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rhType  ==  lhType  +  2;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  lhType  +  2;	  result    =    lhType    ==    rhType    +    2;    	non-compiled	[CE]  	12	None	replace
55	[BUG]  [BUGGY]  =  lhType  ==  n;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  =  lhType  ==  n;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	=  lhType  ==  n;	  =    lhType    ==    rhType;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
56	[BUG]  [BUGGY]  =  result  ==  rhType;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  =  result  ==  rhType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	=  result  ==  rhType;	  =    lhType    ==    rhType;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
57	[BUG]  [BUGGY]  =  lhType  ==  rhType  +  1;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  =  lhType  ==  rhType  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	=  lhType  ==  rhType  +  1;	  =    lhType    ==    rhType;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
58	[BUG]  [BUGGY]  =  rhType  ==  lhType;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  =  rhType  ==  lhType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	=  rhType  ==  lhType;	  =    lhType    ==    rhType;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
59	[BUG]  [BUGGY]  =  lhType  ==  n,  rhType;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  =  lhType  ==  n,  rhType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	=  lhType  ==  n,  rhType;	  =    lhType    ==    rhType;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
60	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getReturnType();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType.getReturnType();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getReturnType();	  result    =    rhType    ==    lhType.getType();    	non-compiled	[CE]  	27	None	replace
61	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getRawType();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType.getRawType();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getRawType();	  result    =    rhType    ==    lhType.getType();    	non-compiled	[CE]  	27	None	replace
62	[BUG]  [BUGGY]  result  =  rhType  ==  lhClass  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rhType  ==  lhClass  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  lhClass  +  1;	  result    =    lhClass    ==    rhType    +    1;    	non-compiled	[CE]  	33	None	replace
63	[BUG]  [BUGGY]  result  =  lhClass  ==  n  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhClass  ==  n  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhClass  ==  n  +  1;	  result    =    lhClass    ==    rhType    +    1;    	non-compiled	[CE]  	33	None	replace
64	[BUG]  [BUGGY]  result  =  rhType  ==  n  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rhType  ==  n  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  n  +  1;	  result    =    rhType    ==    lhType    +    1;    	non-compiled	[CE]  	16	None	replace
65	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getElementType();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType.getElementType();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getElementType();	  result    =    lhType    >>    rhType.getType();    	non-compiled	[CE]  	42	None	replace
66	[BUG]  [BUGGY]  result  =  rhType  ==  rhType  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rhType  ==  rhType  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  rhType  +  1;	  result    =    rhType!=    lhType    +    1;    	non-compiled	[CE]  	13	None	replace
67	[BUG]  [BUGGY]  result  =  lhType  ==  n.getInstanceType();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  n.getInstanceType();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n.getInstanceType();	  result    =    lhType    ==    rhType.getInstanceType();    	non-compiled	[CE]  	51	None	replace
68	[BUG]  [BUGGY]  result  =  lhType  ==  n,  rhType.getInstanceType();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  n,  rhType.getInstanceType();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n,  rhType.getInstanceType();	  result    =    lhType    ==    rhType.getInstanceType();    	non-compiled	[CE]  	51	None	replace
69	[BUG]  [BUGGY]  result  =  rhType  ==  lhType.getInstanceType();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rhType  ==  lhType.getInstanceType();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  lhType.getInstanceType();	  result    =    lhType    ==    rhType.getInstanceType();    	non-compiled	[CE]  	51	None	replace
70	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getNativeType(UNKNOWN_TYPE);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType.getNativeType(UNKNOWN_TYPE);  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getNativeType(UNKNOWN_TYPE);	  result    =    lhType    ==    rhType.getInstanceType();    	non-compiled	[CE]  	51	None	replace
71	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getNativeType();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType.getNativeType();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getNativeType();	  result    =    lhType    ==    rhType.getInstanceType();    	non-compiled	[CE]  	51	None	replace
72	[BUG]  [BUGGY]  result  =  rhType  ==  Token.NE;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rhType  ==  Token.NE;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  Token.NE;	  result    =    lhType    ==    Token.NE;    	non-compiled	[CE]  	46	None	replace
73	[BUG]  [BUGGY]  result  =  lhType  [Delete]  rhType;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  [Delete]  rhType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  [Delete]  rhType;	  result    =    lhType    ==    Token.NE;    	non-compiled	[CE]  	46	None	replace
74	[BUG]  [BUGGY]  result  =  lhType  ==  n.getName();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  n.getName();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n.getName();	  result    =    lhType    ==    rhType.getName();    	non-compiled	[CE]  	44	None	replace
75	[BUG]  [BUGGY]  result  =  rhType  ==  lhType.getName();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rhType  ==  lhType.getName();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  lhType.getName();	  result    =    lhType    ==    rhType.getName();    	non-compiled	[CE]  	44	None	replace
76	[BUG]  [BUGGY]  result  =  lhType  ==  n,  rhType.getName();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  n,  rhType.getName();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n,  rhType.getName();	  result    =    lhType    ==    rhType.getName();    	non-compiled	[CE]  	44	None	replace
77	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getQualifiedName();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType.getQualifiedName();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getQualifiedName();	  result    =    lhType    ==    rhType.getName();    	non-compiled	[CE]  	44	None	replace
78	[BUG]  [BUGGY]  result  =  lhType  ==  n  +  4;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  n  +  4;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n  +  4;	  result    =    lhType    ==    rhType    +    4;    	non-compiled	[CE]  	35	None	replace
79	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  +  4;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rhType  ==  lhType  +  4;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  lhType  +  4;	  result    =    lhType    ==    rhType    +    4;    	non-compiled	[CE]  	35	None	replace
80	[BUG]  [BUGGY]  n  =  left.getNext()  +  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  n  =  left.getNext()  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	n  =  left.getNext()  +  1;	  n    =    left.getNext();    	non-compiled	[CE]  	6	None	replace
81	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  n  =  left.getLastChild();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	n  =  left.getLastChild();	  n    =    left.getNext();    	non-compiled	[CE]  	6	None	replace
82	[BUG]  [BUGGY]  n  =  right.getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  n  =  right.getNext();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	n  =  right.getNext();	  n    =    left.getNext();    	non-compiled	[CE]  	6	None	replace
83	[BUG]  [BUGGY]  n  =  left.getNext()  ||  right.getType()  ==  Token.NE;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  n  =  left.getNext()  ||  right.getType()  ==  Token.NE;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	n  =  left.getNext()  ||  right.getType()  ==  Token.NE;	  n    =    left.getNext();    	non-compiled	[CE]  	6	None	replace
84	[BUG]  [BUGGY]  n  =  left.getParent();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  n  =  left.getParent();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	n  =  left.getParent();	  n    =    left.getNext();    	non-compiled	[CE]  	6	None	replace
85	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getLocale();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType.getLocale();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getLocale();	  result    =    rhType    ==    n.getType();    	non-compiled	[CE]  	26	None	replace
86	[BUG]  [BUGGY]  result  =  lhType  ==  n,  right  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  n,  right  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n,  right  +  1;	  result    =    lhType    ==    n,    rhType    +    1;    	non-compiled	[CE]  	21	None	replace
87	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  rhType  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  rhType  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  rhType  +  1;	  result    =    lhType    ==    n,    rhType    +    1;    	non-compiled	[CE]  	21	None	replace
88	[BUG]  [BUGGY]  result  =  lhType  ==  n,  left  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  n,  left  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n,  left  +  1;	  result    =    lhType    ==    n,    rhType    +    1;    	non-compiled	[CE]  	21	None	replace
89	[BUG]  [BUGGY]  result  =  lhType  ==  n,  newNode  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  n,  newNode  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n,  newNode  +  1;	  result    =    lhType    ==    n,    rhType    +    1;    	non-compiled	[CE]  	21	None	replace
90	[BUG]  [BUGGY]  Node  left  =  left.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  left  =  left.getLastChild();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  left  =  left.getLastChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  	1	None	replace
91	[BUG]  [BUGGY]  result  =  n  ==  rhType.getType();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  n  ==  rhType.getType();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  n  ==  rhType.getType();	  result    =    n    ==    lhType.getType();    	non-compiled	[CE]  	29	None	replace
92	[BUG]  [BUGGY]  result  =  lhType  ==  rhClass;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhClass;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhClass;	  result    =    rhType    ==    lhClass;    	non-compiled	[CE]  	31	None	replace
93	[BUG]  [BUGGY]  result  =  lhType  ==  n,  rhType);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  n,  rhType);  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n,  rhType);	  result    =    lhType    ==    rhType,    n);    	non-compiled	[CE]  	41	None	replace
94	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  n  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  n  +  1);  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  n  +  1);	  result    =    lhType    ==    rhType,    n);    	non-compiled	[CE]  	41	None	replace
95	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  newNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  newNode);  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  newNode);	  result    =    lhType    ==    rhType,    n);    	non-compiled	[CE]  	41	None	replace
96	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  left);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  left);  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  left);	  result    =    lhType    ==    rhType,    n);    	non-compiled	[CE]  	41	None	replace
97	[BUG]  [BUGGY]  result  =  lhType  ==  n,  rh);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  n,  rh);  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n,  rh);	  result    =    lhType    ==    rhType,    n);    	non-compiled	[CE]  	41	None	replace
98	[BUG]  [BUGGY]  result  =  lhType  ==  n,  rhType.getType();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  n,  rhType.getType();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n,  rhType.getType();	  result    =    lhType    ==    rhType.getType();    	non-compiled	[CE]  	25	None	replace
99	[BUG]  [BUGGY]  result  =  rhType  ==  n,  newNode;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rhType  ==  n,  newNode;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  n,  newNode;	  result    =    lhType    ==    n,    newNode;    	non-compiled	[CE]  	22	None	replace
100	[BUG]  [BUGGY]  result  =  lhType  {  rhType,  newNode;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  {  rhType,  newNode;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  {  rhType,  newNode;	  result    =    lhType    ==    n,    newNode;    	non-compiled	[CE]  	22	None	replace
101	[BUG]  [BUGGY]  result  =  lhType  >>  rhType,  newNode;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  >>  rhType,  newNode;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  >>  rhType,  newNode;	  result    =    lhType    ==    n,    newNode;    	non-compiled	[CE]  	22	None	replace
102	[BUG]  [BUGGY]  result  =  lhNumber  ==  n;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhNumber  ==  n;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhNumber  ==  n;	  result    =    lhClass    ==    n;    	non-compiled	[CE]  	32	None	replace
103	[BUG]  [BUGGY]  result  =  lhType  {  rhType  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  {  rhType  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  {  rhType  +  1;	  result    =    lhType    ==    n    +    1;    	non-compiled	[CE]  	11	None	replace
104	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  n  =  right.getFirstChild();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	n  =  right.getFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	39	None	replace
105	[BUG]  [BUGGY]  n  =  left.removeFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  n  =  left.removeFirstChild();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	n  =  left.removeFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	39	None	replace
106	[BUG]  [BUGGY]  n  =  left.getFirstChild()  +  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  n  =  left.getFirstChild()  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	n  =  left.getFirstChild()  +  1;	  n    =    left.getFirstChild();    	non-compiled	[CE]  	39	None	replace
107	[BUG]  [BUGGY]  Result  =  lhType  ==  NE;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Result  =  lhType  ==  NE;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Result  =  lhType  ==  NE;	  Result    =    lhType    ==    rhType;    	non-compiled	[CE]  	38	None	replace
108	[BUG]  [BUGGY]  =  lhType  ==  NE;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  =  lhType  ==  NE;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	=  lhType  ==  NE;	  =    lhType    ==    rhType;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
109	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getNativeType(NO_TYPE);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType.getNativeType(NO_TYPE);  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getNativeType(NO_TYPE);	  result    =    lhType    ==    rhType.getInstanceType();    	non-compiled	[CE]  	51	None	replace
110	[BUG]  [BUGGY]  result  =  lhClass  ==  rhClass;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhClass  ==  rhClass;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhClass  ==  rhClass;	  result    =    lhClass    ==    n;    	non-compiled	[CE]  	32	None	replace
111	[BUG]  [BUGGY]  result  =  lhLevel  ==  rhType;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhLevel  ==  rhType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhLevel  ==  rhType;	  result    =    lhClass    ==    n;    	non-compiled	[CE]  	32	None	replace
112	[BUG]  [BUGGY]  result  =  lhNum  ==  n;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhNum  ==  n;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhNum  ==  n;	  result    =    lhClass    ==    n;    	non-compiled	[CE]  	32	None	replace
113	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  *  4;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType  *  4;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType  *  4;	  result    =    lhType    ==    rhType    *    1;    	non-compiled	[CE]  	52	None	replace
114	[BUG]  [BUGGY]  n  =  left.replaceChild(n,  newNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  n  =  left.replaceChild(n,  newNode);  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	n  =  left.replaceChild(n,  newNode);	  n    =    left.getFirstChild();    	non-compiled	[CE]  	39	None	replace
115	[BUG]  [BUGGY]  result  =  lhType  ==  NE,  ln;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  NE,  ln;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  NE,  ln;	  result    =    lhType    ==    rhType,    ln;    	non-compiled	[CE]  	24	None	replace
116	[BUG]  [BUGGY]  result  =  lhType  ==  n.getType();  break;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  n.getType();  break;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n.getType();  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  	2	None	replace
117	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  right  =  left.removeFirstChild();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  right  =  left.removeFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  	3	None	replace
118	[BUG]  [BUGGY]  Node  right  =  left.getfirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  right  =  left.getfirstChild();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  right  =  left.getfirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  	3	None	replace
119	[BUG]  [BUGGY]  result  =  lhType  ==  node;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  node;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  node;	  result    =    lhClass    ==    nType;    	non-compiled	[CE]  	36	None	replace
120	[BUG]  [BUGGY]  result  =  lhType  ==  nodeType;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  nodeType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  nodeType;	  result    =    lhClass    ==    nType;    	non-compiled	[CE]  	36	None	replace
121	[BUG]  [BUGGY]  result  =  lhType  ==  ntype;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  ntype;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  ntype;	  result    =    lhClass    ==    nType;    	non-compiled	[CE]  	36	None	replace
122	[BUG]  [BUGGY]  result  =  lhType  ==  negative;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  negative;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  negative;	  result    =    lhClass    ==    nType;    	non-compiled	[CE]  	36	None	replace
123	[BUG]  [BUGGY]  result  =  rhType  >>  lhType  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rhType  >>  lhType  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  >>  lhType  +  1;	  result    =    lhType    >>    rhType    +    1;    	non-compiled	[CE]  	14	None	replace
124	[BUG]  [BUGGY]  result  =  lhType  ==  NUMBER_TYPE;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  NUMBER_TYPE;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  NUMBER_TYPE;	  result    =    lhtype    ==    rhType;    	non-compiled	[CE]  	30	None	replace
125	[BUG]  [BUGGY]  result  =  lhType  ==  rhDeclaration;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhDeclaration;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhDeclaration;	  result    =    rhType    ==    lhClass;    	non-compiled	[CE]  	31	None	replace
126	[BUG]  [BUGGY]  result  =  lhType  ==  rhReflection;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhReflection;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhReflection;	  result    =    rhType    ==    lhClass;    	non-compiled	[CE]  	31	None	replace
127	[BUG]  [BUGGY]  result  =  lhType  ==  rhReturnType;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhReturnType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhReturnType;	  result    =    rhType    ==    lhClass;    	non-compiled	[CE]  	31	None	replace
128	[BUG]  [BUGGY]  Node  left  =  right.removeFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  left  =  right.removeFirstChild();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  left  =  right.removeFirstChild();	  Node    left    =    right.getNext();    	non-compiled	[CE]  	5	None	replace
129	[BUG]  [BUGGY]  Node  left  =  left.removeFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  left  =  left.removeFirstChild();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  left  =  left.removeFirstChild();	  Node    left    =    right.getNext();    	non-compiled	[CE]  	5	None	replace
130	[BUG]  [BUGGY]  result  =  lhType  ==  RN;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  RN;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  RN;	  result    =    rhType    ==    NE;    	non-compiled	[CE]  	19	None	replace
131	[BUG]  [BUGGY]  result  =  lhType  ==  rhtype;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhtype;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhtype;	  result    =    rhType    ==    NE;    	non-compiled	[CE]  	19	None	replace
132	[BUG]  [BUGGY]  result  =  lhClass  ==  rhType  +  2;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhClass  ==  rhType  +  2;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhClass  ==  rhType  +  2;	  result    =    lhClass    ==    rhType    +    1;    	non-compiled	[CE]  	33	None	replace
133	[BUG]  [BUGGY]  result  =  lhType  ==  NE,  n;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  NE,  n;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  NE,  n;	  result    =    lhType    ==    NE,    rhType;    	non-compiled	[CE]  	40	None	replace
134	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  NE);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  NE);  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  NE);	  result    =    lhType    ==    NE,    rhType;    	non-compiled	[CE]  	40	None	replace
135	[BUG]  [BUGGY]  result  =  rhType  ==  NE,  lhType;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rhType  ==  NE,  lhType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  NE,  lhType;	  result    =    lhType    ==    NE,    rhType;    	non-compiled	[CE]  	40	None	replace
136	[BUG]  [BUGGY]  result  =  lhType  ==  NE,  rhType  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  NE,  rhType  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  NE,  rhType  +  1;	  result    =    lhType    ==    NE,    rhType;    	non-compiled	[CE]  	40	None	replace
137	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  val);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  val);  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  val);	  result    =    lhType    ==    rhType,    n);    	non-compiled	[CE]  	41	None	replace
138	[BUG]  [BUGGY]  result  =  lhType  ==  NE,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  NE,  n);  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  NE,  n);	  result    =    lhType    ==    rhType,    n);    	non-compiled	[CE]  	41	None	replace
139	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getParent();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType.getParent();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getParent();	  result    =    n    ==    lhType.getType();    	non-compiled	[CE]  	29	None	replace
140	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getDeclaringClass();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType.getDeclaringClass();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getDeclaringClass();	  result    =    rhType    ==    lhType.getType();    	non-compiled	[CE]  	27	None	replace
141	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getDeclaredType();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType.getDeclaredType();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getDeclaredType();	  result    =    rhType    ==    lhType.getType();    	non-compiled	[CE]  	27	None	replace
142	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getRightType();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType.getRightType();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getRightType();	  result    =    lhType    ==    rhType.getType();    	non-compiled	[CE]  	25	None	replace
143	[BUG]  [BUGGY]  result  =  lhType  >  rhType  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  >  rhType  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  >  rhType  +  1;	  result    =    lhType    >=    rhType    +    1;    	non-compiled	[CE]  	15	None	replace
144	[BUG]  [BUGGY]  result  =  rhType  ==  n,  lhType  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rhType  ==  n,  lhType  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  n,  lhType  +  1;	  result    =    lhType    ==    n,    rhType    +    1;    	non-compiled	[CE]  	21	None	replace
145	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  left  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  left  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  left  +  1;	  result    =    lhType    ==    n,    rhType    +    1;    	non-compiled	[CE]  	21	None	replace
146	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getRight();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType.getRight();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getRight();	  result    =    lhType    ==    rhType.getName();    	non-compiled	[CE]  	44	None	replace
147	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getLeastSupertype(rh);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType.getLeastSupertype(rh);  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getLeastSupertype(rh);	  result    =    lhType    ==    rhType.getName();    	non-compiled	[CE]  	44	None	replace
148	[BUG]  [BUGGY]  Node  right  =  n.removeFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  right  =  n.removeFirstChild();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  right  =  n.removeFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  	3	None	replace
149	[BUG]  [BUGGY]  result  =  lhType  >=  rhType,  newNode;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  >=  rhType,  newNode;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  >=  rhType,  newNode;	  result    =    lhType    ==    n,    newNode;    	non-compiled	[CE]  	22	None	replace
150	[BUG]  [BUGGY]  =  lhType  ==  n.getType();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  =  lhType  ==  n.getType();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	=  lhType  ==  n.getType();	  =    lhType    ==    rhType;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
151	[BUG]  [BUGGY]  =  lhType!=  rhType;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  =  lhType!=  rhType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	=  lhType!=  rhType;	  =    lhType    ==    rhType;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
152	[BUG]  [BUGGY]  result  =  lhType  ==  Token.NE;  break;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  Token.NE;  break;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  Token.NE;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  	2	None	replace
153	[BUG]  [BUGGY]  result  =  lhPrefix  ==  rhPrefix;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhPrefix  ==  rhPrefix;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhPrefix  ==  rhPrefix;	  result    =    lhClass    ==    n;    	non-compiled	[CE]  	32	None	replace
154	[BUG]  [BUGGY]  result  =  n  <  rhType;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  n  <  rhType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  n  <  rhType;	  result    =    rhType    ==    rhType;    	non-compiled	[CE]  	45	None	replace
155	[BUG]  [BUGGY]  result  =  lhClass  ==  rhType.getType();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhClass  ==  rhType.getType();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhClass  ==  rhType.getType();	  result    =    lhType    >=    rhType.getType();    	non-compiled	[CE]  	43	None	replace
156	[BUG]  [BUGGY]  result  =  lhType  >=  rhType.getLeastSupertype(rh);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  >=  rhType.getLeastSupertype(rh);  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  >=  rhType.getLeastSupertype(rh);	  result    =    lhType    >=    rhType.getType();    	non-compiled	[CE]  	43	None	replace
157	[BUG]  [BUGGY]  result  =  lhType  >>  rhType.getLeastSupertype(rh);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  >>  rhType.getLeastSupertype(rh);  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  >>  rhType.getLeastSupertype(rh);	  result    =    lhType    >=    rhType.getType();    	non-compiled	[CE]  	43	None	replace
158	[BUG]  [BUGGY]  result  =  lhType!=  rhType.getLeastSupertype(rh);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType!=  rhType.getLeastSupertype(rh);  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType!=  rhType.getLeastSupertype(rh);	  result    =    lhType    >=    rhType.getType();    	non-compiled	[CE]  	43	None	replace
159	[BUG]  [BUGGY]  result  =  lhType  >=  rhType.getLeastSupertype(rhType);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  >=  rhType.getLeastSupertype(rhType);  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  >=  rhType.getLeastSupertype(rhType);	  result    =    lhType    >=    rhType.getType();    	non-compiled	[CE]  	43	None	replace
160	[BUG]  [BUGGY]  result  =  n  {  rhType;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  n  {  rhType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  n  {  rhType;	  result    =    rhType    ==    n;    	non-compiled	[CE]  	10	None	replace
161	[BUG]  [BUGGY]  result  =  ln  ==  rhType;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  ln  ==  rhType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  ln  ==  rhType;	  result    =    rhType    ==    n;    	non-compiled	[CE]  	10	None	replace
162	[BUG]  [BUGGY]  result  =  n  ==  lhType  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  n  ==  lhType  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  n  ==  lhType  +  1;	  result    =    lhType    ==    n    +    1;    	non-compiled	[CE]  	11	None	replace
163	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  /  2;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType  /  2;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType  /  2;	  result    =    lhType    ==    rhType    +    2;    	non-compiled	[CE]  	12	None	replace
164	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  *  3;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType  *  3;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType  *  3;	  result    =    lhType    ==    rhType    +    3;    	non-compiled	[CE]  	17	None	replace
165	[BUG]  [BUGGY]  result  =  lhType  >>  rhType  +  2;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  >>  rhType  +  2;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  >>  rhType  +  2;	  result    =    lhType    >>    rhType    +    1;    	non-compiled	[CE]  	14	None	replace
166	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType  &  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType  &  1;	  result    =    lhType    ==    rhType    *    1;    	non-compiled	[CE]  	52	None	replace
167	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  right;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  right;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  right;	  result    =    lhType    ==    rhType,    n;    	non-compiled	[CE]  	23	None	replace
168	[BUG]  [BUGGY]  result  =  lhType  ==  rehType;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rehType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rehType;	  result    =    rhType    ==    NE;    	non-compiled	[CE]  	19	None	replace
169	[BUG]  [BUGGY]  result  =  lhType  ==  dhType;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  dhType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  dhType;	  result    =    rhType    ==    NE;    	non-compiled	[CE]  	19	None	replace
170	[BUG]  [BUGGY]  result  =  lhType  ==  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  n);  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n);	  result    =    rhType    ==    NE;    	non-compiled	[CE]  	19	None	replace
171	[BUG]  [BUGGY]  Node  left  =  n.removeFirst();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  left  =  n.removeFirst();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  left  =  n.removeFirst();	  Node    left    =    n.getNext();    	non-compiled	[CE]  	4	None	replace
172	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  n  =  left.replaceChild(left,  newNode);  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	n  =  left.replaceChild(left,  newNode);	  n    =    left.getFirstChild();    	non-compiled	[CE]  	39	None	replace
173	[BUG]  [BUGGY]  n  =  left.cloneTree();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  n  =  left.cloneTree();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	n  =  left.cloneTree();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	39	None	replace
174	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  NEGATING_A_NON_NUMBER_ERROR;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  NEGATING_A_NON_NUMBER_ERROR;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  NEGATING_A_NON_NUMBER_ERROR;	  result    =    lhType    ==    NE,    rhType;    	non-compiled	[CE]  	40	None	replace
175	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  NEGATING_A_NUMBER_ERROR;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  NEGATING_A_NUMBER_ERROR;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  NEGATING_A_NUMBER_ERROR;	  result    =    lhType    ==    NE,    rhType;    	non-compiled	[CE]  	40	None	replace
176	[BUG]  [BUGGY]  result  =  lhType  ==  nWordType;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  nWordType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  nWordType;	  result    =    lhClass    ==    nType;    	non-compiled	[CE]  	36	None	replace
177	[BUG]  [BUGGY]  result  =  lhType  ==  naNode;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  naNode;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  naNode;	  result    =    lhClass    ==    nType;    	non-compiled	[CE]  	36	None	replace
178	[BUG]  [BUGGY]  result  =  lhType  ==  na;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  na;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  na;	  result    =    lhClass    ==    nType;    	non-compiled	[CE]  	36	None	replace
179	[BUG]  [BUGGY]  result  =  lhType  ==  node.getType();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  node.getType();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  node.getType();	  result    =    rhType    ==    n.getType();    	non-compiled	[CE]  	26	None	replace
180	[BUG]  [BUGGY]  result  =  nhType  ==  rhType;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  nhType  ==  rhType;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  nhType  ==  rhType;	  result    =    rhType!=    n;    	non-compiled	[CE]  	50	None	replace
181	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  right  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  right  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  right  +  1;	  result    =    lhType    ==    n,    rhType    +    1;    	non-compiled	[CE]  	21	None	replace
182	[BUG]  [BUGGY]  Node  left  =  n.removeFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  Node  left  =  n.removeFirstChild();  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  left  =  n.removeFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  	1	None	replace
183	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  new  Node(Token.NE);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  new  Node(Token.NE);  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  new  Node(Token.NE);	  result    =    lhType    ==    rhType,    n);    	non-compiled	[CE]  	41	None	replace
184	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType  ==  rhType,  right);  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  right);	  result    =    lhType    ==    rhType,    n);    	non-compiled	[CE]  	41	None	replace
185	[BUG]  [BUGGY]  result  =  rhType  >>  n;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  rhType  >>  n;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  >>  n;	  result    =    lhType    >>    n;    	non-compiled	[CE]  	47	None	replace
186	[BUG]  [BUGGY]  result  =  lhType!=  rhClass;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhType!=  rhClass;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType!=  rhClass;	  result    =    rhType    ==    lhClass;    	non-compiled	[CE]  	31	None	replace
187	[BUG]  [BUGGY]  result  =  lhtype  ==  rhType  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:      [BUGGY]  result  =  lhtype  ==  rhType  +  1;  [BUGGY]      break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhtype  ==  rhType  +  1;	  result    =    rhType!=    lhType    +    1;    	non-compiled	[CE]  	13	None	replace
