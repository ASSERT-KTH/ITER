bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  Node  left  =  n.getFirstChild();  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  left  =  n.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
2	[BUG]  [BUGGY]  result  =  lhType  ==  rhType;  break;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  ==  rhType;  break;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType;  break;	      	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  right  =  n.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
4	[BUG]  [BUGGY]  Node  left  =  n.getNext();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  Node  left  =  n.getNext();  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  left  =  n.getNext();	      	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]  Node  left  =  right.getNext();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  Node  left  =  right.getNext();  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Node  left  =  right.getNext();	      	non-compiled	[CE]  	7	None	replace
6	[BUG]  [BUGGY]  n  =  left.getNext();  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  n  =  left.getNext();  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	n  =  left.getNext();	      	non-compiled	[CE]  	7	None	replace
7	[BUG]  [BUGGY]  result  =  rhType  ==  lh;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  rhType  ==  lh;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  lh;	  result    =    lhType    ==    n;    	non-compiled	[CE]  	2	None	replace
8	[BUG]  [BUGGY]  result  =  rhType  ==  lhType;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  rhType  ==  lhType;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  lhType;	  result    =    lhType    ==    n;    	non-compiled	[CE]  	2	None	replace
9	[BUG]  [BUGGY]  result  =  lhType  >=  rhType;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  >=  rhType;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  >=  rhType;	  result    =    lhType    ==    n;    	non-compiled	[CE]  	2	None	replace
10	[BUG]  [BUGGY]  result  =  rhType  ==  n;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  rhType  ==  n;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  n;	  result    =    lhType    ==    n;    	non-compiled	[CE]  	2	None	replace
11	[BUG]  [BUGGY]  result  =  lhType  ==  n  +  1;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  ==  n  +  1;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n  +  1;	  result    =    lhType!=    rhType    +    1;    	non-compiled	[CE]  	12	None	replace
12	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  2;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  ==  rhType  +  2;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType  +  2;	  result    =    lhType!=    rhType    +    1;    	non-compiled	[CE]  	12	None	replace
13	[BUG]  [BUGGY]  result  =  rhType!=  lhType  +  1;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  rhType!=  lhType  +  1;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType!=  lhType  +  1;	  result    =    lhType!=    rhType    +    1;    	non-compiled	[CE]  	12	None	replace
14	[BUG]  [BUGGY]  result  =  lhType  >>  rhType  +  1;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  >>  rhType  +  1;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  >>  rhType  +  1;	  result    =    lhType!=    rhType    +    1;    	non-compiled	[CE]  	12	None	replace
15	[BUG]  [BUGGY]  result  =  lhType  >=  rhType  +  1;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  >=  rhType  +  1;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  >=  rhType  +  1;	  result    =    lhType!=    rhType    +    1;    	non-compiled	[CE]  	12	None	replace
16	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  +  1;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  rhType  ==  lhType  +  1;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  lhType  +  1;	  result    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  	3	None	replace
17	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  3;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  ==  rhType  +  3;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType  +  3;	  result    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  	3	None	replace
18	[BUG]  [BUGGY]  result  =  lhType  ==  n.type;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  ==  n.type;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n.type;	  result    =    lhType    ==    rhType;    	non-compiled	[CE]  	1	None	replace
19	[BUG]  [BUGGY]  result  =  rhType  ==  NE;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  rhType  ==  NE;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  NE;	  result    =    lhType    ==    NE;    	non-compiled	[CE]  	8	None	replace
20	[BUG]  [BUGGY]  result  =  lhType  {  rhType;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  {  rhType;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  {  rhType;	  result    =    lhType    ==    NE;    	non-compiled	[CE]  	8	None	replace
21	[BUG]  [BUGGY]  result  =  lhType  ==  n,  rhType  +  1;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  ==  n,  rhType  +  1;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n,  rhType  +  1;	  result    =    lhType    ==    n,    rhType;    	non-compiled	[CE]  	5	None	replace
22	[BUG]  [BUGGY]  result  =  lhType  ==  n,  newNode;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  ==  n,  newNode;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  n,  newNode;	  result    =    lhType    ==    n,    rhType;    	non-compiled	[CE]  	5	None	replace
23	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  n;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  ==  rhType,  n;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  n;	  result    =    lhType    ==    n,    rhType;    	non-compiled	[CE]  	5	None	replace
24	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  ln;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  ==  rhType,  ln;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  ln;	  result    =    lhType    ==    n,    rhType;    	non-compiled	[CE]  	5	None	replace
25	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getType();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  ==  rhType.getType();  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getType();	  result    =    lhType    ==    n.getType();    	non-compiled	[CE]  	9	None	replace
26	[BUG]  [BUGGY]  result  =  rhType  ==  n.getType();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  rhType  ==  n.getType();  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  n.getType();	  result    =    lhType    ==    n.getType();    	non-compiled	[CE]  	9	None	replace
27	[BUG]  [BUGGY]  result  =  rhType  ==  lhType.getType();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  rhType  ==  lhType.getType();  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  lhType.getType();	  result    =    lhType    ==    n.getType();    	non-compiled	[CE]  	9	None	replace
28	[BUG]  [BUGGY]  result  =  lhType!=  rhType.getType();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType!=  rhType.getType();  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType!=  rhType.getType();	  result    =    lhType    ==    n.getType();    	non-compiled	[CE]  	9	None	replace
29	[BUG]  [BUGGY]  result  =  n  ==  lhType.getType();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  n  ==  lhType.getType();  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  n  ==  lhType.getType();	  result    =    lhType    ==    n.getType();    	non-compiled	[CE]  	9	None	replace
30	[BUG]  [BUGGY]  result  =  lhtype  ==  rhType;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhtype  ==  rhType;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhtype  ==  rhType;	  result    =    rhType!=    lhType;    	non-compiled	[CE]  	4	None	replace
31	[BUG]  [BUGGY]  result  =  rhType  ==  lhClass;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  rhType  ==  lhClass;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  lhClass;	  result    =    lhClass    ==    rhType;    	non-compiled	[CE]  	10	None	replace
32	[BUG]  [BUGGY]  result  =  lhClass  ==  n;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhClass  ==  n;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhClass  ==  n;	  result    =    lhClass    ==    rhType;    	non-compiled	[CE]  	10	None	replace
33	[BUG]  [BUGGY]  result  =  lhClass  ==  rhType  +  1;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhClass  ==  rhType  +  1;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhClass  ==  rhType  +  1;	  result    =    lhClass    ==    rhType;    	non-compiled	[CE]  	10	None	replace
34	[BUG]  [BUGGY]  result  =  rhType!=  lh;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  rhType!=  lh;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType!=  lh;	  result    =    lhType!=    n;    	non-compiled	[CE]  	6	None	replace
35	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  4;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  ==  rhType  +  4;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType  +  4;	  result    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  	3	None	replace
36	[BUG]  [BUGGY]  result  =  lhClass  ==  nType;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhClass  ==  nType;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhClass  ==  nType;	  result    =    lhClass    ==    rhType;    	non-compiled	[CE]  	10	None	replace
37	[BUG]  [BUGGY]  result  =  rhType  >>  lhType;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  rhType  >>  lhType;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  >>  lhType;	  result    =    lhType    >>    rhType;    	non-compiled	[CE]  	11	None	replace
38	[BUG]  [BUGGY]  Result  =  lhType  ==  rhType;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  Result  =  lhType  ==  rhType;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	Result  =  lhType  ==  rhType;	      	non-compiled	[CE]  	7	None	replace
39	[BUG]  [BUGGY]  n  =  left.getFirstChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  n  =  left.getFirstChild();  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	n  =  left.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
40	[BUG]  [BUGGY]  result  =  lhType  ==  NE,  rhType;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  ==  NE,  rhType;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  NE,  rhType;	  result    =    lhType    ==    n,    rhType;    	non-compiled	[CE]  	5	None	replace
41	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  n);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  ==  rhType,  n);  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType,  n);	  result    =    lhType    ==    n,    rhType;    	non-compiled	[CE]  	5	None	replace
42	[BUG]  [BUGGY]  result  =  lhType  >>  rhType.getType();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  >>  rhType.getType();  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  >>  rhType.getType();	  result    =    lhType    ==    n.getType();    	non-compiled	[CE]  	9	None	replace
43	[BUG]  [BUGGY]  result  =  lhType  >=  rhType.getType();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  >=  rhType.getType();  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  >=  rhType.getType();	  result    =    lhType    ==    n.getType();    	non-compiled	[CE]  	9	None	replace
44	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getName();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  ==  rhType.getName();  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getName();	  result    =    lhType    ==    n.getType();    	non-compiled	[CE]  	9	None	replace
45	[BUG]  [BUGGY]  result  =  rhType  ==  rhType;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  rhType  ==  rhType;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType  ==  rhType;	  result    =    rhType!=    lhType;    	non-compiled	[CE]  	4	None	replace
46	[BUG]  [BUGGY]  result  =  lhType  ==  Token.NE;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  ==  Token.NE;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  Token.NE;	  result    =    lhType    ==    rhType;    	non-compiled	[CE]  	1	None	replace
47	[BUG]  [BUGGY]  result  =  lhType  >>  n;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  >>  n;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  >>  n;	  result    =    lhType    >>    rhType;    	non-compiled	[CE]  	11	None	replace
48	[BUG]  [BUGGY]  result  =  n  ==  lhType;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  n  ==  lhType;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  n  ==  lhType;	  result    =    lhType    ==    n;    	non-compiled	[CE]  	2	None	replace
49	[BUG]  [BUGGY]  =  lhType  ==  rhType;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  =  lhType  ==  rhType;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	=  lhType  ==  rhType;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
50	[BUG]  [BUGGY]  result  =  rhType!=  n;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  rhType!=  n;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  rhType!=  n;	  result    =    lhType!=    n;    	non-compiled	[CE]  	6	None	replace
51	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getInstanceType();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  ==  rhType.getInstanceType();  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType.getInstanceType();	  result    =    lhType    ==    n.getType();    	non-compiled	[CE]  	9	None	replace
52	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  *  1;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:    [BUGGY]  result  =  lhType  ==  rhType  *  1;  [BUGGY]    break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	940	940	3	replace	result  =  lhType  ==  rhType  *  1;	  result    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  	3	None	replace
