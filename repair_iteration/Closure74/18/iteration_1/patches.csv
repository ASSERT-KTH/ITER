bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op);  break;  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(right,  op);  break;  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  op);  break;	  return    result;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	1	None	replace
2	[BUG]  [BUGGY]  return  result.booleanValue();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  return  result.booleanValue();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result.booleanValue();//  Only  eval  if  they  are  the  same  type  }	  return    result;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	1	None	replace
3	[BUG]  [BUGGY]  return  result  ||  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  return  result  ||  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result  ||  Only  eval  if  they  are  the  same  type  }	  return    result;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	1	None	replace
4	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right);  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(n,  right);  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(n,  right);	  result    =    compareToUndefined(right,    right);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
5	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft);  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft);  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  undefinedLeft);	  result    =    compareToUndefined(right,    right);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
6	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  right);  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(op,  right);  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(op,  right);	  result    =    compareToUndefined(right,    right);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
7	[BUG]  [BUGGY]  result  =  compareToUndefined(newNode,  right);  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(newNode,  right);  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(newNode,  right);	  result    =    compareToUndefined(right,    right);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
8	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  right);  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(lh,  right);  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(lh,  right);	  result    =    compareToUndefined(right,    right);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
9	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
10	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
11	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  result;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
12	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
13	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
14	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
15	[BUG]  [BUGGY]  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
16	[BUG]  [BUGGY]  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
17	[BUG]  [BUGGY]  Node  newNode  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  Node  newNode  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  newNode  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
18	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
19	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  Node  right  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  right  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
20	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  Node  right  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  right  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
21	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  n.getFirstChild());//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(right,  n.getFirstChild());//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  n.getFirstChild());//  Only  eval  if  they  are  the  same  type  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
22	[BUG]  [BUGGY]  return  left.getString();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  return  left.getString();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  left.getString();//  Only  eval  if  they  are  the  same  type  }	  return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	4	None	replace
23	[BUG]  [BUGGY]  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  left.getType();//  Only  eval  if  they  are  the  same  type  }	  return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	4	None	replace
24	[BUG]  [BUGGY]  return  right;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  return  right;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  right;//  Only  eval  if  they  are  the  same  type  }	  return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	4	None	replace
25	[BUG]  [BUGGY]  n  =  right.getType();  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  n  =  right.getType();  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  right.getType();	  if(right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	10	None	replace
26	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  result;  }  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  result;  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  result;  }	  if(right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	10	None	replace
27	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;  }	  if(right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	10	None	replace
28	[BUG]  [BUGGY]  n  =  right.getString();  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  n  =  right.getString();  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  right.getString();	  if(right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	10	None	replace
29	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n;  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n;  }	  if(right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	10	None	replace
30	[BUG]  [BUGGY]  ||  right.getType()  ==  Token.NAME)  {  return  n;  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  ||  right.getType()  ==  Token.NAME)  {  return  n;  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	||  right.getType()  ==  Token.NAME)  {  return  n;  }	  if(right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	10	None	replace
31	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n);  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(left,  n);  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  n);	  result    =    compareToUndefined(right,    n);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
32	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op);  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(left,  op);  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  op);	  result    =    compareToUndefined(right,    n);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
33	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left);  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(right,  left);  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  left);	  result    =    compareToUndefined(right,    n);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
34	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  newNode);  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(right,  newNode);  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  newNode);	  result    =    compareToUndefined(right,    n);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
35	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedLeft);  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedLeft);  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  op,  undefinedLeft);	  result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  case,  default,  or  	2	None	replace
36	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  op);  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(n,  op);  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(n,  op);	  result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  case,  default,  or  	2	None	replace
37	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.getType());  break;  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(right,  right.getType());  break;  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  right.getType());  break;	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
38	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right);  break;  [CE]  case,  default,  or  [FE]                        AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(right,  right);  break;  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  right);  break;	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
39	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getType());  break;  [CE]  case,  default,  or  [FE]                          AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(left,  right.getType());  break;  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  right.getType());  break;	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
40	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op);  break;  [CE]  case,  default,  or  [FE]                            AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(left,  op);  break;  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  op);  break;	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
41	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft);  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft);  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  undefinedLeft);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
42	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left);  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(n,  left);  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(n,  left);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
43	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getType());  [CE]  case,  default,  or  [FE]                        AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(left,  right.getType());  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  right.getType());	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
44	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getString());  [CE]  case,  default,  or  [FE]                          AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(left,  left.getString());  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  left.getString());	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
45	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op.getType());  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(right,  op.getType());  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  op.getType());	  result    =    compareToUndefined(right,    right.getType());    	non-compiled	[CE]  case,  default,  or  	6	None	replace
46	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right.getType());  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(n,  right.getType());  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(n,  right.getType());	  result    =    compareToUndefined(right,    right.getType());    	non-compiled	[CE]  case,  default,  or  	6	None	replace
47	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.getType());  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(right,  left.getType());  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  left.getType());	  result    =    compareToUndefined(right,    right.getType());    	non-compiled	[CE]  case,  default,  or  	6	None	replace
48	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  right.getType());  [CE]  case,  default,  or  [FE]                        AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(op,  right.getType());  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(op,  right.getType());	  result    =    compareToUndefined(right,    right.getType());    	non-compiled	[CE]  case,  default,  or  	6	None	replace
49	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  right.getType());  [CE]  case,  default,  or  [FE]                          AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(lh,  right.getType());  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(lh,  right.getType());	  result    =    compareToUndefined(right,    right.getType());    	non-compiled	[CE]  case,  default,  or  	6	None	replace
50	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  Node  left  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  left  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
51	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  n.getFirstChild();  }  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  n.getFirstChild();  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  n.getFirstChild();  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
52	[BUG]  [BUGGY]  Node  eval  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  Node  eval  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  eval  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
53	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  n;  }  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  n;  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME)  {  return  n;  }	  if(right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	10	None	replace
54	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  n;  }  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  n;  }	  if(right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	10	None	replace
55	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  n;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  n;  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  n;  }	  if(right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	10	None	replace
56	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op.getName());  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(right,  op.getName());  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  op.getName());	  result    =    compareToUndefined(right,    right.getType());    	non-compiled	[CE]  case,  default,  or  	6	None	replace
57	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op.getValue());  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(right,  op.getValue());  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  op.getValue());	  result    =    compareToUndefined(right,    right.getType());    	non-compiled	[CE]  case,  default,  or  	6	None	replace
58	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left);  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(left,  left);  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  left);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
59	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedLeft);  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedLeft);  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  right,  undefinedLeft);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
60	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  op);  [CE]  case,  default,  or  [FE]                        AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(left,  right,  op);  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  right,  op);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
61	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right);  break;  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(left,  right);  break;  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  right);  break;	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
62	[BUG]  [BUGGY]  return  result  &&  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  return  result  &&  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result  &&  Only  eval  if  they  are  the  same  type  }	  return    result;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	1	None	replace
63	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
64	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
65	[BUG]  [BUGGY]  n  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  n  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
66	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
67	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  n.getFirstChild();  }  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  n.getFirstChild();  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME)  {  return  n.getFirstChild();  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
68	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.getString());  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(right,  right.getString());  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  right.getString());	  result    =    compareToUndefined(right,    right.getType());    	non-compiled	[CE]  case,  default,  or  	6	None	replace
69	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  n);  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(op,  n);  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(op,  n);	  result    =    compareToUndefined(right,    n);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
70	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  left.getString());  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(right,  op,  left.getString());  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  op,  left.getString());	  result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  case,  default,  or  	2	None	replace
71	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  left);  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(right,  op,  left);  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  op,  left);	  result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  case,  default,  or  	2	None	replace
72	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.CALL)  {  return  n;  }  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.CALL)  {  return  n;  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.CALL)  {  return  n;  }	  if(right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	10	None	replace
73	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getString());  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(left,  right.getString());  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  right.getString());	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
74	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  left);  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(op,  left);  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(op,  left);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
75	[BUG]  [BUGGY]  return  result;//  Only  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  return  result;//  Only  if  they  are  the  same  type  }  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result;//  Only  if  they  are  the  same  type  }	  return    result;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	1	None	replace
76	[BUG]  [BUGGY]  n  =  left.getFirstChild();  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {    [BUGGY]  n  =  left.getFirstChild();  [BUGGY]    }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  left.getFirstChild();	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
