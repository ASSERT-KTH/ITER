bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  n;//  Only  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  n;//  Only  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  n;//  Only  if  they  are  the  same  type  }	  return    result;//    Only    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	75	None	replace
2	[BUG]  [BUGGY]  return  left;//  Only  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  left;//  Only  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  left;//  Only  if  they  are  the  same  type  }	  return    result;//    Only    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	75	None	replace
3	[BUG]  [BUGGY]  return  left.getType();//  Only  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  left.getType();//  Only  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  left.getType();//  Only  if  they  are  the  same  type  }	  return    result;//    Only    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	75	None	replace
4	[BUG]  [BUGGY]  return  result.booleanValue();//  Only  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  result.booleanValue();//  Only  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result.booleanValue();//  Only  if  they  are  the  same  type  }	  return    result;//    Only    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	75	None	replace
5	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.getString());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  left.getString());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  left.getString());	  result    =    compareToUndefined(left,    right.getString());    	non-compiled	[CE]  case,  default,  or  	73	None	replace
6	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op.getString());  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  op.getString());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  op.getString());	  result    =    compareToUndefined(left,    right.getString());    	non-compiled	[CE]  case,  default,  or  	73	None	replace
7	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right.getString());  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(n,  right.getString());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(n,  right.getString());	  result    =    compareToUndefined(left,    right.getString());    	non-compiled	[CE]  case,  default,  or  	73	None	replace
8	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getString(),  undefinedLeft);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right.getString(),  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  right.getString(),  undefinedLeft);	  result    =    compareToUndefined(left,    right.getString());    	non-compiled	[CE]  case,  default,  or  	73	None	replace
9	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedLeft,  op);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(undefinedLeft,  op);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(undefinedLeft,  op);	  result    =    compareToUndefined(op,    n);    	non-compiled	[CE]  case,  default,  or  	69	None	replace
10	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  op);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  comparisonToUndefined(right,  op);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  comparisonToUndefined(right,  op);	  result    =    compareToUndefined(op,    n);    	non-compiled	[CE]  case,  default,  or  	69	None	replace
11	[BUG]  [BUGGY]  result  =  comparatToUndefined(right,  op);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  comparatToUndefined(right,  op);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  comparatToUndefined(right,  op);	  result    =    compareToUndefined(op,    n);    	non-compiled	[CE]  case,  default,  or  	69	None	replace
12	[BUG]  [BUGGY]  Result  result  =  compareToUndefined(right,  op);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Result  result  =  compareToUndefined(right,  op);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Result  result  =  compareToUndefined(right,  op);	  result    =    compareToUndefined(op,    n);    	non-compiled	[CE]  case,  default,  or  	69	None	replace
13	[BUG]  [BUGGY]  result  =  compareToUndefined(right.getString(),  op);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right.getString(),  op);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right.getString(),  op);	  result    =    compareToUndefined(n,    op);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
14	[BUG]  [BUGGY]  n  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  n  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  n    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	65	None	replace
15	[BUG]  [BUGGY]  n  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  n  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  n    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	65	None	replace
16	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  n  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  n  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  n    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	65	None	replace
17	[BUG]  [BUGGY]  n  =  left.getNext();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  n  =  left.getNext();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  left.getNext();//  Only  eval  if  they  are  the  same  type  }	  n    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	65	None	replace
18	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  left  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  left  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  n    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	65	None	replace
19	[BUG]  [BUGGY]  n  =  left.getType();  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  n  =  left.getType();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  left.getType();	  n    =    right.getType();    	non-compiled	[CE]  case,  default,  or  	25	None	replace
20	[BUG]  [BUGGY]  n  =  right.getType()  ||  Token.NAME.equals(right.getString());  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  n  =  right.getType()  ||  Token.NAME.equals(right.getString());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  right.getType()  ||  Token.NAME.equals(right.getString());	  n    =    right.getType();    	non-compiled	[CE]  case,  default,  or  	25	None	replace
21	[BUG]  [BUGGY]  n  =  right.getType()  +  1;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  n  =  right.getType()  +  1;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  right.getType()  +  1;	  n    =    right.getType();    	non-compiled	[CE]  case,  default,  or  	25	None	replace
22	[BUG]  [BUGGY]  n  =  right.getType()  ||  token.NAME.equals(right.getString());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  n  =  right.getType()  ||  token.NAME.equals(right.getString());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  right.getType()  ||  token.NAME.equals(right.getString());	  n    =    right.getType();    	non-compiled	[CE]  case,  default,  or  	25	None	replace
23	[BUG]  [BUGGY]  n  =  right.getType()  ||  Token.NAME.equals(left.getString());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  n  =  right.getType()  ||  Token.NAME.equals(left.getString());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  right.getType()  ||  Token.NAME.equals(left.getString());	  n    =    right.getType();    	non-compiled	[CE]  case,  default,  or  	25	None	replace
24	[BUG]  [BUGGY]  n  =  right.getType()  ||(right.getString().equals( "name "));  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  n  =  right.getType()  ||(right.getString().equals( "name "));  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  right.getType()  ||(right.getString().equals( "name "));	  n    =    right.getType();    	non-compiled	[CE]  case,  default,  or  	25	None	replace
25	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedLeft);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  op,  undefinedLeft);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	32	None	replace
26	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getType());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  left.getType());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  left.getType());	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	32	None	replace
27	[BUG]  [BUGGY]  Node  right  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  right  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  right  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  Node    right    =    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	19	None	replace
28	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  right  =  n.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  right  =  n.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  Node    right    =    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	19	None	replace
29	[BUG]  [BUGGY]  Node  right  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  right  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  right  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  Node    right    =    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	19	None	replace
30	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  right  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  right  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  Node    right    =    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	19	None	replace
31	[BUG]  [BUGGY]  Node  right  =  node.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  right  =  node.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  right  =  node.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  Node    right    =    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	19	None	replace
32	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right.getType());  break;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(n,  right.getType());  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(n,  right.getType());  break;	  result    =    compareToUndefined(right,    right.getType());    break;    	non-compiled	[CE]  case,  default,  or  	37	None	replace
33	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op.getType());  break;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  op.getType());  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  op.getType());  break;	  result    =    compareToUndefined(right,    right.getType());    break;    	non-compiled	[CE]  case,  default,  or  	37	None	replace
34	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.getType());  break;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  left.getType());  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  left.getType());  break;	  result    =    compareToUndefined(right,    right.getType());    break;    	non-compiled	[CE]  case,  default,  or  	37	None	replace
35	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  right.getType());  break;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(op,  right.getType());  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(op,  right.getType());  break;	  result    =    compareToUndefined(right,    right.getType());    break;    	non-compiled	[CE]  case,  default,  or  	37	None	replace
36	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  right.getType());  break;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(lh,  right.getType());  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(lh,  right.getType());  break;	  result    =    compareToUndefined(right,    right.getType());    break;    	non-compiled	[CE]  case,  default,  or  	37	None	replace
37	[BUG]  [BUGGY]  return  result  &&  Only  eval  if  they  are  the  same  type,  default,  or  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  result  &&  Only  eval  if  they  are  the  same  type,  default,  or  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result  &&  Only  eval  if  they  are  the  same  type,  default,  or	  return    result    &&    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	62	None	replace
38	[BUG]  [BUGGY]  return  result  &&  Only  eval  if  they  are  the  same  type,  undefinedLeft  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  result  &&  Only  eval  if  they  are  the  same  type,  undefinedLeft  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result  &&  Only  eval  if  they  are  the  same  type,  undefinedLeft  }	  return    result    &&    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	62	None	replace
39	[BUG]  [BUGGY]  return  result  &&  Only  eval  if  they  are  the  same  type,  undefinedLeft;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  result  &&  Only  eval  if  they  are  the  same  type,  undefinedLeft;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result  &&  Only  eval  if  they  are  the  same  type,  undefinedLeft;	  return    result    &&    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	62	None	replace
40	[BUG]  [BUGGY]  return  result  &&  Only  eval  if  they  are  the  same  type,  undefinedLeft  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  result  &&  Only  eval  if  they  are  the  same  type,  undefinedLeft  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result  &&  Only  eval  if  they  are  the  same  type,  undefinedLeft	  return    result    &&    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	62	None	replace
41	[BUG]  [BUGGY]  return  result  &&  Only  eval  if  they  are  the  same  type,  undefinedLeft);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  result  &&  Only  eval  if  they  are  the  same  type,  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result  &&  Only  eval  if  they  are  the  same  type,  undefinedLeft);	  return    result    &&    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	62	None	replace
42	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedLeft);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  left,  undefinedLeft);	  result    =    compareToUndefined(right,    left);    	non-compiled	[CE]  case,  default,  or  	33	None	replace
43	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op.getType());  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  op.getType());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  op.getType());	  result    =    compareToUndefined(left,    right.getType());    	non-compiled	[CE]  case,  default,  or  	43	None	replace
44	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getType(),  undefinedLeft);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right.getType(),  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  right.getType(),  undefinedLeft);	  result    =    compareToUndefined(left,    right.getType());    	non-compiled	[CE]  case,  default,  or  	43	None	replace
45	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	13	None	replace
46	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	13	None	replace
47	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  result;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	13	None	replace
48	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	13	None	replace
49	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.NAME)  {  return  n;  }  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.NAME)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.NAME)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	13	None	replace
50	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	13	None	replace
51	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	18	None	replace
52	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	18	None	replace
53	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(n.getType()  ==  Token.NAME)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	18	None	replace
54	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	18	None	replace
55	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	18	None	replace
56	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  left.getFirstChild();  }  else  if(right.getType()  ==  Token.FUNCTION)  {  return  right.getFirstChild();  }  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  left.getFirstChild();  }  else  if(right.getType()  ==  Token.FUNCTION)  {  return  right.getFirstChild();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  left.getFirstChild();  }  else  if(right.getType()  ==  Token.FUNCTION)  {  return  right.getFirstChild();  }	  if(right.getType()    ==    Token.NAME)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	18	None	replace
57	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left,  undefinedLeft);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(n,  left,  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(n,  left,  undefinedLeft);	  result    =    compareToUndefined(n,    left);    	non-compiled	[CE]  case,  default,  or  	42	None	replace
58	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  right.getString());  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  op,  right.getString());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  op,  right.getString());	  result    =    compareToUndefined(right,    op,    left.getString());    	non-compiled	[CE]  case,  default,  or  	70	None	replace
59	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  right.getString());  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  left,  right.getString());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  left,  right.getString());	  result    =    compareToUndefined(right,    op,    left.getString());    	non-compiled	[CE]  case,  default,  or  	70	None	replace
60	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  left.getString());  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  left.getString());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  undefinedLeft,  left.getString());	  result    =    compareToUndefined(right,    op,    left.getString());    	non-compiled	[CE]  case,  default,  or  	70	None	replace
61	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left);  break;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  left);  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  left);  break;	  result    =    compareToUndefined(left,    right);    break;    	non-compiled	[CE]  case,  default,  or  	61	None	replace
62	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right);  break;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(n,  right);  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(n,  right);  break;	  result    =    compareToUndefined(left,    right);    break;    	non-compiled	[CE]  case,  default,  or  	61	None	replace
63	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left);  break;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(n,  left);  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(n,  left);  break;	  result    =    compareToUndefined(left,    right);    break;    	non-compiled	[CE]  case,  default,  or  	61	None	replace
64	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft);  break;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft);  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  undefinedLeft);  break;	  result    =    compareToUndefined(left,    right);    break;    	non-compiled	[CE]  case,  default,  or  	61	None	replace
65	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  left);  break;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(op,  left);  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(op,  left);  break;	  result    =    compareToUndefined(left,    right);    break;    	non-compiled	[CE]  case,  default,  or  	61	None	replace
66	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(n.getType()!=  Token.NAME)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(n.getType()!=  Token.NAME)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()!=    Token.NAME)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	66	None	replace
67	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()!=    Token.NAME)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	66	None	replace
68	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()!=  Token.NAME)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()!=  Token.NAME)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()!=    Token.NAME)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	66	None	replace
69	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.getValue());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  right.getValue());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  right.getValue());	  result    =    compareToUndefined(right,    op.getValue());    	non-compiled	[CE]  case,  default,  or  	57	None	replace
70	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op.getValue());  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  op.getValue());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  op.getValue());	  result    =    compareToUndefined(right,    op.getValue());    	non-compiled	[CE]  case,  default,  or  	57	None	replace
71	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getValue());  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right.getValue());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  right.getValue());	  result    =    compareToUndefined(right,    op.getValue());    	non-compiled	[CE]  case,  default,  or  	57	None	replace
72	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.getValue());  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  left.getValue());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  left.getValue());	  result    =    compareToUndefined(right,    op.getValue());    	non-compiled	[CE]  case,  default,  or  	57	None	replace
73	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  result;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  result;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  result;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	54	None	replace
74	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.GETELEM)  {  return  n;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.GETELEM)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	54	None	replace
75	[BUG]  [BUGGY]  ||  right.getType()  ==  Token.GETELEM)  {  return  n;  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  ||  right.getType()  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	||  right.getType()  ==  Token.GETELEM)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	54	None	replace
76	[BUG]  [BUGGY]  ||  right.getType()  ==  Token.GETELEM)  {  return  n;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  ||  right.getType()  ==  Token.GETELEM)  {  return  n;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	||  right.getType()  ==  Token.GETELEM)  {  return  n;	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	54	None	replace
77	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  return  result;  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  return  result;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  return  result;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	54	None	replace
78	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  result;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  result;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  result;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	27	None	replace
79	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.FUNCTION)  {  return  n;  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.FUNCTION)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	27	None	replace
80	[BUG]  [BUGGY]  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	||  right.getType()  ==  Token.FUNCTION)  {  return  n;	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	27	None	replace
81	[BUG]  [BUGGY]  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	||  right.getType()  ==  Token.FUNCTION)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	27	None	replace
82	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedRight);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedRight);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  op,  undefinedRight);	  result    =    compareToUndefined(right,    op,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	35	None	replace
83	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  rightLiteral,  undefinedLeft);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  rightLiteral,  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  rightLiteral,  undefinedLeft);	  result    =    compareToUndefined(right,    op,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	35	None	replace
84	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right,  undefinedLeft);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  right,  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  right,  undefinedLeft);	  result    =    compareToUndefined(left,    right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	59	None	replace
85	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right,  undefinedLeft);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(n,  right,  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(n,  right,  undefinedLeft);	  result    =    compareToUndefined(left,    right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	59	None	replace
86	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left,  undefinedLeft);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  left,  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  left,  undefinedLeft);	  result    =    compareToUndefined(left,    right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	59	None	replace
87	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  lh.getType());  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  lh.getType());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  lh.getType());	  result    =    compareToUndefined(lh,    right.getType());    	non-compiled	[CE]  case,  default,  or  	49	None	replace
88	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  op.getType());  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(lh,  op.getType());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(lh,  op.getType());	  result    =    compareToUndefined(lh,    right.getType());    	non-compiled	[CE]  case,  default,  or  	49	None	replace
89	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  left.getType());  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(lh,  left.getType());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(lh,  left.getType());	  result    =    compareToUndefined(lh,    right.getType());    	non-compiled	[CE]  case,  default,  or  	49	None	replace
90	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  right.getType(),  undefinedLeft);  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(lh,  right.getType(),  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(lh,  right.getType(),  undefinedLeft);	  result    =    compareToUndefined(lh,    right.getType());    	non-compiled	[CE]  case,  default,  or  	49	None	replace
91	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op.getString());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  op.getString());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  op.getString());	  result    =    compareToUndefined(right,    right.getString());    	non-compiled	[CE]  case,  default,  or  	68	None	replace
92	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  right.getString());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(op,  right.getString());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(op,  right.getString());	  result    =    compareToUndefined(right,    right.getString());    	non-compiled	[CE]  case,  default,  or  	68	None	replace
93	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  rightLiteral.getType());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  rightLiteral.getType());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  rightLiteral.getType());	  result    =    compareToUndefined(right,    op.getType());    	non-compiled	[CE]  case,  default,  or  	45	None	replace
94	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  newNode);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  newNode);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  newNode);	  result    =    compareToUndefined(right,    newNode);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
95	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  newNode);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(n,  newNode);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(n,  newNode);	  result    =    compareToUndefined(right,    newNode);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
96	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  newNode,  undefinedLeft);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  newNode,  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  newNode,  undefinedLeft);	  result    =    compareToUndefined(right,    newNode);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
97	[BUG]  [BUGGY]  result  =  result.booleanValue();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  result.booleanValue();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  result.booleanValue();//  Only  eval  if  they  are  the  same  type  }	  return    result.booleanValue();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	2	None	replace
98	[BUG]  [BUGGY]  return  right.booleanValue();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  right.booleanValue();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  right.booleanValue();//  Only  eval  if  they  are  the  same  type  }	  return    result.booleanValue();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	2	None	replace
99	[BUG]  [BUGGY]  result  =  right.booleanValue();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  right.booleanValue();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  right.booleanValue();//  Only  eval  if  they  are  the  same  type  }	  return    result.booleanValue();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	2	None	replace
100	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  result.booleanValue();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  result.booleanValue();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  result.booleanValue();//  Only  eval  if  they  are  the  same  type  }	  return    result.booleanValue();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	2	None	replace
101	[BUG]  [BUGGY]  eval  =  result.booleanValue();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  eval  =  result.booleanValue();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	eval  =  result.booleanValue();//  Only  eval  if  they  are  the  same  type  }	  return    result.booleanValue();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	2	None	replace
102	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  result.booleanValue();  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  result.booleanValue();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  result.booleanValue();  }	  return    result.booleanValue();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	2	None	replace
103	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  undefinedLeft);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(n,  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(n,  undefinedLeft);	  result    =    compareToUndefined(right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
104	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  undefinedLeft);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(op,  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(op,  undefinedLeft);	  result    =    compareToUndefined(right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
105	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  op);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  op);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  undefinedLeft,  op);	  result    =    compareToUndefined(right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
106	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  undefinedLeft);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(lh,  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(lh,  undefinedLeft);	  result    =    compareToUndefined(right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
107	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.CALL)  {  return  result;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.CALL)  {  return  result;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.CALL)  {  return  result;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.CALL)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	72	None	replace
108	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.CALL)  {  return  n;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.CALL)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.CALL)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.CALL)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	72	None	replace
109	[BUG]  [BUGGY]  ||  right.getType()  ==  Token.CALL)  {  return  n;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  ||  right.getType()  ==  Token.CALL)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	||  right.getType()  ==  Token.CALL)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.CALL)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	72	None	replace
110	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.CALL)  {  return  result;  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.CALL)  {  return  result;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.CALL)  {  return  result;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.CALL)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	72	None	replace
111	[BUG]  [BUGGY]  return  result  ||  Only  eval  if  they  are  the  same  type,  undefinedLeft  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  result  ||  Only  eval  if  they  are  the  same  type,  undefinedLeft  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result  ||  Only  eval  if  they  are  the  same  type,  undefinedLeft  }	  return    result    ||    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	3	None	replace
112	[BUG]  [BUGGY]  return  result  ||  Only  eval  if  they  are  the  same  type,  undefinedLeft  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  result  ||  Only  eval  if  they  are  the  same  type,  undefinedLeft  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result  ||  Only  eval  if  they  are  the  same  type,  undefinedLeft	  return    result    ||    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	3	None	replace
113	[BUG]  [BUGGY]  result  ||  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  ||  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  ||  Only  eval  if  they  are  the  same  type  }	  return    result    ||    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	3	None	replace
114	[BUG]  [BUGGY]  return  result  ||  Only  eval  if  they  are  the  same  type,  undefinedLeft);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  result  ||  Only  eval  if  they  are  the  same  type,  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result  ||  Only  eval  if  they  are  the  same  type,  undefinedLeft);	  return    result    ||    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	3	None	replace
115	[BUG]  [BUGGY]  return  n  ||  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  n  ||  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  n  ||  Only  eval  if  they  are  the  same  type  }	  return    result    ||    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	3	None	replace
116	[BUG]  [BUGGY]  result  =  result.compareTo(right,  op);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  result.compareTo(right,  op);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  result.compareTo(right,  op);	  if(right.getType()    ==    Token.NAME)    {    return    result;    }    	non-compiled	[CE]  case,  default,  or  	26	None	replace
117	[BUG]  [BUGGY]  result  =  result.getType();  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  result.getType();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  result.getType();	  if(right.getType()    ==    Token.NAME)    {    return    result;    }    	non-compiled	[CE]  case,  default,  or  	26	None	replace
118	[BUG]  [BUGGY]  result  =  result.compareTo(right,  right.getType());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  result.compareTo(right,  right.getType());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  result.compareTo(right,  right.getType());	  if(right.getType()    ==    Token.NAME)    {    return    result;    }    	non-compiled	[CE]  case,  default,  or  	26	None	replace
119	[BUG]  [BUGGY]  result  =  result.compareTo(left,  right.getType());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  result.compareTo(left,  right.getType());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  result.compareTo(left,  right.getType());	  if(right.getType()    ==    Token.NAME)    {    return    result;    }    	non-compiled	[CE]  case,  default,  or  	26	None	replace
120	[BUG]  [BUGGY]  result  =  result.compareTo(right,  right);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  result.compareTo(right,  right);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  result.compareTo(right,  right);	  if(right.getType()    ==    Token.NAME)    {    return    result;    }    	non-compiled	[CE]  case,  default,  or  	26	None	replace
121	[BUG]  [BUGGY]  result  =  right.getType();  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  right.getType();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  right.getType();	  if(right.getType()    ==    Token.NAME)    {    return    result;    }    	non-compiled	[CE]  case,  default,  or  	26	None	replace
122	[BUG]  [BUGGY]  ||  right.getType()  ==  Token.NAME)  {  return  result;  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  ||  right.getType()  ==  Token.NAME)  {  return  result;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	||  right.getType()  ==  Token.NAME)  {  return  result;  }	  ||    right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	30	None	replace
123	[BUG]  [BUGGY]  ||  right.getType()!=  Token.NAME)  {  return  result;  }  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  ||  right.getType()!=  Token.NAME)  {  return  result;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	||  right.getType()!=  Token.NAME)  {  return  result;  }	  ||    right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	30	None	replace
124	[BUG]  [BUGGY]  ||  left.getType()  ==  Token.NAME)  {  return  n;  }  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  ||  left.getType()  ==  Token.NAME)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	||  left.getType()  ==  Token.NAME)  {  return  n;  }	  ||    right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	30	None	replace
125	[BUG]  [BUGGY]  ||  right.getType()!=  Token.NAME)  {  return  n;  }  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  ||  right.getType()!=  Token.NAME)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	||  right.getType()!=  Token.NAME)  {  return  n;  }	  ||    right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	30	None	replace
126	[BUG]  [BUGGY]  ||  right.getType()  ==  Token.NAME)  {  return  undefinedLeft;  }  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  ||  right.getType()  ==  Token.NAME)  {  return  undefinedLeft;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	||  right.getType()  ==  Token.NAME)  {  return  undefinedLeft;  }	  ||    right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	30	None	replace
127	[BUG]  [BUGGY]  ||  right.getType()  ==  Token.NAME)  {  return  op;  }  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  ||  right.getType()  ==  Token.NAME)  {  return  op;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	||  right.getType()  ==  Token.NAME)  {  return  op;  }	  ||    right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	30	None	replace
128	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.VAR)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.VAR)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.VAR)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.VAR)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	14	None	replace
129	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.VAR)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	14	None	replace
130	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  result;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.VAR)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	14	None	replace
131	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.VAR)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.VAR)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.VAR)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.VAR)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	14	None	replace
132	[BUG]  [BUGGY]  if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.VAR)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	14	None	replace
133	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.VAR)  {  return  n;  }  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.VAR)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.VAR)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.VAR)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	14	None	replace
134	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  right;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  right;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME)  {  return  right;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	12	None	replace
135	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	12	None	replace
136	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	12	None	replace
137	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	12	None	replace
138	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  left;  }  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  left;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  left;  }	  if(right.getType()    ==    Token.NAME)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	12	None	replace
139	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  right;  }  else  if(right.getType()  ==  Token.NAME)  {  return  left;  }  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  right;  }  else  if(right.getType()  ==  Token.NAME)  {  return  left;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME)  {  return  right;  }  else  if(right.getType()  ==  Token.NAME)  {  return  left;  }	  if(right.getType()    ==    Token.NAME)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	12	None	replace
140	[BUG]  [BUGGY]  Node  eval  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  eval  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  eval  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  Node    eval    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	52	None	replace
141	[BUG]  [BUGGY]  Node  eval  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  eval  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  eval  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  Node    eval    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	52	None	replace
142	[BUG]  [BUGGY]  Node  eval  =  left.getNext();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  eval  =  left.getNext();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  eval  =  left.getNext();//  Only  eval  if  they  are  the  same  type  }	  Node    eval    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	52	None	replace
143	[BUG]  [BUGGY]  Node  lh  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  lh  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  lh  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  Node    eval    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	52	None	replace
144	[BUG]  [BUGGY]  Node  lh  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  lh  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  lh  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  Node    eval    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	52	None	replace
145	[BUG]  [BUGGY]  return  n.getFirstChild();  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  n.getFirstChild();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  n.getFirstChild();	  if(right.getType()    ==    Token.NAME)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  case,  default,  or  	51	None	replace
146	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  left.getFirstChild();  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  left.getFirstChild();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  left.getFirstChild();  }	  if(right.getType()    ==    Token.NAME)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  case,  default,  or  	51	None	replace
147	[BUG]  [BUGGY]  return  right.getFirstChild();  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  right.getFirstChild();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  right.getFirstChild();	  if(right.getType()    ==    Token.NAME)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  case,  default,  or  	51	None	replace
148	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  right.getFirstChild();  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  right.getFirstChild();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  right.getFirstChild();  }	  if(right.getType()    ==    Token.NAME)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  case,  default,  or  	51	None	replace
149	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  right.getLastChild();  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  right.getLastChild();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  right.getLastChild();  }	  if(right.getType()    ==    Token.NAME)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  case,  default,  or  	51	None	replace
150	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  n.getLastChild();  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  n.getLastChild();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  n.getLastChild();  }	  if(right.getType()    ==    Token.NAME)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  case,  default,  or  	51	None	replace
151	[BUG]  [BUGGY]  Node  newNode  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  newNode  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  newNode  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  Node    newNode    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	17	None	replace
152	[BUG]  [BUGGY]  Node  newNode  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  newNode  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  newNode  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  Node    newNode    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	17	None	replace
153	[BUG]  [BUGGY]  Node  newNode  =  left.getNext();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  newNode  =  left.getNext();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  newNode  =  left.getNext();//  Only  eval  if  they  are  the  same  type  }	  Node    newNode    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	17	None	replace
154	[BUG]  [BUGGY]  Node  newNode  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  newNode  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  newNode  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  Node    newNode    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	17	None	replace
155	[BUG]  [BUGGY]  Node  newNode  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  newNode  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  newNode  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type	  Node    newNode    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	17	None	replace
156	[BUG]  [BUGGY]  Node  newNode  =  node.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  newNode  =  node.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  newNode  =  node.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  Node    newNode    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	17	None	replace
157	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME)  {  return  result;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    result;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
158	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  result;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    result;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
159	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME)  {  return  result;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    result;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
160	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  result;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    result;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
161	[BUG]  [BUGGY]  return  right.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  right.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  right.getType();//  Only  eval  if  they  are  the  same  type  }	  return    left.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	23	None	replace
162	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }	  return    left.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	23	None	replace
163	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }	  return    left.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	23	None	replace
164	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.getType());//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  right.getType());//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  right.getType());//  Only  eval  if  they  are  the  same  type  }	  return    left.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	23	None	replace
165	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  left  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  left  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  Node    left    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	50	None	replace
166	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  left  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  left  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  Node    left    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	50	None	replace
167	[BUG]  [BUGGY]  Node  left  =  right.getNext();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  left  =  right.getNext();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  left  =  right.getNext();//  Only  eval  if  they  are  the  same  type  }	  Node    left    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	50	None	replace
168	[BUG]  [BUGGY]  Node  left  =  node.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  left  =  node.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  left  =  node.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  Node    left    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	50	None	replace
169	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();//  Only  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  left  =  right.getLastChild();//  Only  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  left  =  right.getLastChild();//  Only  if  they  are  the  same  type  }	  Node    left    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	50	None	replace
170	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  left  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  left  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type	  Node    left    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	50	None	replace
171	[BUG]  [BUGGY]  result  =  compareToUndefined(newNode,  op);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(newNode,  op);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(newNode,  op);	  result    =    compareToUndefined(newNode,    right);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
172	[BUG]  [BUGGY]  result  =  compareToUndefined(newNode,  left);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(newNode,  left);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(newNode,  left);	  result    =    compareToUndefined(newNode,    right);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
173	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n);  break;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  n);  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  n);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  case,  default,  or  	40	None	replace
174	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  op);  break;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(n,  op);  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(n,  op);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  case,  default,  or  	40	None	replace
175	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  op);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  op);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  op);	  result    =    compareToUndefined(left,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	41	None	replace
176	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()!=  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()!=  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()!=    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	63	None	replace
177	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME)  {  return  right;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(n.getType()!=  Token.NAME)  {  return  right;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(n.getType()!=  Token.NAME)  {  return  right;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()!=    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	63	None	replace
178	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  n.getType());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  n.getType());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  n.getType());	  result    =    compareToUndefined(n,    right.getType());    	non-compiled	[CE]  case,  default,  or  	46	None	replace
179	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left.getType());  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(n,  left.getType());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(n,  left.getType());	  result    =    compareToUndefined(n,    right.getType());    	non-compiled	[CE]  case,  default,  or  	46	None	replace
180	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right.getType(),  undefinedLeft);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(n,  right.getType(),  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(n,  right.getType(),  undefinedLeft);	  result    =    compareToUndefined(n,    right.getType());    	non-compiled	[CE]  case,  default,  or  	46	None	replace
181	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  result;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  result;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  result;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	55	None	replace
182	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  n;  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	55	None	replace
183	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.NAME)  {  return  result;  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.NAME)  {  return  result;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.NAME)  {  return  result;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	55	None	replace
184	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op);//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  op);//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  op);//  Only  eval  if  they  are  the  same  type  }	  result    =    compareToUndefined(right,    n.getFirstChild());//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	21	None	replace
185	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.getFirstChild());//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  left.getFirstChild());//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  left.getFirstChild());//  Only  eval  if  they  are  the  same  type  }	  result    =    compareToUndefined(right,    n.getFirstChild());//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	21	None	replace
186	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getFirstChild());//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right.getFirstChild());//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  right.getFirstChild());//  Only  eval  if  they  are  the  same  type  }	  result    =    compareToUndefined(right,    n.getFirstChild());//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	21	None	replace
187	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.getFirstChild());//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  right.getFirstChild());//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  right.getFirstChild());//  Only  eval  if  they  are  the  same  type  }	  result    =    compareToUndefined(right,    n.getFirstChild());//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	21	None	replace
188	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right.getFirstChild());//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(n,  right.getFirstChild());//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(n,  right.getFirstChild());//  Only  eval  if  they  are  the  same  type  }	  result    =    compareToUndefined(right,    n.getFirstChild());//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	21	None	replace
189	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n.getFirstChild());//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  n.getFirstChild());//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  n.getFirstChild());//  Only  eval  if  they  are  the  same  type  }	  result    =    compareToUndefined(right,    n.getFirstChild());//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	21	None	replace
190	[BUG]  [BUGGY]  n  =  left.getString();  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  n  =  left.getString();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  left.getString();	  n    =    right.getString();    	non-compiled	[CE]  case,  default,  or  	28	None	replace
191	[BUG]  [BUGGY]  n  =  right.getString()  +  1;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  n  =  right.getString()  +  1;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  right.getString()  +  1;	  n    =    right.getString();    	non-compiled	[CE]  case,  default,  or  	28	None	replace
192	[BUG]  [BUGGY]  n  =  right.getName();  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  n  =  right.getName();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  right.getName();	  n    =    right.getString();    	non-compiled	[CE]  case,  default,  or  	28	None	replace
193	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  n  =  right.getFirstChild();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  right.getFirstChild();	  n    =    right.getString();    	non-compiled	[CE]  case,  default,  or  	28	None	replace
194	[BUG]  [BUGGY]  n  =  right.getNode();  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  n  =  right.getNode();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  right.getNode();	  n    =    right.getString();    	non-compiled	[CE]  case,  default,  or  	28	None	replace
195	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  op);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  left,  op);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  left,  op);	  result    =    compareToUndefined(left,    right,    op);    	non-compiled	[CE]  case,  default,  or  	60	None	replace
196	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right,  op);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(n,  right,  op);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(n,  right,  op);	  result    =    compareToUndefined(left,    right,    op);    	non-compiled	[CE]  case,  default,  or  	60	None	replace
197	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right,  op);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  right,  op);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  right,  op);	  result    =    compareToUndefined(left,    right,    op);    	non-compiled	[CE]  case,  default,  or  	60	None	replace
198	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left,  op);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(n,  left,  op);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(n,  left,  op);	  result    =    compareToUndefined(left,    right,    op);    	non-compiled	[CE]  case,  default,  or  	60	None	replace
199	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  result;  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  result;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  result;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	29	None	replace
200	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n;  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	29	None	replace
201	[BUG]  [BUGGY]  ||  right.getType()  ==  Token.VAR)  {  return  n;  }  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  ||  right.getType()  ==  Token.VAR)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	||  right.getType()  ==  Token.VAR)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	29	None	replace
202	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.VAR)  {  return  result;  }  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.VAR)  {  return  result;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.VAR)  {  return  result;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	29	None	replace
203	[BUG]  [BUGGY]  Node  right  =  left.getNext();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  right  =  left.getNext();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  right  =  left.getNext();//  Only  eval  if  they  are  the  same  type  }	  Node    right    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	20	None	replace
204	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.getType(),  undefinedLeft);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  left.getType(),  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  left.getType(),  undefinedLeft);	  result    =    compareToUndefined(right,    left.getType());    	non-compiled	[CE]  case,  default,  or  	47	None	replace
205	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.getType(),  undefinedLeft);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  right.getType(),  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  right.getType(),  undefinedLeft);	  result    =    compareToUndefined(right,    left.getType());    	non-compiled	[CE]  case,  default,  or  	47	None	replace
206	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getString(),  undefinedLeft);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  left.getString(),  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  left.getString(),  undefinedLeft);	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	44	None	replace
207	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left.getString());  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(n,  left.getString());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(n,  left.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	44	None	replace
208	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  right);  break;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(op,  right);  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(op,  right);  break;	  result    =    compareToUndefined(right,    right);    break;    	non-compiled	[CE]  case,  default,  or  	38	None	replace
209	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft);  break;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft);  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  undefinedLeft);  break;	  result    =    compareToUndefined(right,    right);    break;    	non-compiled	[CE]  case,  default,  or  	38	None	replace
210	[BUG]  [BUGGY]  result  =  compareToUndefined(newNode,  right);  break;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(newNode,  right);  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(newNode,  right);  break;	  result    =    compareToUndefined(right,    right);    break;    	non-compiled	[CE]  case,  default,  or  	38	None	replace
211	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(left.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
212	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(n.getType()  ==  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(left.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
213	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  n;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME)  {  return  n;  }	  if(left.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
214	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  n;  }  else  if(left.getString().equals( "name "))  {  return  n;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  n;  }  else  if(left.getString().equals( "name "))  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  n;  }  else  if(left.getString().equals( "name "))  {  return  n;  }	  if(left.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
215	[BUG]  [BUGGY]  return  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  return    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	16	None	replace
216	[BUG]  [BUGGY]  return  right.getString();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  right.getString();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  right.getString();//  Only  eval  if  they  are  the  same  type  }	  return    left.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	22	None	replace
217	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  left.getString();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  left.getString();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  left.getString();//  Only  eval  if  they  are  the  same  type  }	  return    left.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	22	None	replace
218	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  left.getString();  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  left.getString();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  left.getString();  }	  return    left.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	22	None	replace
219	[BUG]  [BUGGY]  return  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  return    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	15	None	replace
220	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.getFirstChild());  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  right.getFirstChild());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  right.getFirstChild());	  return    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	15	None	replace
221	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  op.getType());  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  comparisonToUndefined(right,  op.getType());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  comparisonToUndefined(right,  op.getType());	  result    =    compareToUndefined(op,    right.getType());    	non-compiled	[CE]  case,  default,  or  	48	None	replace
222	[BUG]  [BUGGY]  result  =  compareToUndefined(lhType,  right.getType());  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(lhType,  right.getType());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(lhType,  right.getType());	  result    =    compareToUndefined(op,    right.getType());    	non-compiled	[CE]  case,  default,  or  	48	None	replace
223	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	10	None	replace
224	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	10	None	replace
225	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	10	None	replace
226	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.GETELEM)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.GETELEM)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.GETELEM)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.GETELEM)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	64	None	replace
227	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.GETELEM)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	64	None	replace
228	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(n.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.GETELEM)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	64	None	replace
229	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.GETELEM)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	64	None	replace
230	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  n  =  left.getLastChild();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  left.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	76	None	replace
231	[BUG]  [BUGGY]  n  =  right.getLastChild();  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  n  =  right.getLastChild();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  right.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	76	None	replace
232	[BUG]  [BUGGY]  n  =  left.getNext();  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  n  =  left.getNext();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  left.getNext();	  n    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	76	None	replace
233	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op,  right);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  op,  right);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  op,  right);	  result    =    compareToUndefined(right,    op,    left);    	non-compiled	[CE]  case,  default,  or  	71	None	replace
234	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right,  left);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(n,  right,  left);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(n,  right,  left);	  result    =    compareToUndefined(right,    op,    left);    	non-compiled	[CE]  case,  default,  or  	71	None	replace
235	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  lh);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  lh);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  lh);	  result    =    compareToUndefined(lh,    right);    	non-compiled	[CE]  case,  default,  or  	8	None	replace
236	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  op);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(lh,  op);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(lh,  op);	  result    =    compareToUndefined(lh,    right);    	non-compiled	[CE]  case,  default,  or  	8	None	replace
237	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  right,  undefinedLeft);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(lh,  right,  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(lh,  right,  undefinedLeft);	  result    =    compareToUndefined(lh,    right);    	non-compiled	[CE]  case,  default,  or  	8	None	replace
238	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  left);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(lh,  left);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(lh,  left);	  result    =    compareToUndefined(lh,    right);    	non-compiled	[CE]  case,  default,  or  	8	None	replace
239	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op.getType());  break;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  op.getType());  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  op.getType());  break;	  result    =    compareToUndefined(left,    right.getType());    break;    	non-compiled	[CE]  case,  default,  or  	39	None	replace
240	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getType());  break;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  left.getType());  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  left.getType());  break;	  result    =    compareToUndefined(left,    right.getType());    break;    	non-compiled	[CE]  case,  default,  or  	39	None	replace
241	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.getName());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  right.getName());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  right.getName());	  result    =    compareToUndefined(right,    op.getName());    	non-compiled	[CE]  case,  default,  or  	56	None	replace
242	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op.getName());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  op.getName());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  op.getName());	  result    =    compareToUndefined(right,    op.getName());    	non-compiled	[CE]  case,  default,  or  	56	None	replace
243	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.getName());  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  left.getName());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  left.getName());	  result    =    compareToUndefined(right,    op.getName());    	non-compiled	[CE]  case,  default,  or  	56	None	replace
244	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getName());  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right.getName());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  right.getName());	  result    =    compareToUndefined(right,    op.getName());    	non-compiled	[CE]  case,  default,  or  	56	None	replace
245	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  n);  break;  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  n);  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  n);  break;	  result    =    compareToUndefined(right,    op);    break;    	non-compiled	[CE]  case,  default,  or  	1	None	replace
246	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  rightLiteral);  break;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  rightLiteral);  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  rightLiteral);  break;	  result    =    compareToUndefined(right,    op);    break;    	non-compiled	[CE]  case,  default,  or  	1	None	replace
247	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getType(),  op);  break;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right.getType(),  op);  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  right.getType(),  op);  break;	  result    =    compareToUndefined(left,    right.getType());    break;    	non-compiled	[CE]  case,  default,  or  	39	None	replace
248	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  op);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  comparisonToUndefined(left,  op);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  comparisonToUndefined(left,  op);	  result    =    compareToUndefined(op,    right);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
249	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.FUNCTION)  {  return  n;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.FUNCTION)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.FUNCTION)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	27	None	replace
250	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  left;  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  left;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  left;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	27	None	replace
251	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.FUNCTION)  {  return  result;  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.FUNCTION)  {  return  result;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.FUNCTION)  {  return  result;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	27	None	replace
252	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op,  right.getString());  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  op,  right.getString());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  op,  right.getString());	  result    =    compareToUndefined(right,    op,    left.getString());    	non-compiled	[CE]  case,  default,  or  	70	None	replace
253	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  n,  left.getString());  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  n,  left.getString());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  n,  left.getString());	  result    =    compareToUndefined(right,    op,    left.getString());    	non-compiled	[CE]  case,  default,  or  	70	None	replace
254	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  left.getType();  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  left.getType();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  left.getType();  }	  return    left.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	23	None	replace
255	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  left.getType();  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  left.getType();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME)  {  return  left.getType();  }	  return    left.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	23	None	replace
256	[BUG]  [BUGGY]  return  result  ||  only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  result  ||  only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result  ||  only  eval  if  they  are  the  same  type  }	  return    result    &&    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	62	None	replace
257	[BUG]  [BUGGY]  return  result  &&  Only  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  result  &&  Only  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result  &&  Only  if  they  are  the  same  type  }	  return    result    &&    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	62	None	replace
258	[BUG]  [BUGGY]  return  result  &&  only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  result  &&  only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result  &&  only  eval  if  they  are  the  same  type  }	  return    result    &&    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	62	None	replace
259	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.CALL)  {  return  n;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.CALL)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.CALL)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.CALL)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	72	None	replace
260	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.CALL)  {  return  n;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.CALL)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.CALL)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.CALL)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	72	None	replace
261	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  right.getFirstChild();  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  right.getFirstChild();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME)  {  return  right.getFirstChild();  }	  if(right.getType()!=    Token.NAME)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  case,  default,  or  	67	None	replace
262	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  left.getFirstChild();  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  left.getFirstChild();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME)  {  return  left.getFirstChild();  }	  if(right.getType()!=    Token.NAME)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  case,  default,  or  	67	None	replace
263	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left);  break;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  left);  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  left);  break;	  result    =    compareToUndefined(left,    right);    break;    	non-compiled	[CE]  case,  default,  or  	61	None	replace
264	[BUG]  [BUGGY]  return  right.getString();  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  right.getString();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  right.getString();	  return    left.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	22	None	replace
265	[BUG]  [BUGGY]  return  left.getString();  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  left.getString();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  left.getString();	  return    left.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	22	None	replace
266	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;  }	  if(left.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
267	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	12	None	replace
268	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  return  n;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	54	None	replace
269	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  n;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	54	None	replace
270	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETPROP)  {  return  n;  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETPROP)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETPROP)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	54	None	replace
271	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.GETELEM)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	64	None	replace
272	[BUG]  [BUGGY]  return  left.booleanValue();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  left.booleanValue();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  left.booleanValue();//  Only  eval  if  they  are  the  same  type  }	  return    result.booleanValue();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	2	None	replace
273	[BUG]  [BUGGY]  n  =  right.getValue();  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  n  =  right.getValue();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  right.getValue();	  n    =    right.getType();    	non-compiled	[CE]  case,  default,  or  	25	None	replace
274	[BUG]  [BUGGY]  n  =  left.getFirstChild()  +  1;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  n  =  left.getFirstChild()  +  1;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  left.getFirstChild()  +  1;	  n    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	76	None	replace
275	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getString(),  op);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right.getString(),  op);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  right.getString(),  op);	  result    =    compareToUndefined(left,    right.getString());    	non-compiled	[CE]  case,  default,  or  	73	None	replace
276	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedLeft);  break;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedLeft);  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  op,  undefinedLeft);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  case,  default,  or  	40	None	replace
277	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	10	None	replace
278	[BUG]  [BUGGY]  result;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result;	  if(right.getType()    ==    Token.NAME)    {    return    result;    }    	non-compiled	[CE]  case,  default,  or  	26	None	replace
279	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  result;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.NAME)  {  return  result;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME)  {  return  result;  }	  if(right.getType()    ==    Token.NAME)    {    return    result;    }    	non-compiled	[CE]  case,  default,  or  	26	None	replace
280	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  result;  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  result;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  result;  }	  if(right.getType()    ==    Token.NAME)    {    return    result;    }    	non-compiled	[CE]  case,  default,  or  	26	None	replace
281	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  n,  undefinedLeft);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  n,  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  n,  undefinedLeft);	  result    =    compareToUndefined(right,    op,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	35	None	replace
282	[BUG]  [BUGGY]  return  result  ||  Only  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  result  ||  Only  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result  ||  Only  if  they  are  the  same  type  }	  return    result;//    Only    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	75	None	replace
283	[BUG]  [BUGGY]  return  right;//  Only  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  right;//  Only  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  right;//  Only  if  they  are  the  same  type  }	  return    result;//    Only    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	75	None	replace
284	[BUG]  [BUGGY]  return  result.booleanValue();  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  result.booleanValue();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result.booleanValue();	  return    result;//    Only    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	75	None	replace
285	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getString(),  op);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  left.getString(),  op);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  left.getString(),  op);	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	44	None	replace
286	[BUG]  [BUGGY]  return  left.getNext();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  left.getNext();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  left.getNext();//  Only  eval  if  they  are  the  same  type  }	  return    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	16	None	replace
287	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.getLastChild());//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  right.getLastChild());//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  right.getLastChild());//  Only  eval  if  they  are  the  same  type  }	  result    =    compareToUndefined(right,    n.getFirstChild());//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	21	None	replace
288	[BUG]  [BUGGY]  result  =  comparatToUndefined(left,  op);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  comparatToUndefined(left,  op);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  comparatToUndefined(left,  op);	  result    =    compareToUndefined(op,    left);    	non-compiled	[CE]  case,  default,  or  	74	None	replace
289	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  right  =  left.getLastChild();	  Node    right    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	20	None	replace
290	[BUG]  [BUGGY]  return  value;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  value;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  value;//  Only  eval  if  they  are  the  same  type  }	  return    right;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	24	None	replace
291	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  undefinedRight);	  result    =    compareToUndefined(left,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	41	None	replace
292	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.VAR)  {  return  n;  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.VAR)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.VAR)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	29	None	replace
293	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n;  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	29	None	replace
294	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.VAR)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	14	None	replace
295	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n,  undefinedLeft);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  n,  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  n,  undefinedLeft);	  result    =    compareToUndefined(left,    right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	59	None	replace
296	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  right);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  right);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  right);	  result    =    compareToUndefined(left,    right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	59	None	replace
297	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  &&  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.NAME  &&  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME  &&  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	13	None	replace
298	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.NAME)  {  return  n;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.NAME)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()!=  Token.NAME)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	55	None	replace
299	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  n;  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	55	None	replace
300	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  right  =  left.getFirstChild();	  Node    right    =    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	19	None	replace
301	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  right  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  right  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type	  Node    right    =    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	19	None	replace
302	[BUG]  [BUGGY]  ||  right.getType()  ==  Token.NAME)  {  return  null;  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  ||  right.getType()  ==  Token.NAME)  {  return  null;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	||  right.getType()  ==  Token.NAME)  {  return  null;  }	  ||    right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	30	None	replace
303	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  left);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right,  left);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  right,  left);	  result    =    compareToUndefined(right,    op,    left);    	non-compiled	[CE]  case,  default,  or  	71	None	replace
304	[BUG]  [BUGGY]  Node  newNode  =  left.getFirstChild();  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  newNode  =  left.getFirstChild();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  newNode  =  left.getFirstChild();	  Node    newNode    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	17	None	replace
305	[BUG]  [BUGGY]  return  result  ||  Only  eval  if  they  are  the  same  type,  default,  or  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  result  ||  Only  eval  if  they  are  the  same  type,  default,  or  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result  ||  Only  eval  if  they  are  the  same  type,  default,  or	  return    result    ||    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	3	None	replace
306	[BUG]  [BUGGY]  return  result  ||  Only  eval  if  they  are  the  same  type  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  result  ||  Only  eval  if  they  are  the  same  type  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result  ||  Only  eval  if  they  are  the  same  type	  return    result    ||    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	3	None	replace
307	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME)  {  return  n;  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()!=  Token.NAME)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()!=  Token.NAME)  {  return  n;  }	  if(right.getType()!=    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	63	None	replace
308	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  n;  }  else  if(right.getType()!=  Token.NAME)  {  result  =  compareToUndefined(left,  right.getString());  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  n;  }  else  if(right.getType()!=  Token.NAME)  {  result  =  compareToUndefined(left,  right.getString());  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  n;  }  else  if(right.getType()!=  Token.NAME)  {  result  =  compareToUndefined(left,  right.getString());  }	  if(right.getType()!=    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	63	None	replace
309	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETPROP)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETPROP)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETPROP)  {  return  result;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    result;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
310	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left,  op);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  left,  op);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  left,  op);	  result    =    compareToUndefined(left,    right,    op);    	non-compiled	[CE]  case,  default,  or  	60	None	replace
311	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  op,  undefinedLeft);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right,  op,  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  right,  op,  undefinedLeft);	  result    =    compareToUndefined(left,    right,    op);    	non-compiled	[CE]  case,  default,  or  	60	None	replace
312	[BUG]  [BUGGY]  Node  eval  =  left.getFirstChild();  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  eval  =  left.getFirstChild();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  eval  =  left.getFirstChild();	  Node    eval    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	52	None	replace
313	[BUG]  [BUGGY]  Node  eval  =  left.getLastChild();  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  eval  =  left.getLastChild();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  eval  =  left.getLastChild();	  Node    eval    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	52	None	replace
314	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op,  left.getString());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  op,  left.getString());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  op,  left.getString());	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	32	None	replace
315	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	13	None	replace
316	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.RETURN)  {  return  result;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.RETURN)  {  return  result;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.RETURN)  {  return  result;  }	  if(right.getType()    ==    Token.NAME)    {    return    result;    }    	non-compiled	[CE]  case,  default,  or  	26	None	replace
317	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  n;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	54	None	replace
318	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  this;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  this;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  return  this;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	54	None	replace
319	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()!=  Token.VAR)  {  return  n;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()!=  Token.VAR)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME  ||  right.getType()!=  Token.VAR)  {  return  n;  }	  if(right.getType()!=    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	53	None	replace
320	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()!=  Token.FUNCTION)  {  return  n;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()!=  Token.FUNCTION)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME  ||  right.getType()!=  Token.FUNCTION)  {  return  n;  }	  if(right.getType()!=    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	53	None	replace
321	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  return  n;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()!=  Token.NAME  ||  right.getType()!=  Token.GETELEM)  {  return  n;  }	  if(right.getType()!=    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	53	None	replace
322	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();//  Only  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  right  =  left.getFirstChild();//  Only  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  right  =  left.getFirstChild();//  Only  if  they  are  the  same  type  }	  Node    right    =    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	19	None	replace
323	[BUG]  [BUGGY]  Node  right  =  right.getFirstChild();//  Only  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  right  =  right.getFirstChild();//  Only  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  right  =  right.getFirstChild();//  Only  if  they  are  the  same  type  }	  Node    right    =    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	19	None	replace
324	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME)  {  return  right.getFirstChild();  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(n.getType()!=  Token.NAME)  {  return  right.getFirstChild();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(n.getType()!=  Token.NAME)  {  return  right.getFirstChild();  }	  if(right.getType()!=    Token.NAME)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  case,  default,  or  	67	None	replace
325	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME)  {  return  n.getFirstChild();  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()!=  Token.NAME)  {  return  n.getFirstChild();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()!=  Token.NAME)  {  return  n.getFirstChild();  }	  if(right.getType()!=    Token.NAME)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  case,  default,  or  	67	None	replace
326	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME)  {  return  right.getFirstChild();  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()!=  Token.NAME)  {  return  right.getFirstChild();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()!=  Token.NAME)  {  return  right.getFirstChild();  }	  if(right.getType()!=    Token.NAME)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  case,  default,  or  	67	None	replace
327	[BUG]  [BUGGY]  return  result  ||  Only  eval  if  they  are  the  same  type!=  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  result  ||  Only  eval  if  they  are  the  same  type!=  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result  ||  Only  eval  if  they  are  the  same  type!=	  return    result    ||    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	3	None	replace
328	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  right;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  right;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME)  {  return  right;  }	  if(right.getType()    ==    Token.NAME)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	12	None	replace
329	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();//  Only  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  left  =  right.getFirstChild();//  Only  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  left  =  right.getFirstChild();//  Only  if  they  are  the  same  type  }	  Node    left    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	50	None	replace
330	[BUG]  [BUGGY]  Node  left  =  right.removeFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  left  =  right.removeFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  left  =  right.removeFirstChild();//  Only  eval  if  they  are  the  same  type  }	  Node    left    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	50	None	replace
331	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  left  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  left  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type	  Node    left    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	50	None	replace
332	[BUG]  [BUGGY]  result  =  compareToUndefined(right.getString(),  right.getType());  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right.getString(),  right.getType());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right.getString(),  right.getType());	  result    =    compareToUndefined(op,    right.getType());    	non-compiled	[CE]  case,  default,  or  	48	None	replace
333	[BUG]  [BUGGY]  Node  lval  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  lval  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  lval  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  Node    eval    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	52	None	replace
334	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()!=  Token.NAME)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()!=  Token.NAME)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()!=    Token.NAME)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	66	None	replace
335	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  n.getFirstChild();  }  else  if(left.getString().equals( "undefined "))  {  result  =  compareToUndefined(left,  right.getString());  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  n.getFirstChild();  }  else  if(left.getString().equals( "undefined "))  {  result  =  compareToUndefined(left,  right.getString());  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  n.getFirstChild();  }  else  if(left.getString().equals( "undefined "))  {  result  =  compareToUndefined(left,  right.getString());  }	  if(right.getType()!=    Token.NAME)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	66	None	replace
336	[BUG]  [BUGGY]  ||  right.getType()  ==  Token.NAME)  {  return  this;  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  ||  right.getType()  ==  Token.NAME)  {  return  this;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	||  right.getType()  ==  Token.NAME)  {  return  this;  }	  ||    right.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	30	None	replace
337	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  right.getString());  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(lh,  right.getString());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(lh,  right.getString());	  result    =    compareToUndefined(lh,    right.getType());    	non-compiled	[CE]  case,  default,  or  	49	None	replace
338	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  left);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  left);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  left);	  result    =    compareToUndefined(left,    right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	59	None	replace
339	[BUG]  [BUGGY]  Node  newNode  =  left.removeFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  newNode  =  left.removeFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  newNode  =  left.removeFirstChild();//  Only  eval  if  they  are  the  same  type  }	  Node    newNode    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	17	None	replace
340	[BUG]  [BUGGY]  Node  newNode  =  left.getFirstChild();//  Only  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  Node  newNode  =  left.getFirstChild();//  Only  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	Node  newNode  =  left.getFirstChild();//  Only  if  they  are  the  same  type  }	  Node    newNode    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	17	None	replace
341	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n.getFirstChild();  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n.getFirstChild();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  n.getFirstChild();  }	  if(right.getType()    ==    Token.NAME)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  case,  default,  or  	51	None	replace
342	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  n.getFirstChild();  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  n.getFirstChild();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  return  n.getFirstChild();  }	  if(right.getType()    ==    Token.NAME)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  case,  default,  or  	51	None	replace
343	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  return  right.getFirstChild();  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  return  right.getFirstChild();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(n.getType()  ==  Token.NAME)  {  return  right.getFirstChild();  }	  if(right.getType()    ==    Token.NAME)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  case,  default,  or  	51	None	replace
344	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  n.getFirstChild();  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  n.getFirstChild();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME)  {  return  n.getFirstChild();  }	  if(right.getType()    ==    Token.NAME)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  case,  default,  or  	51	None	replace
345	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.getString(),  undefinedLeft);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  right.getString(),  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  right.getString(),  undefinedLeft);	  result    =    compareToUndefined(right,    right.getString());    	non-compiled	[CE]  case,  default,  or  	68	None	replace
346	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op.getLabel());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  op.getLabel());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  op.getLabel());	  result    =    compareToUndefined(right,    op.getName());    	non-compiled	[CE]  case,  default,  or  	56	None	replace
347	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.CALL)  {  return  n;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.CALL)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.CALL)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.CALL)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	72	None	replace
348	[BUG]  [BUGGY]  if(right.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NAME)  {  return  n;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NAME)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NAME)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.CALL)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	72	None	replace
349	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.CALL)  {  return  newNode;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.CALL)  {  return  newNode;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.CALL)  {  return  newNode;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.CALL)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	72	None	replace
350	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  left.getString();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  left.getString();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME)  {  return  left.getString();//  Only  eval  if  they  are  the  same  type  }	  return    left.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	22	None	replace
351	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  left.getString();  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  left.getString();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME)  {  return  left.getString();  }	  return    left.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	22	None	replace
352	[BUG]  [BUGGY]  n  =  right.getNext();  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  n  =  right.getNext();  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	n  =  right.getNext();	  n    =    right.getType();    	non-compiled	[CE]  case,  default,  or  	25	None	replace
353	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }	  return    left.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	23	None	replace
354	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedLeft);  break;  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedLeft);  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  op,  undefinedLeft);  break;	  result    =    compareToUndefined(right,    op);    break;    	non-compiled	[CE]  case,  default,  or  	1	None	replace
355	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  newNode);  break;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  newNode);  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  newNode);  break;	  result    =    compareToUndefined(right,    op);    break;    	non-compiled	[CE]  case,  default,  or  	1	None	replace
356	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  newNode);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  comparisonToUndefined(right,  newNode);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  comparisonToUndefined(right,  newNode);	  result    =    compareToUndefined(newNode,    right);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
357	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft  -  1);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft  -  1);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  undefinedLeft  -  1);	  result    =    compareToUndefined(left,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	41	None	replace
358	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.getString());  break;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  right.getString());  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  right.getString());  break;	  result    =    compareToUndefined(right,    right.getType());    break;    	non-compiled	[CE]  case,  default,  or  	37	None	replace
359	[BUG]  [BUGGY]  if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NAME)  {  return  n;  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NAME)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NAME)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	29	None	replace
360	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  this;  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  this;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  return  this;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	29	None	replace
361	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  left,  undefinedLeft);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  op,  left,  undefinedLeft);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  op,  left,  undefinedLeft);	  result    =    compareToUndefined(right,    op,    left);    	non-compiled	[CE]  case,  default,  or  	71	None	replace
362	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getString());  break;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  left.getString());  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  left.getString());  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  case,  default,  or  	40	None	replace
363	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  op);  break;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  comparisonToUndefined(right,  op);  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  comparisonToUndefined(right,  op);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  case,  default,  or  	40	None	replace
364	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {  return  n;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {  return  n;  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  case,  default,  or  	27	None	replace
365	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  n.getLastChild());//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  n.getLastChild());//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  n.getLastChild());//  Only  eval  if  they  are  the  same  type  }	  result    =    compareToUndefined(right,    n.getFirstChild());//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	21	None	replace
366	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	18	None	replace
367	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  n.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  n.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  n.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	18	None	replace
368	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.VAR)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.VAR)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.VAR)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(left.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
369	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getString(),  right.getValue());  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  left.getString(),  right.getValue());  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  left.getString(),  right.getValue());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	44	None	replace
370	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(left.getType()  ==  Token.NAME)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	16	None	replace
371	[BUG]  [BUGGY]  return  result  ==  null?  false  :  result;//  Only  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  result  ==  null?  false  :  result;//  Only  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result  ==  null?  false  :  result;//  Only  if  they  are  the  same  type  }	  return    result;//    Only    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	75	None	replace
372	[BUG]  [BUGGY]  return  result.booleanValue()?  false  :  false;//  Only  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  result.booleanValue()?  false  :  false;//  Only  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result.booleanValue()?  false  :  false;//  Only  if  they  are  the  same  type  }	  return    result;//    Only    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	75	None	replace
373	[BUG]  [BUGGY]  return  result.booleanValue()?  true  :  false;//  Only  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  return  result.booleanValue()?  true  :  false;//  Only  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	return  result.booleanValue()?  true  :  false;//  Only  if  they  are  the  same  type  }	  return    result;//    Only    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	75	None	replace
374	[BUG]  [BUGGY]  if(result.booleanValue())  {  return  result.booleanValue();  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(result.booleanValue())  {  return  result.booleanValue();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(result.booleanValue())  {  return  result.booleanValue();  }	  return    result.booleanValue();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	2	None	replace
375	[BUG]  [BUGGY]  if(result  ==  null)result.booleanValue();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(result  ==  null)result.booleanValue();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(result  ==  null)result.booleanValue();//  Only  eval  if  they  are  the  same  type  }	  return    result.booleanValue();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	2	None	replace
376	[BUG]  [BUGGY]  if(result  ==  null  ||!result.booleanValue())  {  return  result.booleanValue();  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(result  ==  null  ||!result.booleanValue())  {  return  result.booleanValue();  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(result  ==  null  ||!result.booleanValue())  {  return  result.booleanValue();  }	  return    result.booleanValue();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	2	None	replace
377	[BUG]  [BUGGY]  if(result  ==  null  ||!result.booleanValue())  {  return  result.booleanValue();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(result  ==  null  ||!result.booleanValue())  {  return  result.booleanValue();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(result  ==  null  ||!result.booleanValue())  {  return  result.booleanValue();//  Only  eval  if  they  are  the  same  type  }	  return    result.booleanValue();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	2	None	replace
378	[BUG]  [BUGGY]  if(result.booleanValue())  {  return  result.booleanValue();//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(result.booleanValue())  {  return  result.booleanValue();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(result.booleanValue())  {  return  result.booleanValue();//  Only  eval  if  they  are  the  same  type  }	  return    result.booleanValue();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	2	None	replace
379	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getString());  break;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right.getString());  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(left,  right.getString());  break;	  result    =    compareToUndefined(left,    right.getType());    break;    	non-compiled	[CE]  case,  default,  or  	39	None	replace
380	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  right);  break;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(lh,  right);  break;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(lh,  right);  break;	  result    =    compareToUndefined(right,    right);    break;    	non-compiled	[CE]  case,  default,  or  	38	None	replace
381	[BUG]  [BUGGY]  if(right.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.GETELEM)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	64	None	replace
382	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedLeft)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedLeft)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  op,  undefinedLeft)?  Boolean.TRUE  :  Boolean.FALSE;	  result    =    compareToUndefined(right,    op,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	35	None	replace
383	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedLeft  +  1);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedLeft  +  1);  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	result  =  compareToUndefined(right,  op,  undefinedLeft  +  1);	  result    =    compareToUndefined(right,    op,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	35	None	replace
384	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  n;  }  else  if(!left.getString().equals( "undefined "))  {  return  n;  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  return  n;  }  else  if(!left.getString().equals( "undefined "))  {  return  n;  }  [BUGGY]      }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  }  switch  (op)  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1039	1040	3	replace	if(right.getType()  ==  Token.NAME)  {  return  n;  }  else  if(!left.getString().equals( "undefined "))  {  return  n;  }	  if(right.getType()!=    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  case,  default,  or  	63	None	replace
