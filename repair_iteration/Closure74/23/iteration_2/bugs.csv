bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  rhType  >>  lhType;  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  rhType  >>  lhType;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  >>  lhType;	  result    =    lhType    >>    rhType;    	non-compiled	[CE]  orphaned  case	8	None	replace
2	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  +  1;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  rhType  ==  lhType  +  1;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  lhType  +  1;	  result    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  orphaned  case	3	None	replace
3	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  2;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  +  2;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  +  2;	  result    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  orphaned  case	3	None	replace
4	[BUG]  [BUGGY]  result  =  lhType  >>  rhType  +  1;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  >>  rhType  +  1;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >>  rhType  +  1;	  result    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  orphaned  case	3	None	replace
5	[BUG]  [BUGGY]  result  =  lhType  >=  rhType  +  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  >=  rhType  +  1;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >=  rhType  +  1;	  result    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  orphaned  case	3	None	replace
6	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  3;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  +  3;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  +  3;	  result    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  orphaned  case	3	None	replace
7	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	11	None	replace
8	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	11	None	replace
9	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	11	None	replace
10	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	11	None	replace
11	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	11	None	replace
12	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	11	None	replace
13	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	11	None	replace
14	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmp  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmp  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmp	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	12	None	replace
15	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&  lhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  &&  lhType  ==  Token.EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&  lhType  ==  Token.EQ;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	5	None	replace
16	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  ||  lhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  rhType  ==  lhType  ||  lhType  ==  Token.EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  lhType  ||  lhType  ==  Token.EQ;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	5	None	replace
17	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&  lhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType!=  rhType  &&  lhType  ==  Token.EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&  lhType  ==  Token.EQ;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	5	None	replace
18	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||  lhType  ==  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  ||  lhType  ==  Token.EXPR_RESULT;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||  lhType  ==  Token.EXPR_RESULT;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	5	None	replace
19	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||  lhType!=  Token.EQ;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  ||  lhType!=  Token.EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||  lhType!=  Token.EQ;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	5	None	replace
20	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||  lhType  ==  Token.NAME;  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  ||  lhType  ==  Token.NAME;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||  lhType  ==  Token.NAME;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	5	None	replace
21	[BUG]  [BUGGY]  result  =  lhType  >=  rhType;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  >=  rhType;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >=  rhType;	  result    =    lhType!=    rhType;    	non-compiled	[CE]  orphaned  case	2	None	replace
22	[BUG]  [BUGGY]  result  =  rhType!=  rhType;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  rhType!=  rhType;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  rhType;	  result    =    rhType!=    lhType;    	non-compiled	[CE]  orphaned  case	6	None	replace
23	[BUG]  [BUGGY]  result  =  lhType!=  Token.EQ;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType!=  Token.EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  Token.EQ;	  result    =    rhType!=    lhType;    	non-compiled	[CE]  orphaned  case	6	None	replace
24	[BUG]  [BUGGY]  result  =  rhType!=  lhType  +  1;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  rhType!=  lhType  +  1;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  lhType  +  1;	  result    =    lhType!=    rhType    +    1;    	non-compiled	[CE]  orphaned  case	9	None	replace
25	[BUG]  [BUGGY]  result  =  lhType!=  rhType  +  2;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType!=  rhType  +  2;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  +  2;	  result    =    lhType!=    rhType    +    1;    	non-compiled	[CE]  orphaned  case	9	None	replace
26	[BUG]  [BUGGY]  result  =  rhType  >>  lhType  +  1;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  rhType  >>  lhType  +  1;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  >>  lhType  +  1;	  result    =    lhType!=    rhType    +    1;    	non-compiled	[CE]  orphaned  case	9	None	replace
27	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	13	None	replace
28	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	16	None	replace
29	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	16	None	replace
30	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	16	None	replace
31	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	16	None	replace
32	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	16	None	replace
33	[BUG]  [BUGGY]  result  =  rhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  rhType  ==  Token.EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  Token.EQ;	  result    =    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	4	None	replace
34	[BUG]  [BUGGY]  result  =  rhType!=  Token.EQ;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  rhType!=  Token.EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  Token.EQ;	  result    =    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	4	None	replace
35	[BUG]  [BUGGY]  result  =  op  ==  Token.EQ;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  op  ==  Token.EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  op  ==  Token.EQ;	  result    =    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	4	None	replace
36	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr    	non-compiled	[CE]  orphaned  case	14	None	replace
37	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr    	non-compiled	[CE]  orphaned  case	14	None	replace
38	[BUG]  [BUGGY]  result  =  rhType  ==  rhType;  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  rhType  ==  rhType;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  rhType;	  result    =    rhType    ==    lhType;    	non-compiled	[CE]  orphaned  case	1	None	replace
39	[BUG]  [BUGGY]  result  =  rhType  ==  n;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  rhType  ==  n;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  n;	  result    =    rhType    ==    lhType;    	non-compiled	[CE]  orphaned  case	1	None	replace
40	[BUG]  [BUGGY]  result  =  rhType!=  EQ;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  rhType!=  EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  EQ;	  result    =    lhType!=    EQ;    	non-compiled	[CE]  orphaned  case	10	None	replace
41	[BUG]  [BUGGY]  result  =  rhType  ==  EQ;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  rhType  ==  EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  EQ;	  result    =    lhType!=    EQ;    	non-compiled	[CE]  orphaned  case	10	None	replace
42	[BUG]  [BUGGY]  result  =  lhType!=  rhType;  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType!=  rhType;  break;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType;  break;	      	non-compiled	[CE]  orphaned  case	7	None	replace
43	[BUG]  [BUGGY]  result  =  lhType  ==  rhType;  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType;  break;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType;  break;	      	non-compiled	[CE]  orphaned  case	7	None	replace
44	[BUG]  [BUGGY]  Node  lhType  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  Node  lhType  =  left.getFirstChild();  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  lhType  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
45	[BUG]  [BUGGY]  Node  ln  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  Node  ln  =  left.getFirstChild();  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  ln  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
46	[BUG]  [BUGGY]  result  =  rhType  >>  EQ;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  rhType  >>  EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  >>  EQ;	  result    =    lhType!=    EQ;    	non-compiled	[CE]  orphaned  case	10	None	replace
47	[BUG]  [BUGGY]  result  =  lhType  >>  rhType  +  2;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  >>  rhType  +  2;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >>  rhType  +  2;	  result    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  orphaned  case	3	None	replace
48	[BUG]  [BUGGY]  result  =  lhType  >>  rhType  &&  lhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  >>  rhType  &&  lhType  ==  Token.EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >>  rhType  &&  lhType  ==  Token.EQ;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	5	None	replace
49	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  &&  lhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  rhType  ==  lhType  &&  lhType  ==  Token.EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  lhType  &&  lhType  ==  Token.EQ;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	5	None	replace
50	[BUG]  [BUGGY]  result  =  lhType!=  rhType  ||  lhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType!=  rhType  ||  lhType  ==  Token.EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  ||  lhType  ==  Token.EQ;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	5	None	replace
51	[BUG]  [BUGGY]  result  =  rhType  >>  Token.EQ;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  rhType  >>  Token.EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  >>  Token.EQ;	  result    =    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	4	None	replace
52	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	11	None	replace
53	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	11	None	replace
54	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	11	None	replace
55	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	11	None	replace
56	[BUG]  [BUGGY]  Result  =  lhType!=  rhType;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  Result  =  lhType!=  rhType;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Result  =  lhType!=  rhType;	      	non-compiled	[CE]  orphaned  case	7	None	replace
57	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	13	None	replace
58	[BUG]  [BUGGY]  result  =  op!=  rhType;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  op!=  rhType;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  op!=  rhType;	  result    =    lhType!=    rhType;    	non-compiled	[CE]  orphaned  case	2	None	replace
59	[BUG]  [BUGGY]  result  =  lhType!=  rhType  +  3;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType!=  rhType  +  3;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  +  3;	  result    =    lhType!=    rhType    +    1;    	non-compiled	[CE]  orphaned  case	9	None	replace
60	[BUG]  [BUGGY]  result  =  lhType  ==  Token.EQ  ||  lhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  Token.EQ  ||  lhType  ==  Token.EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Token.EQ  ||  lhType  ==  Token.EQ;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	5	None	replace
61	[BUG]  [BUGGY]  result  =  lhType  ==  Token.EQ  ||  rhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  Token.EQ  ||  rhType  ==  Token.EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Token.EQ  ||  rhType  ==  Token.EQ;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	5	None	replace
62	[BUG]  [BUGGY]  result  =  lhType  ==  EQ;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType  ==  EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  EQ;	  result    =    lhType!=    EQ;    	non-compiled	[CE]  orphaned  case	10	None	replace
63	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	16	None	replace
64	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	16	None	replace
65	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	16	None	replace
66	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	16	None	replace
67	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmp  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmp  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmp	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	16	None	replace
68	[BUG]  [BUGGY]  result  =  lhType!=  rhType  ||  op  ==  Token.EQ;  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType!=  rhType  ||  op  ==  Token.EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  ||  op  ==  Token.EQ;	  result    =    lhType    >>    rhType;    	non-compiled	[CE]  orphaned  case	8	None	replace
69	[BUG]  [BUGGY]  result  =  lhType!=  rhType  ||  lhType!=  Token.EQ;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType!=  rhType  ||  lhType!=  Token.EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  ||  lhType!=  Token.EQ;	  result    =    lhType!=    rhType;    	non-compiled	[CE]  orphaned  case	2	None	replace
70	[BUG]  [BUGGY]  lhType  =  rhType!=  Token.EQ;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  lhType  =  rhType!=  Token.EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	lhType  =  rhType!=  Token.EQ;	      	non-compiled	[CE]  orphaned  case	7	None	replace
71	[BUG]  [BUGGY]  ln  =  left.getFirstChild().getString();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  ln  =  left.getFirstChild().getString();  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	ln  =  left.getFirstChild().getString();	      	non-compiled	[CE]  orphaned  case	7	None	replace
72	[BUG]  [BUGGY]  Node  lh  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  Node  lh  =  left.getFirstChild();  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  lh  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
73	[BUG]  [BUGGY]  result  =  lhType!=  Integer.EQ;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType!=  Integer.EQ;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  Integer.EQ;	  result    =    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	4	None	replace
74	[BUG]  [BUGGY]  result  =  lhType!=  Integer.MIN_VALUE;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType!=  Integer.MIN_VALUE;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  Integer.MIN_VALUE;	  result    =    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	4	None	replace
75	[BUG]  [BUGGY]  result  =  lhType!=  Integer.MAX_VALUE;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhType!=  Integer.MAX_VALUE;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  Integer.MAX_VALUE;	  result    =    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	4	None	replace
76	[BUG]  [BUGGY]  result  =  lhtype!=  rhType;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:    [BUGGY]  result  =  lhtype!=  rhType;  [BUGGY]    break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhtype!=  rhType;	  result    =    rhType!=    lhType;    	non-compiled	[CE]  orphaned  case	6	None	replace
