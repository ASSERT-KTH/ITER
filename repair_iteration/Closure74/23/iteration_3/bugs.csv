bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  rhType  >=  lhType  +  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  >=  lhType  +  1;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  >=  lhType  +  1;	  result    =    lhType    >=    rhType    +    1;    	non-compiled	[CE]  orphaned  case	5	None	replace
2	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	30	None	replace
3	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	30	None	replace
4	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	30	None	replace
5	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	30	None	replace
6	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	30	None	replace
7	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&  lhType  ==  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  &&  lhType  ==  Token.EXPR_RESULT;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&  lhType  ==  Token.EXPR_RESULT;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	18	None	replace
8	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  ||  lhType  ==  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  ==  lhType  ||  lhType  ==  Token.EXPR_RESULT;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  lhType  ||  lhType  ==  Token.EXPR_RESULT;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	18	None	replace
9	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&  lhType  ==  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&  lhType  ==  Token.EXPR_RESULT;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&  lhType  ==  Token.EXPR_RESULT;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	18	None	replace
10	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||  lhType!=  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  ||  lhType!=  Token.EXPR_RESULT;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||  lhType!=  Token.EXPR_RESULT;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	18	None	replace
11	[BUG]  [BUGGY]  result  =  lhType!=  rhType  ||  lhType  ==  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  ||  lhType  ==  Token.EXPR_RESULT;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  ||  lhType  ==  Token.EXPR_RESULT;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	18	None	replace
12	[BUG]  [BUGGY]  result  =  lhType  ==  rhType)||  lhType  ==  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType)||  lhType  ==  Token.EXPR_RESULT;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType)||  lhType  ==  Token.EXPR_RESULT;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	18	None	replace
13	[BUG]  [BUGGY]  result  =  lhType!=  n;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  n;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  n;	  result    =    rhType    >>    EQ;    	non-compiled	[CE]  orphaned  case	46	None	replace
14	[BUG]  [BUGGY]  Node  lh  =  left.getLastChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  lh  =  left.getLastChild();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  lh  =  left.getLastChild();	  Node    lh    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	72	None	replace
15	[BUG]  [BUGGY]  Node  lh  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  lh  =  right.getFirstChild();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  lh  =  right.getFirstChild();	  Node    lh    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	72	None	replace
16	[BUG]  [BUGGY]  Node  lh  =  left.getNext();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  lh  =  left.getNext();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  lh  =  left.getNext();	  Node    lh    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	72	None	replace
17	[BUG]  [BUGGY]  Node  lh  =  right.getLastChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  lh  =  right.getLastChild();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  lh  =  right.getLastChild();	  Node    lh    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	72	None	replace
18	[BUG]  [BUGGY]  Node  lh  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  lh  =  left.removeFirstChild();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  lh  =  left.removeFirstChild();	  Node    lh    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	72	None	replace
19	[BUG]  [BUGGY]  Node  lh  =  left.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  lh  =  left.getFirstChild().getNext();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  lh  =  left.getFirstChild().getNext();	  Node    lh    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	72	None	replace
20	[BUG]  [BUGGY]  result  =  lhType  ==  n;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  n;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  n;	  result    =    rhType    ==    EQ;    	non-compiled	[CE]  orphaned  case	41	None	replace
21	[BUG]  [BUGGY]  result  =  rhType!=  lhType  +  3;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  lhType  +  3;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  lhType  +  3;	  result    =    lhType!=    rhType    +    3;    	non-compiled	[CE]  orphaned  case	59	None	replace
22	[BUG]  [BUGGY]  result  =  rhType  >>  lhType  +  3;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  >>  lhType  +  3;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  >>  lhType  +  3;	  result    =    lhType!=    rhType    +    3;    	non-compiled	[CE]  orphaned  case	59	None	replace
23	[BUG]  [BUGGY]  result  =  rhType!=  lhType  &&  lhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  lhType  &&  lhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  lhType  &&  lhType  ==  Token.EQ;	  result    =    lhType!=    rhType    &&    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	17	None	replace
24	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&  lhType!=  Token.EQ;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  &&  lhType!=  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&  lhType!=  Token.EQ;	  result    =    lhType!=    rhType    &&    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	17	None	replace
25	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&  op  ==  Token.EQ;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  &&  op  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&  op  ==  Token.EQ;	  result    =    lhType!=    rhType    &&    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	17	None	replace
26	[BUG]  [BUGGY]  Result  =  lhType  ==  rhType;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Result  =  lhType  ==  rhType;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Result  =  lhType  ==  rhType;	  Result    =    lhType!=    rhType;    	non-compiled	[CE]  orphaned  case	56	None	replace
27	[BUG]  [BUGGY]  Result  =  rhType!=  lhType;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Result  =  rhType!=  lhType;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Result  =  rhType!=  lhType;	  Result    =    lhType!=    rhType;    	non-compiled	[CE]  orphaned  case	56	None	replace
28	[BUG]  [BUGGY]  Node  ln  =  left.getLastChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  ln  =  left.getLastChild();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  ln  =  left.getLastChild();	  Node    ln    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	45	None	replace
29	[BUG]  [BUGGY]  Node  ln  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  ln  =  right.getFirstChild();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  ln  =  right.getFirstChild();	  Node    ln    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	45	None	replace
30	[BUG]  [BUGGY]  Node  ln  =  left.getNext();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  ln  =  left.getNext();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  ln  =  left.getNext();	  Node    ln    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	45	None	replace
31	[BUG]  [BUGGY]  Node  ln  =  left.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  ln  =  left.getFirstChild().getNext();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  ln  =  left.getFirstChild().getNext();	  Node    ln    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	45	None	replace
32	[BUG]  [BUGGY]  Node  ln  =  right.getLastChild();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  ln  =  right.getLastChild();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  ln  =  right.getLastChild();	  Node    ln    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	45	None	replace
33	[BUG]  [BUGGY]  Node  ln  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  ln  =  left.removeFirstChild();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  ln  =  left.removeFirstChild();	  Node    ln    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	45	None	replace
34	[BUG]  [BUGGY]  result  =  rhType!=  lhType  ||  lhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  lhType  ||  lhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  lhType  ||  lhType  ==  Token.EQ;	  result    =    lhType!=    rhType    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	50	None	replace
35	[BUG]  [BUGGY]  result  =  rhType!=  rhType  +  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  rhType  +  1;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  rhType  +  1;	  result    =    rhType    >>    lhType    +    1;    	non-compiled	[CE]  orphaned  case	26	None	replace
36	[BUG]  [BUGGY]  result  =  rhType  ==  rhType  +  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  ==  rhType  +  1;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  rhType  +  1;	  result    =    rhType    >>    lhType    +    1;    	non-compiled	[CE]  orphaned  case	26	None	replace
37	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  ||  lhType!=  Token.EQ;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  ==  lhType  ||  lhType!=  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  lhType  ||  lhType!=  Token.EQ;	  result    =    lhType    ==    rhType    ||    lhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	19	None	replace
38	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&  lhType!=  Token.EQ;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&  lhType!=  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&  lhType!=  Token.EQ;	  result    =    lhType    ==    rhType    ||    lhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	19	None	replace
39	[BUG]  [BUGGY]  result  =  lhType  ==  rhType)||  lhType!=  Token.EQ;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType)||  lhType!=  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType)||  lhType!=  Token.EQ;	  result    =    lhType    ==    rhType    ||    lhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	19	None	replace
40	[BUG]  [BUGGY]  result  =  rhType!=  lhType  ||  lhType!=  Token.EQ;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  lhType  ||  lhType!=  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  lhType  ||  lhType!=  Token.EQ;	  result    =    lhType!=    rhType    ||    lhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	69	None	replace
41	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  +  2;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  ==  lhType  +  2;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  lhType  +  2;	  result    =    lhType    ==    rhType    +    2;    	non-compiled	[CE]  orphaned  case	3	None	replace
42	[BUG]  [BUGGY]  result  =  lhType  >>  Token.EQ;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  >>  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >>  Token.EQ;	  result    =    rhType    >>    Token.EQ;    	non-compiled	[CE]  orphaned  case	51	None	replace
43	[BUG]  [BUGGY]  Node  lhType  =  left.getLastChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  lhType  =  left.getLastChild();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  lhType  =  left.getLastChild();	  Node    lhType    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	44	None	replace
44	[BUG]  [BUGGY]  Node  lhType  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  lhType  =  right.getFirstChild();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  lhType  =  right.getFirstChild();	  Node    lhType    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	44	None	replace
45	[BUG]  [BUGGY]  Node  lhType  =  left.getNext();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  lhType  =  left.getNext();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  lhType  =  left.getNext();	  Node    lhType    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	44	None	replace
46	[BUG]  [BUGGY]  Node  lhType  =  left.getString();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  lhType  =  left.getString();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  lhType  =  left.getString();	  Node    lhType    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	44	None	replace
47	[BUG]  [BUGGY]  Node  lhType  =  right.getLastChild();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  lhType  =  right.getLastChild();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  lhType  =  right.getLastChild();	  Node    lhType    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	44	None	replace
48	[BUG]  [BUGGY]  Node  lhType  =  left.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  lhType  =  left.getFirstChild().getNext();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  lhType  =  left.getFirstChild().getNext();	  Node    lhType    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	44	None	replace
49	[BUG]  [BUGGY]  result  =  rhType!=  lhType  +  2;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  lhType  +  2;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  lhType  +  2;	  result    =    lhType!=    rhType    +    2;    	non-compiled	[CE]  orphaned  case	25	None	replace
50	[BUG]  [BUGGY]  result  =  rhType  >>  lhType  +  2;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  >>  lhType  +  2;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  >>  lhType  +  2;	  result    =    lhType!=    rhType    +    2;    	non-compiled	[CE]  orphaned  case	25	None	replace
51	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	57	None	replace
52	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	57	None	replace
53	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    rhType    ==    lhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr    	non-compiled	[CE]  orphaned  case	36	None	replace
54	[BUG]  [BUGGY]  result  =  rhType!=  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType!=    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr    	non-compiled	[CE]  orphaned  case	53	None	replace
55	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty    	non-compiled	[CE]  orphaned  case	55	None	replace
56	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty    	non-compiled	[CE]  orphaned  case	55	None	replace
57	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&  lhType  ==  Token.NAME;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  &&  lhType  ==  Token.NAME;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&  lhType  ==  Token.NAME;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	20	None	replace
58	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  ||  lhType  ==  Token.NAME;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  ==  lhType  ||  lhType  ==  Token.NAME;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  lhType  ||  lhType  ==  Token.NAME;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	20	None	replace
59	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&  lhType  ==  Token.NAME;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&  lhType  ==  Token.NAME;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&  lhType  ==  Token.NAME;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	20	None	replace
60	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||  lhType!=  Token.NAME;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  ||  lhType!=  Token.NAME;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||  lhType!=  Token.NAME;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	20	None	replace
61	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&  lhType!=  Token.NAME;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  &&  lhType!=  Token.NAME;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&  lhType!=  Token.NAME;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	20	None	replace
62	[BUG]  [BUGGY]  result  =  lhType!=  rhType  ||  lhType  ==  Token.NAME;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  ||  lhType  ==  Token.NAME;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  ||  lhType  ==  Token.NAME;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	20	None	replace
63	[BUG]  [BUGGY]  result  =  rhType  >=  lhType;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  >=  lhType;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  >=  lhType;	  result    =    lhType    >=    rhType;    	non-compiled	[CE]  orphaned  case	21	None	replace
64	[BUG]  [BUGGY]  result  =  rhType  ==  lhType;  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  ==  lhType;  break;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  lhType;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	43	None	replace
65	[BUG]  [BUGGY]  result  =  lhType  ==  Token.EQ;  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  Token.EQ;  break;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Token.EQ;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	43	None	replace
66	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  1;  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  +  1;  break;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  +  1;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	43	None	replace
67	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.restrictByNotNullOrUndefined();  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType.restrictByNotNullOrUndefined();  break;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType.restrictByNotNullOrUndefined();  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	43	None	replace
68	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  +  3;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  ==  lhType  +  3;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  lhType  +  3;	  result    =    lhType    ==    rhType    +    3;    	non-compiled	[CE]  orphaned  case	6	None	replace
69	[BUG]  [BUGGY]  result  =  lhType  ==  Token.EQ  &&  lhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  Token.EQ  &&  lhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Token.EQ  &&  lhType  ==  Token.EQ;	  result    =    lhType    ==    Token.EQ    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	60	None	replace
70	[BUG]  [BUGGY]  result  =  rhType  ==  Token.EQ  ||  lhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  ==  Token.EQ  ||  lhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  Token.EQ  ||  lhType  ==  Token.EQ;	  result    =    lhType    ==    Token.EQ    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	60	None	replace
71	[BUG]  [BUGGY]  result  =  lhType!=  Token.EQ  ||  rhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  Token.EQ  ||  rhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  Token.EQ  ||  rhType  ==  Token.EQ;	  result    =    lhType    ==    Token.EQ    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	60	None	replace
72	[BUG]  [BUGGY]  result  =  lhType  ==  token.EQ  ||  rhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  token.EQ  ||  rhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  token.EQ  ||  rhType  ==  Token.EQ;	  result    =    lhType    ==    Token.EQ    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	60	None	replace
73	[BUG]  [BUGGY]  result  =  rhType!=  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  result    =    lhType!=    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	65	None	replace
74	[BUG]  [BUGGY]  result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  result    =    lhType!=    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	65	None	replace
75	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||  op  ==  Token.EQ;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  ||  op  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||  op  ==  Token.EQ;	  result    =    lhType!=    rhType    ||    op    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	68	None	replace
76	[BUG]  [BUGGY]  result  =  rhType!=  lhType  ||  op  ==  Token.EQ;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  lhType  ||  op  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  lhType  ||  op  ==  Token.EQ;	  result    =    lhType!=    rhType    ||    op    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	68	None	replace
77	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&  op  ==  Token.EQ;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&  op  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&  op  ==  Token.EQ;	  result    =    lhType!=    rhType    ||    op    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	68	None	replace
78	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  ||  op  ==  Token.EQ;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  ==  lhType  ||  op  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  lhType  ||  op  ==  Token.EQ;	  result    =    lhType!=    rhType    ||    op    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	68	None	replace
79	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||  op  ==  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  ||  op  ==  Token.EXPR_RESULT;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||  op  ==  Token.EXPR_RESULT;	  result    =    lhType!=    rhType    ||    op    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	68	None	replace
80	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType!=    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	66	None	replace
81	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType!=    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	66	None	replace
82	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType!=    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	66	None	replace
83	[BUG]  [BUGGY]  result  =  rhType!=  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType!=    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	66	None	replace
84	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType!=    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	66	None	replace
85	[BUG]  [BUGGY]  result  =  rhType!=  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType!=    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	66	None	replace
86	[BUG]  [BUGGY]  result  =  rhType!=  Integer.MIN_VALUE;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  Integer.MIN_VALUE;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  Integer.MIN_VALUE;	  result    =    lhType!=    Integer.MIN_VALUE;    	non-compiled	[CE]  orphaned  case	74	None	replace
87	[BUG]  [BUGGY]  result  =  rhType  >>  Integer.MIN_VALUE;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  >>  Integer.MIN_VALUE;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  >>  Integer.MIN_VALUE;	  result    =    lhType!=    Integer.MIN_VALUE;    	non-compiled	[CE]  orphaned  case	74	None	replace
88	[BUG]  [BUGGY]  result  =  rhType  ==  Integer.MIN_VALUE;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  ==  Integer.MIN_VALUE;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  Integer.MIN_VALUE;	  result    =    lhType!=    Integer.MIN_VALUE;    	non-compiled	[CE]  orphaned  case	74	None	replace
89	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr    	non-compiled	[CE]  orphaned  case	54	None	replace
90	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr    	non-compiled	[CE]  orphaned  case	54	None	replace
91	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr    	non-compiled	[CE]  orphaned  case	54	None	replace
92	[BUG]  [BUGGY]  result  =  rhType!=  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty	  result    =    lhType!=    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty    	non-compiled	[CE]  orphaned  case	63	None	replace
93	[BUG]  [BUGGY]  result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty	  result    =    lhType!=    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty    	non-compiled	[CE]  orphaned  case	63	None	replace
94	[BUG]  [BUGGY]  result  =  rhType  ==  rhType  &&  lhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  ==  rhType  &&  lhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  rhType  &&  lhType  ==  Token.EQ;	  result    =    rhType    ==    lhType    &&    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	49	None	replace
95	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr    	non-compiled	[CE]  orphaned  case	10	None	replace
96	[BUG]  [BUGGY]  result  =  rhType  ==  rhType  ||  lhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  ==  rhType  ||  lhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  rhType  ||  lhType  ==  Token.EQ;	  result    =    rhType    ==    lhType    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	16	None	replace
97	[BUG]  [BUGGY]  result  =  lhType  [Delete]  rhType;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  [Delete]  rhType;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  [Delete]  rhType;	  result    =    rhType!=    rhType;    	non-compiled	[CE]  orphaned  case	22	None	replace
98	[BUG]  [BUGGY]  lhType  =  rhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  lhType  =  rhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	lhType  =  rhType  ==  Token.EQ;	  lhType    =    rhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	70	None	replace
99	[BUG]  [BUGGY]  lhType  =  rhType  >>  Token.EQ;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  lhType  =  rhType  >>  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	lhType  =  rhType  >>  Token.EQ;	  lhType    =    rhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	70	None	replace
100	[BUG]  [BUGGY]  lhType  =  rhType  >=  Token.EQ;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  lhType  =  rhType  >=  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	lhType  =  rhType  >=  Token.EQ;	  lhType    =    rhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	70	None	replace
101	[BUG]  [BUGGY]  lhType  =  lhType  ==  rhType;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  lhType  =  lhType  ==  rhType;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	lhType  =  lhType  ==  rhType;	  lhType    =    rhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	70	None	replace
102	[BUG]  [BUGGY]  result  =  lhType  ==  Integer.MIN_VALUE;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  Integer.MIN_VALUE;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Integer.MIN_VALUE;	  result    =    op    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	35	None	replace
103	[BUG]  [BUGGY]  result  =  lhType  ==  Integer.MAX_VALUE;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  Integer.MAX_VALUE;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Integer.MAX_VALUE;	  result    =    op    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	35	None	replace
104	[BUG]  [BUGGY]  result  =  lhType  >=  Token.EQ;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  >=  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >=  Token.EQ;	  result    =    op    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	35	None	replace
105	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||  rhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  ||  rhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||  rhType  ==  Token.EQ;	  result    =    lhType    ==    Token.EQ    ||    rhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	61	None	replace
106	[BUG]  [BUGGY]  result  =  lhType  ==  Token.EQ  &&  rhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  Token.EQ  &&  rhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Token.EQ  &&  rhType  ==  Token.EQ;	  result    =    lhType    ==    Token.EQ    ||    rhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	61	None	replace
107	[BUG]  [BUGGY]  result  =  lhType  ==  Token.EQ  ||  rhType  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  Token.EQ  ||  rhType  ==  Token.FUNCTION;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Token.EQ  ||  rhType  ==  Token.FUNCTION;	  result    =    lhType    ==    Token.EQ    ||    rhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	61	None	replace
108	[BUG]  [BUGGY]  result  =  lhType  ==  Token.EQ  ||  rhType  ==  Token.NAME;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  Token.EQ  ||  rhType  ==  Token.NAME;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Token.EQ  ||  rhType  ==  Token.NAME;	  result    =    lhType    ==    Token.EQ    ||    rhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	61	None	replace
109	[BUG]  [BUGGY]  result  =  rhType  >=  lhType  +  2;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  >=  lhType  +  2;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  >=  lhType  +  2;	  result    =    lhType    >>    rhType    +    2;    	non-compiled	[CE]  orphaned  case	47	None	replace
110	[BUG]  [BUGGY]  ln  =  left.getLastChild().getString();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  ln  =  left.getLastChild().getString();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	ln  =  left.getLastChild().getString();	  ln    =    left.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	71	None	replace
111	[BUG]  [BUGGY]  ln  =  left.getFirstChild().getString()  +  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  ln  =  left.getFirstChild().getString()  +  1;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	ln  =  left.getFirstChild().getString()  +  1;	  ln    =    left.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	71	None	replace
112	[BUG]  [BUGGY]  ln  =  right.getFirstChild().getString();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  ln  =  right.getFirstChild().getString();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	ln  =  right.getFirstChild().getString();	  ln    =    left.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	71	None	replace
113	[BUG]  [BUGGY]  ln  =  n.getFirstChild().getString();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  ln  =  n.getFirstChild().getString();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	ln  =  n.getFirstChild().getString();	  ln    =    left.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	71	None	replace
114	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  lhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	29	None	replace
115	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	13	None	replace
116	[BUG]  [BUGGY]  result  =  rhType!=  Integer.MAX_VALUE;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  Integer.MAX_VALUE;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  Integer.MAX_VALUE;	  result    =    lhType!=    Integer.MAX_VALUE;    	non-compiled	[CE]  orphaned  case	75	None	replace
117	[BUG]  [BUGGY]  result  =  rhType  >>  Integer.MAX_VALUE;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  >>  Integer.MAX_VALUE;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  >>  Integer.MAX_VALUE;	  result    =    lhType!=    Integer.MAX_VALUE;    	non-compiled	[CE]  orphaned  case	75	None	replace
118	[BUG]  [BUGGY]  result  =  rhType!=  lhtype;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  lhtype;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  lhtype;	  result    =    lhtype!=    rhType;    	non-compiled	[CE]  orphaned  case	76	None	replace
119	[BUG]  [BUGGY]  result  =  rhtype!=  lhType;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhtype!=  lhType;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhtype!=  lhType;	  result    =    lhtype!=    rhType;    	non-compiled	[CE]  orphaned  case	76	None	replace
120	[BUG]  [BUGGY]  result  =  rhType!=  Integer.EQ;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  Integer.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  Integer.EQ;	  result    =    lhType!=    Integer.EQ;    	non-compiled	[CE]  orphaned  case	73	None	replace
121	[BUG]  [BUGGY]  result  =  rhType  >>  Integer.EQ;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  >>  Integer.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  >>  Integer.EQ;	  result    =    lhType!=    Integer.EQ;    	non-compiled	[CE]  orphaned  case	73	None	replace
122	[BUG]  [BUGGY]  result  =  rhType  ==  Integer.EQ;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  ==  Integer.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  Integer.EQ;	  result    =    lhType!=    Integer.EQ;    	non-compiled	[CE]  orphaned  case	73	None	replace
123	[BUG]  [BUGGY]  result  =  rhType!=  lhType;  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  lhType;  break;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  lhType;  break;	  result    =    lhType!=    rhType;    break;    	non-compiled	[CE]  orphaned  case	42	None	replace
124	[BUG]  [BUGGY]  result  =  lhType  >>  rhType;  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  >>  rhType;  break;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >>  rhType;  break;	  result    =    lhType!=    rhType;    break;    	non-compiled	[CE]  orphaned  case	42	None	replace
125	[BUG]  [BUGGY]  result  =  lhType  >=  rhType;  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  >=  rhType;  break;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >=  rhType;  break;	  result    =    lhType!=    rhType;    break;    	non-compiled	[CE]  orphaned  case	42	None	replace
126	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType    ==    rhType    ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	28	None	replace
127	[BUG]  [BUGGY]  result  =  rhType!=  op;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  op;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  op;	  result    =    op!=    rhType;    	non-compiled	[CE]  orphaned  case	58	None	replace
128	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&  n  ==  Token.EQ;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  &&  n  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&  n  ==  Token.EQ;	  result    =    rhType    ==    lhType    &&    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	49	None	replace
129	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&  thType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  &&  thType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&  thType  ==  Token.EQ;	  result    =    rhType    ==    lhType    &&    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	49	None	replace
130	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	57	None	replace
131	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	57	None	replace
132	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	57	None	replace
133	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	57	None	replace
134	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr    	non-compiled	[CE]  orphaned  case	10	None	replace
135	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  &&  rhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  ==  lhType  &&  rhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  lhType  &&  rhType  ==  Token.EQ;	  result    =    lhType    ==    rhType    &&    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	15	None	replace
136	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&  rhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  &&  rhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&  rhType  ==  Token.EQ;	  result    =    lhType    ==    rhType    &&    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	15	None	replace
137	[BUG]  [BUGGY]  Result  =  lhType  >>  rhType;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Result  =  lhType  >>  rhType;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Result  =  lhType  >>  rhType;	  Result    =    lhType!=    rhType;    	non-compiled	[CE]  orphaned  case	56	None	replace
138	[BUG]  [BUGGY]  Node  ln  =  left.cloneTree();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  ln  =  left.cloneTree();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  ln  =  left.cloneTree();	  Node    ln    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	45	None	replace
139	[BUG]  [BUGGY]  result  =  rhType!=  lhType  &&  rhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  lhType  &&  rhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  lhType  &&  rhType  ==  Token.EQ;	  result    =    lhType    >>    rhType    &&    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	48	None	replace
140	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  &&  lhType  ==  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  ==  lhType  &&  lhType  ==  Token.EXPR_RESULT;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  lhType  &&  lhType  ==  Token.EXPR_RESULT;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	18	None	replace
141	[BUG]  [BUGGY]  result  =  lhType  >>  rhType  &&  lhType  ==  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  >>  rhType  &&  lhType  ==  Token.EXPR_RESULT;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >>  rhType  &&  lhType  ==  Token.EXPR_RESULT;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	18	None	replace
142	[BUG]  [BUGGY]  result  =  rhType!=  lh;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  lh;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  lh;	  result    =    lhtype!=    rhType;    	non-compiled	[CE]  orphaned  case	76	None	replace
143	[BUG]  [BUGGY]  Node  lhType  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  lhType  =  left.removeFirstChild();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  lhType  =  left.removeFirstChild();	  Node    lhType    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	44	None	replace
144	[BUG]  [BUGGY]  result  =  lhType  [Delete]  Token.EQ;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  [Delete]  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  [Delete]  Token.EQ;	  result    =    rhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	34	None	replace
145	[BUG]  [BUGGY]  ln  =  left.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  ln  =  left.getFirstChild().getNext();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	ln  =  left.getFirstChild().getNext();	  ln    =    left.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	71	None	replace
146	[BUG]  [BUGGY]  ln  =  left.getNext().getString();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  ln  =  left.getNext().getString();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	ln  =  left.getNext().getString();	  ln    =    left.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	71	None	replace
147	[BUG]  [BUGGY]  result  =  lhType  >=  rhType  &&  lhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  >=  rhType  &&  lhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >=  rhType  &&  lhType  ==  Token.EQ;	  result    =    lhType!=    rhType    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	50	None	replace
148	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty    	non-compiled	[CE]  orphaned  case	55	None	replace
149	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType    ==    rhType    ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	28	None	replace
150	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty	  result    =    lhType!=    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE    	non-compiled	[CE]  orphaned  case	65	None	replace
151	[BUG]  [BUGGY]  result  =  lhType  >>  EQ;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  >>  EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >>  EQ;	  result    =    rhType!=    EQ;    	non-compiled	[CE]  orphaned  case	40	None	replace
152	[BUG]  [BUGGY]  result  =  lhType  >=  EQ;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  >=  EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >=  EQ;	  result    =    rhType!=    EQ;    	non-compiled	[CE]  orphaned  case	40	None	replace
153	[BUG]  [BUGGY]  result  =  lhType  >>  rhType  &&  lhType!=  Token.EQ;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  >>  rhType  &&  lhType!=  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >>  rhType  &&  lhType!=  Token.EQ;	  result    =    lhType    ==    rhType    ||    lhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	19	None	replace
154	[BUG]  [BUGGY]  result  =  n!=  lhType;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  n!=  lhType;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  n!=  lhType;	  result    =    rhType    >>    lhType;    	non-compiled	[CE]  orphaned  case	1	None	replace
155	[BUG]  [BUGGY]  result  =  rhType!=  rhType  &&  lhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  rhType  &&  lhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  rhType  &&  lhType  ==  Token.EQ;	  result    =    rhType    ==    lhType    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	16	None	replace
156	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||  thType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  ||  thType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||  thType  ==  Token.EQ;	  result    =    rhType    ==    lhType    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	16	None	replace
157	[BUG]  [BUGGY]  result  =  op  ==  Token.EQ  ||  op  ==  null;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  op  ==  Token.EQ  ||  op  ==  null;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  op  ==  Token.EQ  ||  op  ==  null;	  result    =    op    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	35	None	replace
158	[BUG]  [BUGGY]  result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	30	None	replace
159	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	29	None	replace
160	[BUG]  [BUGGY]  result  =  op!=  Token.EQ;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  op!=  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  op!=  Token.EQ;	  result    =    lhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	23	None	replace
161	[BUG]  [BUGGY]  result  =  op  ==  rhType;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  op  ==  rhType;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  op  ==  rhType;	  result    =    rhType    ==    rhType;    	non-compiled	[CE]  orphaned  case	38	None	replace
162	[BUG]  [BUGGY]  result  =  lhType  >>  rhType  +  3;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  >>  rhType  +  3;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >>  rhType  +  3;	  result    =    rhType    >>    lhType    +    1;    	non-compiled	[CE]  orphaned  case	26	None	replace
163	[BUG]  [BUGGY]  lhType  =  op!=  Token.EQ;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  lhType  =  op!=  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	lhType  =  op!=  Token.EQ;	  lhType    =    rhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	70	None	replace
164	[BUG]  [BUGGY]  lhType  =  rhType!=  Token.EQUALS;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  lhType  =  rhType!=  Token.EQUALS;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	lhType  =  rhType!=  Token.EQUALS;	  lhType    =    rhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	70	None	replace
165	[BUG]  [BUGGY]  result  =  lhType!=  Token.EQ  &&  rhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  Token.EQ  &&  rhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  Token.EQ  &&  rhType  ==  Token.EQ;	  result    =    lhType    ==    Token.EQ    ||    rhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	61	None	replace
166	[BUG]  [BUGGY]  result  =  lhType  >>  Token.EQ  &&  rhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  >>  Token.EQ  &&  rhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >>  Token.EQ  &&  rhType  ==  Token.EQ;	  result    =    lhType    ==    Token.EQ    ||    rhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	61	None	replace
167	[BUG]  [BUGGY]  result  =  lhType  ==  Token.EQ  ||  rhType!=  Token.EQ;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  Token.EQ  ||  rhType!=  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Token.EQ  ||  rhType!=  Token.EQ;	  result    =    lhType    ==    Token.EQ    ||    rhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	61	None	replace
168	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  &&  lhType  ==  Token.NAME;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  ==  lhType  &&  lhType  ==  Token.NAME;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  ==  lhType  &&  lhType  ==  Token.NAME;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	20	None	replace
169	[BUG]  [BUGGY]  result  =  lhType  >>  rhType  &&  lhType  ==  Token.NAME;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  >>  rhType  &&  lhType  ==  Token.NAME;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >>  rhType  &&  lhType  ==  Token.NAME;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	20	None	replace
170	[BUG]  [BUGGY]  result  =  lhType!=  Token.EQ  &&  lhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  Token.EQ  &&  lhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  Token.EQ  &&  lhType  ==  Token.EQ;	  result    =    lhType    ==    Token.EQ    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	60	None	replace
171	[BUG]  [BUGGY]  result  =  lhType  >>  Token.EQ  &&  lhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  >>  Token.EQ  &&  lhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >>  Token.EQ  &&  lhType  ==  Token.EQ;	  result    =    lhType    ==    Token.EQ    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	60	None	replace
172	[BUG]  [BUGGY]  result  =  lhType  >>  Token.EQ  ||  rhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  >>  Token.EQ  ||  rhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >>  Token.EQ  ||  rhType  ==  Token.EQ;	  result    =    lhType    ==    Token.EQ    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	60	None	replace
173	[BUG]  [BUGGY]  result  =  lhType  >>  rhType  &&  op  ==  Token.EQ;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  >>  rhType  &&  op  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >>  rhType  &&  op  ==  Token.EQ;	  result    =    lhType!=    rhType    ||    op    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	68	None	replace
174	[BUG]  [BUGGY]  result  =  op!=  rhType  ||  lhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  op!=  rhType  ||  lhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  op!=  rhType  ||  lhType  ==  Token.EQ;	  result    =    lhType!=    rhType    ||    op    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	68	None	replace
175	[BUG]  [BUGGY]  Node  lh  =  left.cloneTree();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  lh  =  left.cloneTree();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  lh  =  left.cloneTree();	  Node    lh    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	72	None	replace
176	[BUG]  [BUGGY]  Node  lh  =  left.next();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  lh  =  left.next();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  lh  =  left.next();	  Node    lh    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	72	None	replace
177	[BUG]  [BUGGY]  result  =  lhType  >>  n;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  >>  n;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >>  n;	  result    =    rhType    ==    n;    	non-compiled	[CE]  orphaned  case	39	None	replace
178	[BUG]  [BUGGY]  result  =  rhType  >>  lhType;  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType  >>  lhType;  break;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType  >>  lhType;  break;	  result    =    lhType!=    rhType;    break;    	non-compiled	[CE]  orphaned  case	42	None	replace
179	[BUG]  [BUGGY]  result  =  lhType!=  rhType  *  3;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  *  3;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  *  3;	  result    =    lhType!=    rhType    +    3;    	non-compiled	[CE]  orphaned  case	59	None	replace
180	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	30	None	replace
181	[BUG]  [BUGGY]  result  =  lhType!=  rhType  +  1;  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  +  1;  break;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  +  1;  break;	  result    =    lhType!=    rhType;    break;    	non-compiled	[CE]  orphaned  case	42	None	replace
182	[BUG]  [BUGGY]  result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    ==    rhType    ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr    	non-compiled	[CE]  orphaned  case	9	None	replace
183	[BUG]  [BUGGY]  result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    ==    rhType    ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr    	non-compiled	[CE]  orphaned  case	9	None	replace
184	[BUG]  [BUGGY]  result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType    ==    rhType    ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	28	None	replace
185	[BUG]  [BUGGY]  result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;	  result    =    lhType    ==    rhType    ||!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEqual;    	non-compiled	[CE]  orphaned  case	28	None	replace
186	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&  Token.EQ;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  &&  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&  Token.EQ;	  result    =    rhType    ==    lhType    &&    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	49	None	replace
187	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  &&  token  ==  Token.EQ;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  &&  token  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  &&  token  ==  Token.EQ;	  result    =    rhType    ==    lhType    &&    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	49	None	replace
188	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&  Token.EQ;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&  Token.EQ;	  result    =    rhType    ==    lhType    &&    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	49	None	replace
189	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  result    =    lhType    >=    rhType;    	non-compiled	[CE]  orphaned  case	21	None	replace
190	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  result    =    lhType    >=    rhType;    	non-compiled	[CE]  orphaned  case	21	None	replace
191	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    >=    rhType;    	non-compiled	[CE]  orphaned  case	21	None	replace
192	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  result    =    lhType    >=    rhType;    	non-compiled	[CE]  orphaned  case	21	None	replace
193	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  result    =    lhType    >=    rhType;    	non-compiled	[CE]  orphaned  case	21	None	replace
194	[BUG]  [BUGGY]  result  =  lhType!=  Token.EQ  ||  lhType  ==  Token.EQ;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  Token.EQ  ||  lhType  ==  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  Token.EQ  ||  lhType  ==  Token.EQ;	  result    =    lhType    ==    Token.EQ    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	60	None	replace
195	[BUG]  [BUGGY]  result  =  lhType!=  rhType  +  4;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  +  4;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  +  4;	  result    =    rhType!=    lhType    +    1;    	non-compiled	[CE]  orphaned  case	24	None	replace
196	[BUG]  [BUGGY]  Node  lh  =  left.replaceChild(n,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  lh  =  left.replaceChild(n,  right);  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  lh  =  left.replaceChild(n,  right);	  Node    lh    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	72	None	replace
197	[BUG]  [BUGGY]  result  =  rhType!=  Token.EQ  ||  rhType!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  Token.EQ  ||  rhType!=  Token.FUNCTION;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  Token.EQ  ||  rhType!=  Token.FUNCTION;	  result    =    rhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	34	None	replace
198	[BUG]  [BUGGY]  result  =  rhType!=  Token.EQ  ||  rhType!=  Token.NONE;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  Token.EQ  ||  rhType!=  Token.NONE;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  Token.EQ  ||  rhType!=  Token.NONE;	  result    =    rhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	34	None	replace
199	[BUG]  [BUGGY]  result  =  rhType!=  Token.EQ  ||  rhType!=  Token.FALSE;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  Token.EQ  ||  rhType!=  Token.FALSE;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  Token.EQ  ||  rhType!=  Token.FALSE;	  result    =    rhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	34	None	replace
200	[BUG]  [BUGGY]  result  =  rhType!=  Token.EQ  ||  rhType!=  Token.NUMBER;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  rhType!=  Token.EQ  ||  rhType!=  Token.NUMBER;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  rhType!=  Token.EQ  ||  rhType!=  Token.NUMBER;	  result    =    rhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	34	None	replace
201	[BUG]  [BUGGY]  result  =  n!=  rhType;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  n!=  rhType;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  n!=  rhType;	  result    =    op!=    rhType;    	non-compiled	[CE]  orphaned  case	58	None	replace
202	[BUG]  [BUGGY]  result  =  lhType  ==  Token.EXPR_RESULT  ||  lhType  ==  Token.EXPR_NUMBER;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  Token.EXPR_RESULT  ||  lhType  ==  Token.EXPR_NUMBER;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Token.EXPR_RESULT  ||  lhType  ==  Token.EXPR_NUMBER;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	18	None	replace
203	[BUG]  [BUGGY]  result  =  lhType  ==  Token.EXPR_RESULT  ||  lhType  ==  Token.EXPR_TYPE;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  Token.EXPR_RESULT  ||  lhType  ==  Token.EXPR_TYPE;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Token.EXPR_RESULT  ||  lhType  ==  Token.EXPR_TYPE;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	18	None	replace
204	[BUG]  [BUGGY]  result  =  lhType  ==  Token.EXPR_RESULT  ||  lhType  ==  Token.EXPR_OBJECT;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  Token.EXPR_RESULT  ||  lhType  ==  Token.EXPR_OBJECT;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Token.EXPR_RESULT  ||  lhType  ==  Token.EXPR_OBJECT;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	18	None	replace
205	[BUG]  [BUGGY]  result  =  lhType  ==  Token.EXPR_RESULT  ||  rhType  ==  Token.EXPR_NUMBER;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  Token.EXPR_RESULT  ||  rhType  ==  Token.EXPR_NUMBER;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Token.EXPR_RESULT  ||  rhType  ==  Token.EXPR_NUMBER;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	18	None	replace
206	[BUG]  [BUGGY]  result  =  lhType  ==  Token.NAME  ||  lhType  ==  Token.LONG;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  Token.NAME  ||  lhType  ==  Token.LONG;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Token.NAME  ||  lhType  ==  Token.LONG;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	20	None	replace
207	[BUG]  [BUGGY]  result  =  lhType  ==  Token.NAME  ||  lhType  ==  Token.TRUE;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  Token.NAME  ||  lhType  ==  Token.TRUE;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Token.NAME  ||  lhType  ==  Token.TRUE;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	20	None	replace
208	[BUG]  [BUGGY]  result  =  lhType  ==  Token.NAME  ||  lhType  ==  Token.LAST;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  Token.NAME  ||  lhType  ==  Token.LAST;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Token.NAME  ||  lhType  ==  Token.LAST;	  result    =    lhType    ==    rhType    ||    lhType    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	20	None	replace
209	[BUG]  [BUGGY]  result  =  lhType!=  rhType  *  2;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  *  2;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  *  2;	  result    =    lhType    >>    rhType    +    2;    	non-compiled	[CE]  orphaned  case	47	None	replace
210	[BUG]  [BUGGY]  result  =  lhType  >>  rhType  *  2;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  >>  rhType  *  2;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >>  rhType  *  2;	  result    =    lhType    >>    rhType    +    2;    	non-compiled	[CE]  orphaned  case	47	None	replace
211	[BUG]  [BUGGY]  result  =  lhType  ==  Integer.DEFAULT;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  Integer.DEFAULT;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Integer.DEFAULT;	  result    =    lhType!=    Integer.EQ;    	non-compiled	[CE]  orphaned  case	73	None	replace
212	[BUG]  [BUGGY]  result  =  op  ==  Token.EQ  ||  op  ==  Token.NE;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  op  ==  Token.EQ  ||  op  ==  Token.NE;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  op  ==  Token.EQ  ||  op  ==  Token.NE;	  result    =    op    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	35	None	replace
213	[BUG]  [BUGGY]  result  =  op  ==  Token.EQ  ||  op  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  op  ==  Token.EQ  ||  op  ==  Token.FUNCTION;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  op  ==  Token.EQ  ||  op  ==  Token.FUNCTION;	  result    =    op    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	35	None	replace
214	[BUG]  [BUGGY]  result  =  op  ==  Token.EQ  ||  op  ==  Token.FALSE;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  op  ==  Token.EQ  ||  op  ==  Token.FALSE;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  op  ==  Token.EQ  ||  op  ==  Token.FALSE;	  result    =    op    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	35	None	replace
215	[BUG]  [BUGGY]  result  =  op  ==  Token.EQ  ||  op  ==  Token.DO;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  op  ==  Token.EQ  ||  op  ==  Token.DO;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  op  ==  Token.EQ  ||  op  ==  Token.DO;	  result    =    op    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	35	None	replace
216	[BUG]  [BUGGY]  result  =  op  ==  Token.EQ  ||  op  ==  Token.VAR;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  op  ==  Token.EQ  ||  op  ==  Token.VAR;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  op  ==  Token.EQ  ||  op  ==  Token.VAR;	  result    =    op    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	35	None	replace
217	[BUG]  [BUGGY]  result  =  lhType!=  equals(rhType);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  equals(rhType);  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  equals(rhType);	  result    =    rhType!=    EQ;    	non-compiled	[CE]  orphaned  case	40	None	replace
218	[BUG]  [BUGGY]  result  =  lhType  >>  Integer.MIN_VALUE;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  >>  Integer.MIN_VALUE;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  >>  Integer.MIN_VALUE;	  result    =    lhType!=    Integer.MIN_VALUE;    	non-compiled	[CE]  orphaned  case	74	None	replace
219	[BUG]  [BUGGY]  result  =  lhType  [Delete]  rhType  +  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  [Delete]  rhType  +  1;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  [Delete]  rhType  +  1;	  result    =    rhType    ==    lhType    +    1;    	non-compiled	[CE]  orphaned  case	2	None	replace
220	[BUG]  [BUGGY]  ln  =  left.getFirstChild().getNext().getString();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  ln  =  left.getFirstChild().getNext().getString();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	ln  =  left.getFirstChild().getNext().getString();	  ln    =    left.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	71	None	replace
221	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  *  2;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  *  2;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  *  2;	  result    =    lhType    ==    rhType    +    2;    	non-compiled	[CE]  orphaned  case	3	None	replace
222	[BUG]  [BUGGY]  Node  ln  =  left.replaceChild(n,  right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  Node  ln  =  left.replaceChild(n,  right);  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	Node  ln  =  left.replaceChild(n,  right);	  Node    ln    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	45	None	replace
223	[BUG]  [BUGGY]  lhType  =  rhType!=  Token.EQ  ||  rhType!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  lhType  =  rhType!=  Token.EQ  ||  rhType!=  Token.FUNCTION;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	lhType  =  rhType!=  Token.EQ  ||  rhType!=  Token.FUNCTION;	  lhType    =    rhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	70	None	replace
224	[BUG]  [BUGGY]  lhType  =  rhType!=  Token.EQ  ||  rhType!=  Token.NONE;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  lhType  =  rhType!=  Token.EQ  ||  rhType!=  Token.NONE;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	lhType  =  rhType!=  Token.EQ  ||  rhType!=  Token.NONE;	  lhType    =    rhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	70	None	replace
225	[BUG]  [BUGGY]  lhType  =  rhType!=  Token.EQ  ||  rhType  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  lhType  =  rhType!=  Token.EQ  ||  rhType  ==  Token.FUNCTION;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	lhType  =  rhType!=  Token.EQ  ||  rhType  ==  Token.FUNCTION;	  lhType    =    rhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	70	None	replace
226	[BUG]  [BUGGY]  lhType  =  rhType!=  Token.EQ  ||  rhType!=  Token.FALSE;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  lhType  =  rhType!=  Token.EQ  ||  rhType!=  Token.FALSE;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	lhType  =  rhType!=  Token.EQ  ||  rhType!=  Token.FALSE;	  lhType    =    rhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	70	None	replace
227	[BUG]  [BUGGY]  lhType  =  rhType!=  Token.EQ  ||  rhType!=  Token.BLOCK;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  lhType  =  rhType!=  Token.EQ  ||  rhType!=  Token.BLOCK;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	lhType  =  rhType!=  Token.EQ  ||  rhType!=  Token.BLOCK;	  lhType    =    rhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	70	None	replace
228	[BUG]  [BUGGY]  result  =  lhType  ==  Token.EQ  ||  rhType  ==  Token.NONE;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  Token.EQ  ||  rhType  ==  Token.NONE;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Token.EQ  ||  rhType  ==  Token.NONE;	  result    =    lhType    ==    Token.EQ    ||    rhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	61	None	replace
229	[BUG]  [BUGGY]  result  =  lhType  ==  Token.EQ  ||  rhType  ==  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  Token.EQ  ||  rhType  ==  Token.EXPR_RESULT;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Token.EQ  ||  rhType  ==  Token.EXPR_RESULT;	  result    =    lhType    ==    Token.EQ    ||    rhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	61	None	replace
230	[BUG]  [BUGGY]  result  =  lhType!=  rhType.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType.restrictByNotNullOrUndefined();  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType.restrictByNotNullOrUndefined();	  result    =    lhtype!=    rhType;    	non-compiled	[CE]  orphaned  case	76	None	replace
231	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrOrEmptyOr  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrOrEmptyOr  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrOrEmptyOr	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr    	non-compiled	[CE]  orphaned  case	54	None	replace
232	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr    	non-compiled	[CE]  orphaned  case	54	None	replace
233	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrOrEmptyOrOr  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrOrEmptyOrOr  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrOrEmptyOrOr	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr    	non-compiled	[CE]  orphaned  case	54	None	replace
234	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrOr  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrOr  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrOr	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr    	non-compiled	[CE]  orphaned  case	54	None	replace
235	[BUG]  [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType!=  rhType  &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr	  result    =    lhType    ==    rhType    &&!NodeUtil.isEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOr    	non-compiled	[CE]  orphaned  case	54	None	replace
236	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  ||  Token.EQ;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  ||  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  ||  Token.EQ;	  result    =    rhType    ==    lhType    ||    lhType    ==    Token.EQ;    	non-compiled	[CE]  orphaned  case	16	None	replace
237	[BUG]  [BUGGY]  result  =  lhType  ==  Token.EQ  ||  lhType!=  Token.EQ;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  Token.EQ  ||  lhType!=  Token.EQ;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  Token.EQ  ||  lhType!=  Token.EQ;	  result    =    lhType    ==    rhType    ||    lhType!=    Token.EQ;    	non-compiled	[CE]  orphaned  case	19	None	replace
238	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  *  3;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:      [BUGGY]  result  =  lhType  ==  rhType  *  3;  [BUGGY]      break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;  break;  case  Token.GE:  case  Token.LE:  case  Token.GT:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	935	935	3	replace	result  =  lhType  ==  rhType  *  3;	  result    =    lhType    ==    rhType    +    3;    	non-compiled	[CE]  orphaned  case	6	None	replace
