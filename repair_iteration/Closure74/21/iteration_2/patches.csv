bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (result  ==  null  &&  lhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  &&  lhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  &&  lhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType!=    Token.TRUE    &&    rightType!=    Token.FALSE    &&    rightType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	43	None	replace
2	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType!=    Token.TRUE    &&    rightType!=    Token.FALSE    &&    rightType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	43	None	replace
3	[BUG]  [BUGGY]  if  (lhType  ==  null  ||  rhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  null  ||  rhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  null  ||  rhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType!=    Token.TRUE    &&    rightType!=    Token.FALSE    &&    rightType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	43	None	replace
4	[BUG]  [BUGGY]  if  (rhType  ==  null  ||  lhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType  ==  null  ||  lhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType  ==  null  ||  lhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType!=    Token.TRUE    &&    rightType!=    Token.FALSE    &&    rightType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	43	None	replace
5	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  ||  lhType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.TRUE  ||  lhType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  ||  lhType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType!=    Token.TRUE    &&    rightType!=    Token.FALSE    &&    rightType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	43	None	replace
6	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  rightType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType!=    Token.TRUE    &&    rightType!=    Token.FALSE    &&    rightType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	43	None	replace
7	[BUG]  [BUGGY]  if  (rhType  ==  null  ||  lhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType  ==  null  ||  lhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType  ==  null  ||  lhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType!=    Token.TRUE    &&    rightType!=    Token.FALSE    &&    rightType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	43	None	replace
8	[BUG]  [BUGGY]  if  (result!=  null  &&  result!=  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result!=  null  &&  result!=  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result!=  null  &&  result!=  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (result!=    null    &&    result!=    Token.TRUE    &&    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
9	[BUG]  [BUGGY]  if  (result  ==  null  &&  result!=  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  &&  result!=  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  &&  result!=  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (result!=    null    &&    result!=    Token.TRUE    &&    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
10	[BUG]  [BUGGY]  if  (result  ==  null  ||  result!=  Token.TRUE  ||  result!=  Token.FALSE  ||  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  ||  result!=  Token.TRUE  ||  result!=  Token.FALSE  ||  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  result!=  Token.TRUE  ||  result!=  Token.FALSE  ||  result!=  Token.NULL)  {	  if    (result!=    null    &&    result!=    Token.TRUE    &&    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
11	[BUG]  [BUGGY]  if  (lhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
12	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
13	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  op  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  op  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  op  ==  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
14	[BUG]  [BUGGY]  if  (rhType  ==  Token.TRUE  ||  lhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType  ==  Token.TRUE  ||  lhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType  ==  Token.TRUE  ||  lhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    ||    rhType    ==    Token.FALSE    ||    rhType    ==    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
15	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {	  if    (lhType    ==    Token.TRUE    ||    rhType    ==    Token.FALSE    ||    rhType    ==    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
16	[BUG]  [BUGGY]  n  =  right.getNext();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  n  =  right.getNext();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	n  =  right.getNext();	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	25	None	replace
17	[BUG]  [BUGGY]  n  =  left.getNext()  +  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  n  =  left.getNext()  +  1;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	n  =  left.getNext()  +  1;	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	25	None	replace
18	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  n  =  left.getLastChild();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	n  =  left.getLastChild();	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	25	None	replace
19	[BUG]  [BUGGY]  n  =  left.getParent();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  n  =  left.getParent();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	n  =  left.getParent();	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	25	None	replace
20	[BUG]  [BUGGY]  n  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  n  =  left.removeFirstChild();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	n  =  left.removeFirstChild();	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	25	None	replace
21	[BUG]  [BUGGY]  if  (lhType  ==  Token.FALSE  ||  rhType!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.FALSE  ||  rhType!=  Token.TRUE)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.FALSE  ||  rhType!=  Token.TRUE)  {	  if    (lhType    ==    Token.FALSE    &&    rhType!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
22	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE)  {	  if    (lhType    ==    Token.FALSE    &&    rhType!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
23	[BUG]  [BUGGY]  if  (rhType  ==  Token.FALSE  &&  lhType!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType  ==  Token.FALSE  &&  lhType!=  Token.TRUE)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType  ==  Token.FALSE  &&  lhType!=  Token.TRUE)  {	  if    (lhType    ==    Token.FALSE    &&    rhType!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
24	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  &&  rhType!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.FALSE  &&  rhType!=  Token.TRUE)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.FALSE  &&  rhType!=  Token.TRUE)  {	  if    (lhType    ==    Token.FALSE    &&    rhType!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
25	[BUG]  [BUGGY]  if  (lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {	  if    (rhType!=    Token.TRUE    ||    lhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
26	[BUG]  [BUGGY]  Node  rhType  =  right.getLastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  rhType  =  right.getLastChild();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	Node  rhType  =  right.getLastChild();	  Node    rhType    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	21	None	replace
27	[BUG]  [BUGGY]  Node  rhType  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  rhType  =  left.removeFirstChild();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	Node  rhType  =  left.removeFirstChild();	  Node    rhType    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	21	None	replace
28	[BUG]  [BUGGY]  Node  rhType  =  left.getString();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  rhType  =  left.getString();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	Node  rhType  =  left.getString();	  Node    rhType    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	21	None	replace
29	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
30	[BUG]  [BUGGY]  if  (lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
31	[BUG]  [BUGGY]  if  (result!=  null  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result!=  null  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result!=  null  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
32	[BUG]  [BUGGY]  if  (result!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  lhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  lhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  lhType!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
33	[BUG]  [BUGGY]  if  (rhType!=  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType!=  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType!=  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (result!=    Token.TRUE    ||    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	32	None	replace
34	[BUG]  [BUGGY]  if  (result!=  Token.TRUE  ||  result  ==  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result!=  Token.TRUE  ||  result  ==  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result!=  Token.TRUE  ||  result  ==  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (result!=    Token.TRUE    ||    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	32	None	replace
35	[BUG]  [BUGGY]  if(lhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result!=    Token.TRUE    &&    lhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	38	None	replace
36	[BUG]  [BUGGY]  Node  rhType  =  left.getNext()  +  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  rhType  =  left.getNext()  +  1;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	Node  rhType  =  left.getNext()  +  1;	  Node    rhType    =    left.getNext();    	non-compiled	[CE]  orphaned  case	22	None	replace
37	[BUG]  [BUGGY]  if  (lhType  ==  null  &&  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  null  &&  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  null  &&  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType    ==    null    ||    rhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
38	[BUG]  [BUGGY]  if  (lhType!=  null  &&  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType!=  null  &&  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  null  &&  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType    ==    null    ||    rhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
39	[BUG]  [BUGGY]  if  (lhType  ==  null  ||  rhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  null  ||  rhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  null  ||  rhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType    ==    null    ||    rhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
40	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(n,  right);  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(n,  right);  break;	  result    =    compareToUndefined(left,    right);    break;    	non-compiled	[CE]  orphaned  case	45	None	replace
41	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(left,  op);  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(left,  op);  break;	  result    =    compareToUndefined(left,    right);    break;    	non-compiled	[CE]  orphaned  case	45	None	replace
42	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(right,  left);  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(right,  left);  break;	  result    =    compareToUndefined(left,    right);    break;    	non-compiled	[CE]  orphaned  case	45	None	replace
43	[BUG]  [BUGGY]  result  =  compareToUndefined(ln,  right);  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(ln,  right);  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(ln,  right);  break;	  result    =    compareToUndefined(left,    right);    break;    	non-compiled	[CE]  orphaned  case	45	None	replace
44	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedRight);  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedRight);  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(left,  right,  undefinedRight);  break;	  result    =    compareToUndefined(left,    right);    break;    	non-compiled	[CE]  orphaned  case	45	None	replace
45	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left);  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(n,  left);  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(n,  left);  break;	  result    =    compareToUndefined(left,    right);    break;    	non-compiled	[CE]  orphaned  case	45	None	replace
46	[BUG]  [BUGGY]  if  (lhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if    (lhType    ==    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	20	None	replace
47	[BUG]  [BUGGY]  if(result  ==  null  ||  lhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  lhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  null  ||  lhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType    ==    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	20	None	replace
48	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType    ==    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	20	None	replace
49	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  &&  lhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(rhType  ==  Token.FALSE  &&  lhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(rhType  ==  Token.FALSE  &&  lhType!=  Token.NULL)  {	  if    (lhType    ==    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	20	None	replace
50	[BUG]  [BUGGY]  if  (rhType!=  Token.TRUE  ||  lhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType!=  Token.TRUE  ||  lhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType!=  Token.TRUE  ||  lhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    ||    rhType    ==    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
51	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {	  if    (lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType    ==    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
52	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {	  if    (lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType    ==    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
53	[BUG]  [BUGGY]  if  (result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {	  if    (lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType    ==    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
54	[BUG]  [BUGGY]  if(lhType  ==  Token.TRUE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType  ==  Token.TRUE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType  ==  Token.TRUE  ||  rhType!=  Token.NULL)  {	  if(lhType!=    Token.TRUE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
55	[BUG]  [BUGGY]  if(lhType!=  Token.TRUE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType!=  Token.TRUE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType!=  Token.TRUE  ||  rhType!=  Token.NULL)  {	  if(lhType!=    Token.TRUE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
56	[BUG]  [BUGGY]  if(lhType  ==  Token.TRUE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType  ==  Token.TRUE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType  ==  Token.TRUE  &&  rhType!=  Token.NULL)  {	  if(lhType!=    Token.TRUE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
57	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  &&  lhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(rhType!=  Token.TRUE  &&  lhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(rhType!=  Token.TRUE  &&  lhType!=  Token.NULL)  {	  if(lhType!=    Token.TRUE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
58	[BUG]  [BUGGY]  if(lhType!=  Token.TRUE  ||  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType!=  Token.TRUE  ||  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType!=  Token.TRUE  ||  rhType  ==  Token.NULL)  {	  if(lhType!=    Token.TRUE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
59	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.TRUE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  &&  rhType!=  Token.NULL)  {	  if(lhType!=    Token.TRUE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
60	[BUG]  [BUGGY]  if  (result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    &&    rhType!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
61	[BUG]  [BUGGY]  if  (result  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    &&    rhType!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
62	[BUG]  [BUGGY]  if  (result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  lhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  lhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  lhType!=  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    &&    rhType!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
63	[BUG]  [BUGGY]  if  (rhType!=  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType!=  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType!=  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {	  if    (lhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
64	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  n  =  right.getFirstChild();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	n  =  right.getFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	48	None	replace
65	[BUG]  [BUGGY]  n  =  right.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  n  =  right.getLastChild();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	n  =  right.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	48	None	replace
66	[BUG]  [BUGGY]  if  (rhType  ==  Token.TRUE  ||  result!=  Token.FALSE  ||  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType  ==  Token.TRUE  ||  result!=  Token.FALSE  ||  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType  ==  Token.TRUE  ||  result!=  Token.FALSE  ||  result!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    ||    result!=    Token.FALSE    ||    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
67	[BUG]  [BUGGY]  if  (result  ==  Token.TRUE  ||  result  ==  Token.FALSE  ||  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  Token.TRUE  ||  result  ==  Token.FALSE  ||  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  Token.TRUE  ||  result  ==  Token.FALSE  ||  result!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    ||    result!=    Token.FALSE    ||    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
68	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  ||  result!=  Token.FALSE  ||  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.TRUE  ||  result!=  Token.FALSE  ||  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  ||  result!=  Token.FALSE  ||  result!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    ||    result!=    Token.FALSE    ||    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
69	[BUG]  [BUGGY]  if  (result  ==  Token.TRUE  ||  result!=  Token.FALSE  ||  result  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  Token.TRUE  ||  result!=  Token.FALSE  ||  result  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  Token.TRUE  ||  result!=  Token.FALSE  ||  result  ==  Token.NULL)  {	  if    (result    ==    Token.TRUE    ||    result!=    Token.FALSE    ||    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
70	[BUG]  [BUGGY]  if  (result!=  Token.TRUE  ||  result!=  Token.FALSE  ||  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result!=  Token.TRUE  ||  result!=  Token.FALSE  ||  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result!=  Token.TRUE  ||  result!=  Token.FALSE  ||  result!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    ||    result!=    Token.FALSE    ||    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
71	[BUG]  [BUGGY]  Node  rhType  =  left.next();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  rhType  =  left.next();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	Node  rhType  =  left.next();	  Node    rhType    =    left.getLastChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
72	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  ||  op!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.TRUE  ||  op!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  ||  op!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    op!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	39	None	replace
73	[BUG]  [BUGGY]  if(lhType  ==  Token.TRUE  &&  op!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType  ==  Token.TRUE  &&  op!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType  ==  Token.TRUE  &&  op!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    op!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	39	None	replace
74	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  op!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  op!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  op!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    op!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	39	None	replace
75	[BUG]  [BUGGY]  if(op  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(op  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(op  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    op!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	39	None	replace
76	[BUG]  [BUGGY]  if(op!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(op!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(op!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    op!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	39	None	replace
77	[BUG]  [BUGGY]  if(lhType  ==  Token.TRUE  ||  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType  ==  Token.TRUE  ||  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType  ==  Token.TRUE  ||  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(lhType    ==    Token.TRUE    &&    result!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
78	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(lhType    ==    Token.TRUE    &&    result!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
79	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  ||  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.TRUE  ||  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  ||  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(lhType    ==    Token.TRUE    &&    result!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
80	[BUG]  [BUGGY]  if(rhType  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  lhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(rhType  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  lhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(rhType  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  lhType!=  Token.NULL)  {	  if(lhType    ==    Token.TRUE    &&    result!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
81	[BUG]  [BUGGY]  if(result!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(lhType    ==    Token.TRUE    &&    result!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
82	[BUG]  [BUGGY]  if(lhType!=  Token.TRUE  ||  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType!=  Token.TRUE  ||  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType!=  Token.TRUE  ||  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(lhType    ==    Token.TRUE    &&    result!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
83	[BUG]  [BUGGY]  if  (result  ==  null  &&  lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  &&  lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  &&  lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    null    &&    lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
84	[BUG]  [BUGGY]  if  (result  ==  null  ||  lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  ||  lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if    (result    ==    null    &&    lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
85	[BUG]  [BUGGY]  if  (result  ==  null  ||  lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  ||  lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    null    &&    lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
86	[BUG]  [BUGGY]  if  (rhType  ==  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType  ==  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType  ==  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    ||    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
87	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    ||    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
88	[BUG]  [BUGGY]  if  (result  ==  Token.TRUE  ||  result  ==  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  Token.TRUE  ||  result  ==  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  Token.TRUE  ||  result  ==  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    ||    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
89	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    ||    rhType    ==    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
90	[BUG]  [BUGGY]  if  (rhType!=  Token.TRUE  ||  lhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType!=  Token.TRUE  ||  lhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType!=  Token.TRUE  ||  lhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    ||    rhType    ==    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
91	[BUG]  [BUGGY]  if  (result  ==  null  &&  rhType!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  &&  rhType!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  &&  rhType!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    null    ||    rhType!=    Token.TRUE    &&    lhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	41	None	replace
92	[BUG]  [BUGGY]  if  (rhType  ==  null  ||  rhType!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType  ==  null  ||  rhType!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType  ==  null  ||  rhType!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    null    ||    rhType!=    Token.TRUE    &&    lhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	41	None	replace
93	[BUG]  [BUGGY]  ln  =  right.getString();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  ln  =  right.getString();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	ln  =  right.getString();	  ln    =    left.getString();    	non-compiled	[CE]  orphaned  case	49	None	replace
94	[BUG]  [BUGGY]  ln  =  left.getString()  +  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  ln  =  left.getString()  +  1;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	ln  =  left.getString()  +  1;	  ln    =    left.getString();    	non-compiled	[CE]  orphaned  case	49	None	replace
95	[BUG]  [BUGGY]  ln  =  n.getString();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  ln  =  n.getString();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	ln  =  n.getString();	  ln    =    left.getString();    	non-compiled	[CE]  orphaned  case	49	None	replace
96	[BUG]  [BUGGY]  if(lhType  ==  Token.FALSE  &&  rhType!=  Token.TRUE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType  ==  Token.FALSE  &&  rhType!=  Token.TRUE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType  ==  Token.FALSE  &&  rhType!=  Token.TRUE  &&  result!=  Token.NULL)  {	  if(result    ==    Token.FALSE    &&    lhType!=    Token.TRUE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
97	[BUG]  [BUGGY]  if(lhType!=  Token.FALSE  &&  rhType!=  Token.TRUE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType!=  Token.FALSE  &&  rhType!=  Token.TRUE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType!=  Token.FALSE  &&  rhType!=  Token.TRUE  &&  result!=  Token.NULL)  {	  if(result    ==    Token.FALSE    &&    lhType!=    Token.TRUE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
98	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  &&  lhType!=  Token.TRUE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.FALSE  &&  lhType!=  Token.TRUE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.FALSE  &&  lhType!=  Token.TRUE  ||  rhType!=  Token.NULL)  {	  if(result    ==    Token.FALSE    &&    lhType!=    Token.TRUE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
99	[BUG]  [BUGGY]  if(lhType  ==  Token.FALSE  &&  rhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType  ==  Token.FALSE  &&  rhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType  ==  Token.FALSE  &&  rhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.FALSE    &&    lhType!=    Token.TRUE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
100	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  ||  lhType!=  Token.TRUE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.FALSE  ||  lhType!=  Token.TRUE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.FALSE  ||  lhType!=  Token.TRUE  ||  rhType!=  Token.NULL)  {	  if(result    ==    Token.FALSE    &&    lhType!=    Token.TRUE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
101	[BUG]  [BUGGY]  if(lhType  ==  Token.FALSE  &&  result!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType  ==  Token.FALSE  &&  result!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType  ==  Token.FALSE  &&  result!=  Token.TRUE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.FALSE    &&    lhType!=    Token.TRUE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
102	[BUG]  [BUGGY]  if(rhType  ==  Token.TRUE  ||  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(rhType  ==  Token.TRUE  ||  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(rhType  ==  Token.TRUE  ||  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    ||    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
103	[BUG]  [BUGGY]  if(lhType  ==  Token.FALSE  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType  ==  Token.FALSE  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType  ==  Token.FALSE  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    ||    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
104	[BUG]  [BUGGY]  if(ln!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(ln!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(ln!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    ln!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
105	[BUG]  [BUGGY]  if(ln  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(ln  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(ln  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    ln!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
106	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  ||  ln!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.TRUE  ||  ln!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  ||  ln!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    ln!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
107	[BUG]  [BUGGY]  if(ln!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(ln!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(ln!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    ln!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
108	[BUG]  [BUGGY]  if  (lhType  ==  Token.THIS  &&  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.THIS  &&  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.THIS  &&  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (rhType    ==    null    ||    lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	16	None	replace
109	[BUG]  [BUGGY]  if  (lhType  ==  Token.FALSE  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.FALSE  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.FALSE  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (rhType    ==    null    ||    lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	16	None	replace
110	[BUG]  [BUGGY]  if  (lhType  ==  Token.FUNCTION  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.FUNCTION  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.FUNCTION  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (rhType    ==    null    ||    lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	16	None	replace
111	[BUG]  [BUGGY]  if  (lhType  ==  Token.FALSE  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.FALSE  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.FALSE  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE)  {	  if    (rhType    ==    null    ||    lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	16	None	replace
112	[BUG]  [BUGGY]  Node  rhType  =  left.getParent();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  rhType  =  left.getParent();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	Node  rhType  =  left.getParent();	  Node    rhType    =    right.getNext();    	non-compiled	[CE]  orphaned  case	27	None	replace
113	[BUG]  [BUGGY]  Node  rhType  =  right.getString();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  rhType  =  right.getString();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	Node  rhType  =  right.getString();	  Node    rhType    =    right.getNext();    	non-compiled	[CE]  orphaned  case	27	None	replace
114	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
115	[BUG]  [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
116	[BUG]  [BUGGY]  if(rhType  ==  Token.TRUE  ||  result!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(rhType  ==  Token.TRUE  ||  result!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(rhType  ==  Token.TRUE  ||  result!=  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
117	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(n,  right);  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(n,  right);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  orphaned  case	44	None	replace
118	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(left,  op);  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(left,  op);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  orphaned  case	44	None	replace
119	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(right,  left);  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(right,  left);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  orphaned  case	44	None	replace
120	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedRight);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedRight);  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(left,  right,  undefinedRight);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  orphaned  case	44	None	replace
121	[BUG]  [BUGGY]  result  =  compareToUndefined(rn,  right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(rn,  right);  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(rn,  right);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  orphaned  case	44	None	replace
122	[BUG]  [BUGGY]  result  =  compareToUndefined(ln,  right);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(ln,  right);  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(ln,  right);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  orphaned  case	44	None	replace
123	[BUG]  [BUGGY]  if(lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  result  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  result  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  result  ==  Token.NULL)  {	  if(result    ==    Token.TRUE    ||    lhType!=    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
124	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  &&  lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.TRUE  &&  lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  &&  lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    ||    lhType!=    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
125	[BUG]  [BUGGY]  if(lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  result  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  result  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  result  ==  Token.NULL)  {	  if(result    ==    Token.TRUE    ||    lhType!=    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
126	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  ||  lhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.TRUE  ||  lhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  ||  lhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    ||    lhType!=    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
127	[BUG]  [BUGGY]  if  (rhType  ==  Token.TRUE  ||  lhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType  ==  Token.TRUE  ||  lhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType  ==  Token.TRUE  ||  lhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    ||    rhType    ==    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
128	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  op!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  op!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  op!=  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    ||    rhType    ==    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
129	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType!=  Token.FUNCTION)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType!=  Token.FUNCTION)  {	  if    (lhType    ==    Token.TRUE    ||    rhType    ==    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
130	[BUG]  [BUGGY]  if  (rhType  ==  null  ||  lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType  ==  null  ||  lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType  ==  null  ||  lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType    ==    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	42	None	replace
131	[BUG]  [BUGGY]  if  (result  ==  null  &&  lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  &&  lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  &&  lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType    ==    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	42	None	replace
132	[BUG]  [BUGGY]  if  (result  ==  null  ||  lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  ||  lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType    ==    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	42	None	replace
133	[BUG]  [BUGGY]  result  =  lhType  ==  left;  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  lhType  ==  left;  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  lhType  ==  left;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
134	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  lhType);  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(left,  lhType);  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(left,  lhType);  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
135	[BUG]  [BUGGY]  result  =  undefinedRight  ==  lhType;  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  undefinedRight  ==  lhType;  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  undefinedRight  ==  lhType;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
136	[BUG]  [BUGGY]  result  =  lhType  ==  right;  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  lhType  ==  right;  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  lhType  ==  right;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
137	[BUG]  [BUGGY]  result  =  lhType  ==  Token.FUNCTION;  break;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  lhType  ==  Token.FUNCTION;  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  lhType  ==  Token.FUNCTION;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
138	[BUG]  [BUGGY]  result  =  lhType  ==  Token.THIS;  break;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  lhType  ==  Token.THIS;  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  lhType  ==  Token.THIS;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
139	[BUG]  [BUGGY]  if  (rhType  ==  Token.TRUE  ||  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType  ==  Token.TRUE  ||  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType  ==  Token.TRUE  ||  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    ||    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
140	[BUG]  [BUGGY]  if  (lhType  ==  null  &&  rhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  null  &&  rhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  null  &&  rhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType    ==    null    ||    rhType!=    Token.TRUE    &&    result!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
141	[BUG]  [BUGGY]  if  (rhType  ==  null  ||  lhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType  ==  null  ||  lhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType  ==  null  ||  lhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType    ==    null    ||    rhType!=    Token.TRUE    &&    result!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
142	[BUG]  [BUGGY]  if  (result  ==  null  ||  rhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  ||  rhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  rhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType    ==    null    ||    rhType!=    Token.TRUE    &&    result!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
143	[BUG]  [BUGGY]  if  (lhType!=  null  &&  rhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType!=  null  &&  rhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  null  &&  rhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType    ==    null    ||    rhType!=    Token.TRUE    &&    result!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
144	[BUG]  [BUGGY]  if  (result  ==  null  ||  lhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  ||  lhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  lhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType    ==    null    ||    rhType!=    Token.TRUE    &&    result!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
145	[BUG]  [BUGGY]  if  (result  ==  null  ||  rhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  lhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  ||  rhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  lhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  rhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  lhType!=  Token.NULL)  {	  if    (lhType    ==    null    ||    rhType!=    Token.TRUE    &&    result!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
146	[BUG]  [BUGGY]  if  (result  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    ||    rhType    ==    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
147	[BUG]  [BUGGY]  if  (result  ==  null  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
148	[BUG]  [BUGGY]  if  (result!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
149	[BUG]  [BUGGY]  if  (rhType!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
150	[BUG]  [BUGGY]  if  (lhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
151	[BUG]  [BUGGY]  if  (result  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    ||    rhType    ==    Token.FALSE    ||    rhType    ==    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
152	[BUG]  [BUGGY]  if  (rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    ||    rhType    ==    Token.FALSE    ||    rhType    ==    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
153	[BUG]  [BUGGY]  if  (lhType  ==  Token.FALSE  ||  rhType  ==  Token.TRUE)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.FALSE  ||  rhType  ==  Token.TRUE)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.FALSE  ||  rhType  ==  Token.TRUE)  {	  if    (lhType    ==    Token.TRUE    ||    rhType    ==    Token.FALSE    ||    rhType    ==    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
154	[BUG]  [BUGGY]  if  (lhType!=  Token.FALSE  ||  rhType!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType!=  Token.FALSE  ||  rhType!=  Token.TRUE)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  Token.FALSE  ||  rhType!=  Token.TRUE)  {	  if    (lhType    ==    Token.FALSE    &&    rhType!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
155	[BUG]  [BUGGY]  if  (lhType!=  Token.FALSE  &&  rhType!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType!=  Token.FALSE  &&  rhType!=  Token.TRUE)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  Token.FALSE  &&  rhType!=  Token.TRUE)  {	  if    (lhType    ==    Token.FALSE    &&    rhType!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
156	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(left,  undefinedRight);  break;	  result    =    compareToUndefined(left,    right);    break;    	non-compiled	[CE]  orphaned  case	45	None	replace
157	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(left,  left);  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(left,  left);  break;	  result    =    compareToUndefined(left,    right);    break;    	non-compiled	[CE]  orphaned  case	45	None	replace
158	[BUG]  [BUGGY]  if  (result!=  null  &&  result!=  Token.TRUE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result!=  null  &&  result!=  Token.TRUE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result!=  null  &&  result!=  Token.TRUE  &&  result!=  Token.NULL)  {	  if    (result!=    Token.TRUE    ||    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	32	None	replace
159	[BUG]  [BUGGY]  n  =  left.cloneTree();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  n  =  left.cloneTree();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	n  =  left.cloneTree();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	48	None	replace
160	[BUG]  [BUGGY]  Node  rhType  =  left.getfirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  rhType  =  left.getfirstChild();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	Node  rhType  =  left.getfirstChild();	  Node    rhType    =    right.getFirstChild();    	non-compiled	[CE]  orphaned  case	23	None	replace
161	[BUG]  [BUGGY]  Node  rhType  =  left.cloneTree();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  rhType  =  left.cloneTree();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	Node  rhType  =  left.cloneTree();	  Node    rhType    =    left.getNext();    	non-compiled	[CE]  orphaned  case	22	None	replace
162	[BUG]  [BUGGY]  result  =  undefinedRight  ==  rhType;  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  undefinedRight  ==  rhType;  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  undefinedRight  ==  rhType;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
163	[BUG]  [BUGGY]  result  =  rhType  ==  lhType;  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  rhType  ==  lhType;  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  rhType  ==  lhType;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
164	[BUG]  [BUGGY]  result  =  lhType  ==  Token.NUMBER;  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  lhType  ==  Token.NUMBER;  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  lhType  ==  Token.NUMBER;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
165	[BUG]  [BUGGY]  if  (result  ==  Token.TRUE  ||  lhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  Token.TRUE  ||  lhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  Token.TRUE  ||  lhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    ||    lhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
166	[BUG]  [BUGGY]  if  (result  ==  null  ||  op!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  ||  op!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  op!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    null    ||    rhType!=    Token.TRUE    &&    lhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	41	None	replace
167	[BUG]  [BUGGY]  if  (result!=  null  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result!=  null  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result!=  null  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    null    &&    lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
168	[BUG]  [BUGGY]  Node  rhType  =  left.replaceChild(n,  newNode);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  rhType  =  left.replaceChild(n,  newNode);  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	Node  rhType  =  left.replaceChild(n,  newNode);	  Node    rhType    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	21	None	replace
169	[BUG]  [BUGGY]  ln  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  ln  =  left.getFirstChild();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	ln  =  left.getFirstChild();	  ln    =    left.getString();    	non-compiled	[CE]  orphaned  case	49	None	replace
170	[BUG]  [BUGGY]  if  (lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if    (lhType    ==    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	20	None	replace
171	[BUG]  [BUGGY]  if  (lhType!=  Token.TRUE  &&  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType!=  Token.TRUE  &&  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  Token.TRUE  &&  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    ||    rhType    ==    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
172	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  &&  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.TRUE  &&  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  &&  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    ||    rhType    ==    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
173	[BUG]  [BUGGY]  if  (result  ==  null  ||  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  ||  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    &&    rhType!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
174	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    &&    rhType!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
175	[BUG]  [BUGGY]  if  (rhType  ==  Token.TRUE  &&  lhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType  ==  Token.TRUE  &&  lhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType  ==  Token.TRUE  &&  lhType!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    &&    rhType!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
176	[BUG]  [BUGGY]  if  (result!=  null  &&  result  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result!=  null  &&  result  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result!=  null  &&  result  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (result!=    null    &&    result!=    Token.TRUE    &&    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
177	[BUG]  [BUGGY]  if  (result  ==  Token.TRUE  &&  result!=  Token.FALSE  ||  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  Token.TRUE  &&  result!=  Token.FALSE  ||  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  Token.TRUE  &&  result!=  Token.FALSE  ||  result!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    ||    result!=    Token.FALSE    ||    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
178	[BUG]  [BUGGY]  Node  rhType  =  right.getParent();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  rhType  =  right.getParent();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	Node  rhType  =  right.getParent();	  Node    rhType    =    right.getNext();    	non-compiled	[CE]  orphaned  case	27	None	replace
179	[BUG]  [BUGGY]  if  (lhType  ==  null  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  null  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  null  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (rhType    ==    null    ||    lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	16	None	replace
180	[BUG]  [BUGGY]  if  (lhType!=  null  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType!=  null  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  null  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (rhType    ==    null    ||    lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	16	None	replace
181	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  ln!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  ln!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  ln!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    ln!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
182	[BUG]  [BUGGY]  if(result!=  Token.TRUE  &&  ln!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  Token.TRUE  &&  ln!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result!=  Token.TRUE  &&  ln!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    ln!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
183	[BUG]  [BUGGY]  if(result!=  Token.TRUE  &&  ln!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  Token.TRUE  &&  ln!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result!=  Token.TRUE  &&  ln!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    ln!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
184	[BUG]  [BUGGY]  if  (result  ==  null  ||  rhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  ||  rhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  rhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType!=    Token.TRUE    &&    rightType!=    Token.FALSE    &&    rightType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	43	None	replace
185	[BUG]  [BUGGY]  if  (result  ==  null  ||  lhType!=  Token.TRUE  &&  leftType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  ||  lhType!=  Token.TRUE  &&  leftType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  lhType!=  Token.TRUE  &&  leftType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType!=    Token.TRUE    &&    rightType!=    Token.FALSE    &&    rightType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	43	None	replace
186	[BUG]  [BUGGY]  if(result  ==  null)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  null)  {	  if(lhType!=    Token.TRUE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
187	[BUG]  [BUGGY]  if  (result  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
188	[BUG]  [BUGGY]  if  (rhType  ==  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType  ==  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType  ==  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
189	[BUG]  [BUGGY]  if(result!=  null  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result!=  null  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result!=    Token.TRUE    &&    lhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	38	None	replace
190	[BUG]  [BUGGY]  if(result  ==  null  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  null  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result!=    Token.TRUE    &&    lhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	38	None	replace
191	[BUG]  [BUGGY]  if(result!=  Token.TRUE  &&  lhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  Token.TRUE  &&  lhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result!=  Token.TRUE  &&  lhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result!=    Token.TRUE    &&    lhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	38	None	replace
192	[BUG]  [BUGGY]  if  (rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    ||    rhType    ==    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
193	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(left,  undefinedRight);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  orphaned  case	44	None	replace
194	[BUG]  [BUGGY]  if(lhType!=  Token.FALSE  &&  rhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType!=  Token.FALSE  &&  rhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType!=  Token.FALSE  &&  rhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.FALSE    &&    lhType!=    Token.TRUE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
195	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  &&  rhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.FALSE  &&  rhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.FALSE  &&  rhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.FALSE    &&    lhType!=    Token.TRUE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
196	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(rhType  ==  Token.FALSE  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(rhType  ==  Token.FALSE  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.FALSE    &&    lhType!=    Token.TRUE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
197	[BUG]  [BUGGY]  if(op  ==  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(op  ==  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(op  ==  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    ||    lhType!=    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
198	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  ||  lhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.TRUE  ||  lhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  ||  lhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {	  if(result    ==    Token.TRUE    ||    lhType!=    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
199	[BUG]  [BUGGY]  if  (lhType!=  Token.TRUE  &&  rhType  ==  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType!=  Token.TRUE  &&  rhType  ==  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  Token.TRUE  &&  rhType  ==  Token.FALSE  &&  rhType  ==  Token.NULL)  {	  if    (lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType    ==    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
200	[BUG]  [BUGGY]  if  (rhType!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (rhType!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {	  if    (lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType    ==    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
201	[BUG]  [BUGGY]  if  (result  ==  null  &&  rhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  &&  rhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  &&  rhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType    ==    null    ||    rhType!=    Token.TRUE    &&    result!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
202	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  ||  op!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.TRUE  ||  op!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  ||  op!=  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
203	[BUG]  [BUGGY]  if(op  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(op  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(op  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
204	[BUG]  [BUGGY]  if(result!=  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result!=  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
205	[BUG]  [BUGGY]  if(result!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    ||    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
206	[BUG]  [BUGGY]  if(op  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(op  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(op  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    ||    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
207	[BUG]  [BUGGY]  if  (result  ==  null  ||  rhType  ==  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  ||  rhType  ==  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  rhType  ==  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType    ==    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	42	None	replace
208	[BUG]  [BUGGY]  if  (result  ==  null  ||  result!=  Token.TRUE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  ||  result!=  Token.TRUE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  result!=  Token.TRUE  &&  result!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    ||    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
209	[BUG]  [BUGGY]  if  (result  ==  null  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType    ==    null    ||    rhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
210	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {	  if    (lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType    ==    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
211	[BUG]  [BUGGY]  n  =  left.replaceChild(right,  newNode);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  n  =  left.replaceChild(right,  newNode);  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	n  =  left.replaceChild(right,  newNode);	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	48	None	replace
212	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral);  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(left,  rightLiteral);  break;	  result    =    compareToUndefined(left,    right);    break;    	non-compiled	[CE]  orphaned  case	45	None	replace
213	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  op);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(left,  right,  op);  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(left,  right,  op);  break;	  result    =    compareToUndefined(left,    right);    break;    	non-compiled	[CE]  orphaned  case	45	None	replace
214	[BUG]  [BUGGY]  n  =  left.removeFirst();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  n  =  left.removeFirst();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	n  =  left.removeFirst();	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	25	None	replace
215	[BUG]  [BUGGY]  if(lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.FALSE    &&    lhType!=    Token.TRUE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
216	[BUG]  [BUGGY]  if(result!=  Token.FALSE  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  Token.FALSE  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result!=  Token.FALSE  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.FALSE    &&    lhType!=    Token.TRUE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
217	[BUG]  [BUGGY]  if  (result  ==  null  ||  lhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  ||  lhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  lhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    null    ||    rhType!=    Token.TRUE    &&    lhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	41	None	replace
218	[BUG]  [BUGGY]  if  (result  ==  null  ||  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  ||  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    null    ||    rhType!=    Token.TRUE    &&    lhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	41	None	replace
219	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  ||  result  ==  Token.FALSE  ||  result  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.TRUE  ||  result  ==  Token.FALSE  ||  result  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  ||  result  ==  Token.FALSE  ||  result  ==  Token.NULL)  {	  if    (result    ==    Token.TRUE    ||    result!=    Token.FALSE    ||    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
220	[BUG]  [BUGGY]  if  (lhType  ==  null  ||  rhType!=  Token.TRUE  &&  n!=  Token.FALSE  &&  n!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  null  ||  rhType!=  Token.TRUE  &&  n!=  Token.FALSE  &&  n!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  null  ||  rhType!=  Token.TRUE  &&  n!=  Token.FALSE  &&  n!=  Token.NULL)  {	  if    (lhType    ==    null    ||    rhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
221	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if    (lhType    ==    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	20	None	replace
222	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  ||  result  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.TRUE  ||  result  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  ||  result  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    ||    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
223	[BUG]  [BUGGY]  if(result  ==  null  ||  lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  null  ||  lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType    ==    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	42	None	replace
224	[BUG]  [BUGGY]  if  (result  ==  null  ||  result!=  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result  ==  null  ||  result!=  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  result!=  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (result    ==    null    &&    result!=    Token.TRUE    &&    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
225	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  &&  ln!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.FALSE  &&  ln!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.FALSE  &&  ln!=  Token.TRUE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    ln!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
226	[BUG]  [BUGGY]  if(lhType  ==  Token.TRUE  &&  ln!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType  ==  Token.TRUE  &&  ln!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType  ==  Token.TRUE  &&  ln!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    ln!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
227	[BUG]  [BUGGY]  Node  rhType  =  right.removeFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  rhType  =  right.removeFirstChild();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	Node  rhType  =  right.removeFirstChild();	  Node    rhType    =    right.getFirstChild();    	non-compiled	[CE]  orphaned  case	23	None	replace
228	[BUG]  [BUGGY]  result  =  compareResult(lhType);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareResult(lhType);  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareResult(lhType);  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
229	[BUG]  [BUGGY]  result  =  lhType!=  rhType;  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  lhType!=  rhType;  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  lhType!=  rhType;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
230	[BUG]  [BUGGY]  result  =  compareResult(rhType);  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareResult(rhType);  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareResult(rhType);  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
231	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  1;  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  lhType  ==  rhType  +  1;  break;  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  lhType  ==  rhType  +  1;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  orphaned  case	24	None	replace
232	[BUG]  [BUGGY]  if(lhType!=  Token.TRUE  &&  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType!=  Token.TRUE  &&  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType!=  Token.TRUE  &&  rhType  ==  Token.NULL)  {	  if(lhType!=    Token.TRUE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
233	[BUG]  [BUGGY]  if  (result!=  null  &&  lhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (result!=  null  &&  lhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result!=  null  &&  lhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType!=    Token.TRUE    &&    rightType!=    Token.FALSE    &&    rightType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	43	None	replace
234	[BUG]  [BUGGY]  if  (lhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rightType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType!=    Token.TRUE    &&    rightType!=    Token.FALSE    &&    rightType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	43	None	replace
235	[BUG]  [BUGGY]  if(result!=  null  &&  result!=  Token.TRUE  &&  result  ==  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  &&  result!=  Token.TRUE  &&  result  ==  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result!=  null  &&  result!=  Token.TRUE  &&  result  ==  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (result!=    null    &&    result!=    Token.TRUE    &&    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
236	[BUG]  [BUGGY]  if(result!=  Token.TRUE  &&  op!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  Token.TRUE  &&  op!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result!=  Token.TRUE  &&  op!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    op!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	39	None	replace
237	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  &&  op!=  Token.FALSE  &&  lhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.TRUE  &&  op!=  Token.FALSE  &&  lhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  &&  op!=  Token.FALSE  &&  lhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    op!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	39	None	replace
238	[BUG]  [BUGGY]  if(result!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {	  if(result!=    Token.TRUE    &&    lhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	38	None	replace
239	[BUG]  [BUGGY]  if(lhType  ==  Token.TRUE  ||  rhType  ==  Token.FUNCTION  ||  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType  ==  Token.TRUE  ||  rhType  ==  Token.FUNCTION  ||  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType  ==  Token.TRUE  ||  rhType  ==  Token.FUNCTION  ||  rhType  ==  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    ||    rhType    ==    Token.FALSE    ||    rhType    ==    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
240	[BUG]  [BUGGY]  if(lhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(lhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    ||    rhType    ==    Token.FALSE    ||    rhType    ==    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
241	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    ||    rhType    ==    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
242	[BUG]  [BUGGY]  ln  =  left.getString()  + "_ "  +  right.getString();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  ln  =  left.getString()  + "_ "  +  right.getString();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	ln  =  left.getString()  + "_ "  +  right.getString();	  ln    =    left.getString();    	non-compiled	[CE]  orphaned  case	49	None	replace
243	[BUG]  [BUGGY]  ln  =  left.getString()  + ": "  +  right.getString();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  ln  =  left.getString()  + ": "  +  right.getString();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	ln  =  left.getString()  + ": "  +  right.getString();	  ln    =    left.getString();    	non-compiled	[CE]  orphaned  case	49	None	replace
244	[BUG]  [BUGGY]  ln  =  left.getString()  + "- "  +  right.getString();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  ln  =  left.getString()  + "- "  +  right.getString();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	ln  =  left.getString()  + "- "  +  right.getString();	  ln    =    left.getString();    	non-compiled	[CE]  orphaned  case	49	None	replace
245	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft);  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(left,  undefinedLeft);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  orphaned  case	44	None	replace
246	[BUG]  [BUGGY]  Node  rhType  =  right.getfirstChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  rhType  =  right.getfirstChild();  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	Node  rhType  =  right.getfirstChild();	  Node    rhType    =    left.getLastChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
247	[BUG]  [BUGGY]  if  (lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result  ==  Token.NULL)  {	  if    (lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
248	[BUG]  [BUGGY]  if  (lhType  ==  null  ||  rhType!=  Token.TRUE  &&  result  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  null  ||  rhType!=  Token.TRUE  &&  result  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  null  ||  rhType!=  Token.TRUE  &&  result  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType    ==    null    ||    rhType!=    Token.TRUE    &&    result!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
249	[BUG]  [BUGGY]  if(result!=  Token.TRUE  &&  result  ==  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  Token.TRUE  &&  result  ==  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result!=  Token.TRUE  &&  result  ==  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (result!=    Token.TRUE    &&    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
250	[BUG]  [BUGGY]  if(result!=  Token.TRUE  &&  result!=  Token.FALSE  &&  result  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  Token.TRUE  &&  result!=  Token.FALSE  &&  result  ==  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result!=  Token.TRUE  &&  result!=  Token.FALSE  &&  result  ==  Token.NULL)  {	  if    (result!=    Token.TRUE    &&    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
251	[BUG]  [BUGGY]  if  (lhType  ==  Token.UNKNOWN  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if  (lhType  ==  Token.UNKNOWN  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.UNKNOWN  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (rhType    ==    null    ||    lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	16	None	replace
