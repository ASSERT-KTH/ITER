bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  [BUGGY]  if  (lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&    rhType  !=  Token.NULL)  {  	non-compiled	[CE]  orphaned  case	41	None	replace
2	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  [BUGGY]  if  (lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&    rhType  !=  Token.NULL)  {  	non-compiled	[CE]  orphaned  case	41	None	replace
3	[BUG]  [BUGGY]  if  (lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  [BUGGY]  if  (lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {	if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&    rhType  !=  Token.NULL)  {  	non-compiled	[CE]  orphaned  case	41	None	replace
4	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]          AssertionFailedError  [CONTEXT]  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {	if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&    rhType  !=  Token.NULL)  {  	non-compiled	[CE]  orphaned  case	41	None	replace
5	[BUG]  [BUGGY]  if  (lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError  [CONTEXT]  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  [BUGGY]  if  (lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&    rhType  !=  Token.NULL)  {  	non-compiled	[CE]  orphaned  case	41	None	replace
6	[BUG]  [BUGGY]    [CE]  orphaned  case  [FE]              AssertionFailedError  [CONTEXT]  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  [BUGGY]    [BUGGY]  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	  	if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&    rhType  !=  Token.NULL)  {  	non-compiled	[CE]  orphaned  case	41	None	replace
7	[BUG]  [BUGGY]  if  (result  ==  null  ||  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  [BUGGY]  if  (result  ==  null  ||  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&    rhType  !=  Token.NULL)  {  	non-compiled	[CE]  orphaned  case	41	None	replace
8	[BUG]  [BUGGY]  if  (result  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  [BUGGY]  if  (result  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {	if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&    rhType  !=  Token.NULL)  {  	non-compiled	[CE]  orphaned  case	41	None	replace
9	[BUG]  [BUGGY]  if  (result  ==  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  [BUGGY]  if  (result  ==  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&    rhType  !=  Token.NULL)  {  	non-compiled	[CE]  orphaned  case	41	None	replace
10	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  [BUGGY]  if(result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&    rhType  !=  Token.NULL)  {  	non-compiled	[CE]  orphaned  case	41	None	replace
