bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
2	[BUG]  [BUGGY]  if  (rhType!=  Token.TRUE  ||  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (rhType!=  Token.TRUE  ||  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType!=  Token.TRUE  ||  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
3	[BUG]  [BUGGY]  if  (lhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (lhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
4	[BUG]  [BUGGY]  if  (result  ==  Token.TRUE  ||  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (result  ==  Token.TRUE  ||  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  Token.TRUE  ||  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    &&    lhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
5	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    &&    lhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
6	[BUG]  [BUGGY]  if  (lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    &&    lhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
7	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  ||  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
8	[BUG]  [BUGGY]  if(lhType  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(lhType  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType  ==  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
9	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
10	[BUG]  [BUGGY]  if  (lhType  ==  Token.FALSE  &&  rhType!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (lhType  ==  Token.FALSE  &&  rhType!=  Token.TRUE)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.FALSE  &&  rhType!=  Token.TRUE)  {	  if    (lhType    ==    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
11	[BUG]  [BUGGY]  if  (rhType!=  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (rhType!=  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType!=  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
12	[BUG]  [BUGGY]  if  (lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {	  if    (lhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
13	[BUG]  [BUGGY]  if  (lhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (lhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
14	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {	  if    (lhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
15	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
16	[BUG]  [BUGGY]  if  (rhType  ==  null  ||  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (rhType  ==  null  ||  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType  ==  null  ||  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
17	[BUG]  [BUGGY]  if  (result  ==  null  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (result  ==  null  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
18	[BUG]  [BUGGY]  if  (lhType  ==  null  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (lhType  ==  null  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  null  ||  rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
19	[BUG]  [BUGGY]  if  (lhType  ==  null  ||  rhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (lhType  ==  null  ||  rhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  null  ||  rhType!=  Token.TRUE  &&  result!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
20	[BUG]  [BUGGY]  if  (lhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (lhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
21	[BUG]  [BUGGY]  Node  rhType  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  Node  rhType  =  left.getFirstChild();  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	Node  rhType  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
22	[BUG]  [BUGGY]  Node  rhType  =  left.getNext();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  Node  rhType  =  left.getNext();  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	Node  rhType  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	6	None	replace
23	[BUG]  [BUGGY]  Node  rhType  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  Node  rhType  =  right.getFirstChild();  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	Node  rhType  =  right.getFirstChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
24	[BUG]  [BUGGY]  result  =  lhType  ==  rhType;  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  result  =  lhType  ==  rhType;  break;  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  lhType  ==  rhType;  break;	      	non-compiled	[CE]  orphaned  case	6	None	replace
25	[BUG]  [BUGGY]  n  =  left.getNext();  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  n  =  left.getNext();  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	n  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	6	None	replace
26	[BUG]  [BUGGY]  Node  rhType  =  left.getLastChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  Node  rhType  =  left.getLastChild();  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	Node  rhType  =  left.getLastChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
27	[BUG]  [BUGGY]  Node  rhType  =  right.getNext();  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  Node  rhType  =  right.getNext();  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	Node  rhType  =  right.getNext();	      	non-compiled	[CE]  orphaned  case	6	None	replace
28	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
29	[BUG]  [BUGGY]  if  (rhType  ==  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (rhType  ==  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType  ==  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
30	[BUG]  [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
31	[BUG]  [BUGGY]  if  (result  ==  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (result  ==  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    &&    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
32	[BUG]  [BUGGY]  if  (result!=  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (result!=  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result!=  Token.TRUE  ||  result!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    &&    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
33	[BUG]  [BUGGY]  if  (result!=  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (result!=  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result!=  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    &&    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
34	[BUG]  [BUGGY]  if  (result  ==  Token.TRUE  ||  result!=  Token.FALSE  ||  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (result  ==  Token.TRUE  ||  result!=  Token.FALSE  ||  result!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  Token.TRUE  ||  result!=  Token.FALSE  ||  result!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    &&    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
35	[BUG]  [BUGGY]  if  (result  ==  null  &&  result!=  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (result  ==  null  &&  result!=  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  &&  result!=  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    &&    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
36	[BUG]  [BUGGY]  if  (result!=  null  &&  result!=  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (result!=  null  &&  result!=  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result!=  null  &&  result!=  Token.TRUE  &&  result!=  Token.FALSE  &&  result!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    &&    result!=    Token.FALSE    &&    result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
37	[BUG]  [BUGGY]  if  (rhType  ==  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (rhType  ==  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType  ==  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType    ==    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
38	[BUG]  [BUGGY]  if(result!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
39	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  &&  op!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ==  Token.TRUE  &&  op!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  &&  op!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
40	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  &&  ln!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ==  Token.TRUE  &&  ln!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  &&  ln!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
41	[BUG]  [BUGGY]  if  (result  ==  null  ||  rhType!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (result  ==  null  ||  rhType!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  rhType!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
42	[BUG]  [BUGGY]  if  (result  ==  null  ||  lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (result  ==  null  ||  lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  lhType  ==  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
43	[BUG]  [BUGGY]  if  (result  ==  null  ||  lhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (result  ==  null  ||  lhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (result  ==  null  ||  lhType!=  Token.TRUE  &&  rightType!=  Token.FALSE  &&  rightType!=  Token.NULL)  {	  if    (result    ==    null    ||    lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
44	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  result  =  compareToUndefined(left,  right);  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(left,  right);	      	non-compiled	[CE]  orphaned  case	6	None	replace
45	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right);  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  result  =  compareToUndefined(left,  right);  break;  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	result  =  compareToUndefined(left,  right);  break;	      	non-compiled	[CE]  orphaned  case	6	None	replace
46	[BUG]  [BUGGY]  if  (rhType!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (rhType!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (rhType!=  Token.TRUE  &&  lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
47	[BUG]  [BUGGY]  if  (lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if  (lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if  (lhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {	  if    (lhType!=    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
48	[BUG]  [BUGGY]  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  n  =  left.getFirstChild();  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	n  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
49	[BUG]  [BUGGY]  ln  =  left.getString();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  ln  =  left.getString();  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	ln  =  left.getString();	      	non-compiled	[CE]  orphaned  case	6	None	replace
50	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ==  Token.FALSE  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.FALSE  &&  lhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {	  if(result    ==    Token.TRUE    &&    rhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
51	[BUG]  [BUGGY]  if(result  ==  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ==  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(result  ==  Token.TRUE  ||  lhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    &&    lhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
52	[BUG]  [BUGGY]  if(lhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(lhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {  [BUGGY]    rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	927	929	3	replace	if(lhType!=  Token.TRUE  &&  rhType!=  Token.NULL)  {	  if    (result    ==    Token.TRUE    &&    lhType!=    Token.FALSE    &&    rhType!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
