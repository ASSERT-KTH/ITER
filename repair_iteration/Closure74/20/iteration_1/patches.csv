bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	3	None	replace
2	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.FUNCTION)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	3	None	replace
3	[BUG]  [BUGGY]  if  (left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	3	None	replace
4	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	3	None	replace
5	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()  ==  MAX_FOLD_NUMBER)  {  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()  ==  MAX_FOLD_NUMBER)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()  ==  MAX_FOLD_NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getDouble()    ==    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  case,  default,  or  	7	None	replace
6	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()  ==  1)  {  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()  ==  1)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()  ==  1)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getDouble()    ==    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  case,  default,  or  	7	None	replace
7	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()!=  MAX_FOLD_NUMBER)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()!=  MAX_FOLD_NUMBER)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()!=  MAX_FOLD_NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getDouble()    ==    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  case,  default,  or  	7	None	replace
8	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()  ==  2)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()  ==  2)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()  ==  2)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getDouble()    ==    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  case,  default,  or  	7	None	replace
9	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.DO)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.DO)  {	  if(left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
10	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM)  {  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if(left.getType()  ==  Token.GETELEM)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.GETELEM)  {	  if(left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
11	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.NAME)  {	  if(left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
12	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
13	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getDouble()  ==  0)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getDouble()  ==  0)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  left.getDouble()  ==  0)  {	  if    (left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	5	None	replace
14	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getDouble()!=  0)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getDouble()!=  0)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  left.getDouble()!=  0)  {	  if    (left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	5	None	replace
15	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (n.getType()  ==  Token.FUNCTION)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()  ==  Token.FUNCTION)  {	  if    (left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	5	None	replace
16	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.THIS)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.THIS)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	4	None	replace
17	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.THIS)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.THIS)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.THIS)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	4	None	replace
18	[BUG]  [BUGGY]  if  (left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.THIS)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.THIS)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	4	None	replace
19	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.THIS)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.THIS)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	4	None	replace
20	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()  ==  0)  {  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()  ==  0)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()  ==  0)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getDouble()    ==    0)    {    	non-compiled	[CE]  case,  default,  or  	8	None	replace
21	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()!=  0)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()!=  0)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()!=  0)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getDouble()    ==    0)    {    	non-compiled	[CE]  case,  default,  or  	8	None	replace
22	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	2	None	replace
23	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.DOUBLE)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	2	None	replace
24	[BUG]  [BUGGY]  if  (left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	2	None	replace
25	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	2	None	replace
26	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.DO)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.DO)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	9	None	replace
27	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.DO)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.DO)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.DO)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	9	None	replace
28	[BUG]  [BUGGY]  if  (left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.DO)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.DO)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	9	None	replace
29	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.DO)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.DO)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	9	None	replace
30	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  case,  default,  or  	1	None	replace
31	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.DO)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.DO)  {	  if    (left.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  case,  default,  or  	1	None	replace
32	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (left.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  case,  default,  or  	1	None	replace
33	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getDouble()  ==  0)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getDouble()  ==  0)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  left.getDouble()  ==  0)  {	  if    (left.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  case,  default,  or  	1	None	replace
34	[BUG]  [BUGGY]  Node  leftVal  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  Node  leftVal  =  left.getFirstChild();  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
35	[BUG]  [BUGGY]  Node  leftVal  =  left.getNext();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  Node  leftVal  =  left.getNext();  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	6	None	replace
36	[BUG]  [BUGGY]  Node  leftVal  =  left.getLastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  Node  leftVal  =  left.getLastChild();  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  left.getLastChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
37	[BUG]  [BUGGY]  Node  leftVal  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  Node  leftVal  =  n.getFirstChild();  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  n.getFirstChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
38	[BUG]  [BUGGY]  double  numValue  =  left.getDouble();  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  double  numValue  =  left.getDouble();  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	double  numValue  =  left.getDouble();	      	non-compiled	[CE]  orphaned  case	6	None	replace
39	[BUG]  [BUGGY]  int  numValue  =  left.getDouble();  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  int  numValue  =  left.getDouble();  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	int  numValue  =  left.getDouble();	      	non-compiled	[CE]  orphaned  case	6	None	replace
40	[BUG]  [BUGGY]  Double  nVal  =  left.getDouble();  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  Double  nVal  =  left.getDouble();  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Double  nVal  =  left.getDouble();	      	non-compiled	[CE]  orphaned  case	6	None	replace
41	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NEW  ||  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NEW  ||  left.getType()  ==  Token.DO)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NEW  ||  left.getType()  ==  Token.DO)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	9	None	replace
42	[BUG]  [BUGGY]  Node  leftVal  =  n.getLastChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  Node  leftVal  =  n.getLastChild();  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  n.getLastChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
43	[BUG]  [BUGGY]  Double  leftVal  =  left.getDouble();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  Double  leftVal  =  left.getDouble();  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Double  leftVal  =  left.getDouble();	      	non-compiled	[CE]  orphaned  case	6	None	replace
44	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	3	None	replace
45	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING)  {  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if(left.getType()  ==  Token.STRING)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.STRING)  {	  if(left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
46	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getDouble()!=  0)  {  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getDouble()!=  0)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  left.getDouble()!=  0)  {	  if    (left.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  case,  default,  or  	1	None	replace
47	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.GETELEM)  {  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.GETELEM)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.GETELEM)  {	  if    (left.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  case,  default,  or  	1	None	replace
48	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.THIS)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.THIS)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	4	None	replace
49	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.THIS)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.THIS)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	4	None	replace
50	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NEW  ||  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NEW  ||  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NEW  ||  left.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	2	None	replace
51	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	2	None	replace
52	[BUG]  [BUGGY]  Node  leftVal  =  n.getNext();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  Node  leftVal  =  n.getNext();  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  n.getNext();	      	non-compiled	[CE]  orphaned  case	6	None	replace
53	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  Node  left  =  n.getFirstChild();  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  left  =  n.getFirstChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
54	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	9	None	replace
55	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.FALSE)  {  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.FALSE)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.FALSE)  {	  if    (left.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  case,  default,  or  	1	None	replace
56	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.CATCH)  {  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.CATCH)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.CATCH)  {	  if    (left.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  case,  default,  or  	1	None	replace
57	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.FALSE)  {  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.FALSE)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.FALSE)  {	  if(left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
58	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.GETELEM)  {  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.GETELEM)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.GETELEM)  {	  if(left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
59	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.BLOCK)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.BLOCK)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.BLOCK)  {	  if(left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
60	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.CATCH)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:      [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.CATCH)  {  [BUGGY]    double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.CATCH)  {	  if(left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
