bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	51	None	replace
2	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  &&  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  &&  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  &&  left.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	51	None	replace
3	[BUG]  [BUGGY]  if  (left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	51	None	replace
4	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NEW  &&  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NEW  &&  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NEW  &&  left.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NEW    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	50	None	replace
5	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NEW  ||  left.getType()!=  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NEW  ||  left.getType()!=  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NEW  ||  left.getType()!=  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NEW    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	50	None	replace
6	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NEW    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	50	None	replace
7	[BUG]  [BUGGY]  if  (left.getType()!=  Token.NEW  ||  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.NEW  ||  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.NEW  ||  left.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NEW    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	50	None	replace
8	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NEW  ||  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (n.getType()  ==  Token.NEW  ||  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()  ==  Token.NEW  ||  left.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NEW    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	50	None	replace
9	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()  ==  1)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()  ==  1)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()  ==  1)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getDouble()    ==    0)    {    	non-compiled	[CE]  case,  default,  or  	20	None	replace
10	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NUMBER  &&  left.getDouble()  ==  0)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (n.getType()  ==  Token.NUMBER  &&  left.getDouble()  ==  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()  ==  Token.NUMBER  &&  left.getDouble()  ==  0)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getDouble()    ==    0)    {    	non-compiled	[CE]  case,  default,  or  	20	None	replace
11	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()!=  0)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()!=  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()!=  0)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getDouble()    ==    0)    {    	non-compiled	[CE]  case,  default,  or  	20	None	replace
12	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.THIS)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.THIS)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.THIS)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	49	None	replace
13	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  &&  left.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  &&  left.getType()  ==  Token.THIS)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  &&  left.getType()  ==  Token.THIS)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	49	None	replace
14	[BUG]  [BUGGY]  if  (left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.THIS)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.THIS)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	49	None	replace
15	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.THIS)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.THIS)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	49	None	replace
16	[BUG]  [BUGGY]  int  numValue  =  left.getInt();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  int  numValue  =  left.getInt();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	int  numValue  =  left.getInt();	  int    numValue    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	39	None	replace
17	[BUG]  [BUGGY]  int  numValue  =  left.getNumber();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  int  numValue  =  left.getNumber();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	int  numValue  =  left.getNumber();	  int    numValue    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	39	None	replace
18	[BUG]  [BUGGY]  int  numValue  =  leftVal.getDouble();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  int  numValue  =  leftVal.getDouble();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	int  numValue  =  leftVal.getDouble();	  int    numValue    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	39	None	replace
19	[BUG]  [BUGGY]  int  numValue  =  left.getLastChild();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  int  numValue  =  left.getLastChild();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	int  numValue  =  left.getLastChild();	  int    numValue    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	39	None	replace
20	[BUG]  [BUGGY]  int  numValue  =  left.getDouble()  +  1;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  int  numValue  =  left.getDouble()  +  1;  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	int  numValue  =  left.getDouble()  +  1;	  int    numValue    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	39	None	replace
21	[BUG]  [BUGGY]  int  numValue  =  left.getDouble()  -  1;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  int  numValue  =  left.getDouble()  -  1;  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	int  numValue  =  left.getDouble()  -  1;	  int    numValue    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	39	None	replace
22	[BUG]  [BUGGY]  Node  leftVal  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  right.getFirstChild();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  right.getFirstChild();	  Node    leftVal    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	37	None	replace
23	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  &&  left.getType()  ==  Token.CATCH)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.DO  &&  left.getType()  ==  Token.CATCH)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  &&  left.getType()  ==  Token.CATCH)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  case,  default,  or  	60	None	replace
24	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()!=  Token.CATCH)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()!=  Token.CATCH)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  ||  left.getType()!=  Token.CATCH)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  case,  default,  or  	60	None	replace
25	[BUG]  [BUGGY]  if(n.getType()  ==  Token.DO  ||  left.getType()  ==  Token.CATCH)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(n.getType()  ==  Token.DO  ||  left.getType()  ==  Token.CATCH)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(n.getType()  ==  Token.DO  ||  left.getType()  ==  Token.CATCH)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  case,  default,  or  	60	None	replace
26	[BUG]  [BUGGY]  if(left.getType()!=  Token.DO  ||  left.getType()  ==  Token.CATCH)  {  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()!=  Token.DO  ||  left.getType()  ==  Token.CATCH)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()!=  Token.DO  ||  left.getType()  ==  Token.CATCH)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  case,  default,  or  	60	None	replace
27	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  ||  right.getType()  ==  Token.CATCH)  {  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.DO  ||  right.getType()  ==  Token.CATCH)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  ||  right.getType()  ==  Token.CATCH)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  case,  default,  or  	60	None	replace
28	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  &&  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.FUNCTION  &&  left.getType()  ==  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.FUNCTION  &&  left.getType()  ==  Token.DO)  {	  if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	9	None	replace
29	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.DO)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.DO)  {	  if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	9	None	replace
30	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(n.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.DO)  {	  if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	9	None	replace
31	[BUG]  [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.DO)  {	  if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	9	None	replace
32	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.DO)  {	  if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	9	None	replace
33	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.DO  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  &&  left.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	12	None	replace
34	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  ||  left.getType()!=  Token.FUNCTION)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	12	None	replace
35	[BUG]  [BUGGY]  if(n.getType()  ==  Token.DO  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(n.getType()  ==  Token.DO  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(n.getType()  ==  Token.DO  ||  left.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	12	None	replace
36	[BUG]  [BUGGY]  if(left.getType()!=  Token.DO  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()!=  Token.DO  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()!=  Token.DO  ||  left.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	12	None	replace
37	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.DO  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	12	None	replace
38	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()  ==  2)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()  ==  2)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()  ==  2)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getDouble()    ==    2)    {    	non-compiled	[CE]  case,  default,  or  	8	None	replace
39	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()  ==  3)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()  ==  3)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()  ==  3)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getDouble()    ==    2)    {    	non-compiled	[CE]  case,  default,  or  	8	None	replace
40	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.THIS)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.THIS)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	48	None	replace
41	[BUG]  [BUGGY]  if  (right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.THIS)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.THIS)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	48	None	replace
42	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.THIS)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.THIS)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.THIS)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	48	None	replace
43	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  &&  left.getDouble()  ==  0)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  &&  left.getDouble()  ==  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  &&  left.getDouble()  ==  0)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getDouble()    ==    0)    {    	non-compiled	[CE]  case,  default,  or  	13	None	replace
44	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getDouble()  ==  1)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getDouble()  ==  1)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  left.getDouble()  ==  1)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getDouble()    ==    0)    {    	non-compiled	[CE]  case,  default,  or  	13	None	replace
45	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  &&  left.getType()  ==  Token.BLOCK)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.DO  &&  left.getType()  ==  Token.BLOCK)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  &&  left.getType()  ==  Token.BLOCK)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  case,  default,  or  	59	None	replace
46	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()!=  Token.BLOCK)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()!=  Token.BLOCK)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  ||  left.getType()!=  Token.BLOCK)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  case,  default,  or  	59	None	replace
47	[BUG]  [BUGGY]  if(n.getType()  ==  Token.DO  ||  left.getType()  ==  Token.BLOCK)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(n.getType()  ==  Token.DO  ||  left.getType()  ==  Token.BLOCK)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(n.getType()  ==  Token.DO  ||  left.getType()  ==  Token.BLOCK)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  case,  default,  or  	59	None	replace
48	[BUG]  [BUGGY]  if(left.getType()!=  Token.DO  ||  left.getType()  ==  Token.BLOCK)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()!=  Token.DO  ||  left.getType()  ==  Token.BLOCK)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()!=  Token.DO  ||  left.getType()  ==  Token.BLOCK)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  case,  default,  or  	59	None	replace
49	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  ||  right.getType()  ==  Token.BLOCK)  {  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.DO  ||  right.getType()  ==  Token.BLOCK)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  ||  right.getType()  ==  Token.BLOCK)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  case,  default,  or  	59	None	replace
50	[BUG]  [BUGGY]  if(left.getType()!=  Token.DO  &&  left.getType()  ==  Token.BLOCK)  {  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()!=  Token.DO  &&  left.getType()  ==  Token.BLOCK)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()!=  Token.DO  &&  left.getType()  ==  Token.BLOCK)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  case,  default,  or  	59	None	replace
51	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  &&  left.getType()  ==  Token.FUNCTION)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	32	None	replace
52	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  left.getType()!=  Token.FUNCTION)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	32	None	replace
53	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (n.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	32	None	replace
54	[BUG]  [BUGGY]  if  (left.getType()!=  Token.NOT  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.NOT  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.NOT  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	32	None	replace
55	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (left.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	3	None	replace
56	[BUG]  [BUGGY]  if  (n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (left.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	3	None	replace
57	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	22	None	replace
58	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.DOUBLE  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.DOUBLE  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.DOUBLE  &&  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	22	None	replace
59	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.DOUBLE)  {	  if(left.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  case,  default,  or  	45	None	replace
60	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  case,  default,  or  	45	None	replace
61	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.GETELEM)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.GETELEM)  {	  if(left.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  case,  default,  or  	45	None	replace
62	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NAME)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NAME)  {	  if(left.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  case,  default,  or  	45	None	replace
63	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.THIS)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.THIS)  {	  if(left.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  case,  default,  or  	45	None	replace
64	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NOT)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NOT)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NOT)  {	  if(left.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  case,  default,  or  	45	None	replace
65	[BUG]  [BUGGY]  Node  leftVal  =  leftNode.getNext();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  leftNode.getNext();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  leftNode.getNext();	  Node    leftVal    =    n.getNext();    	non-compiled	[CE]  orphaned  case	52	None	replace
66	[BUG]  [BUGGY]  Node  leftVal  =  n.getNext()  ||  leftVal.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  n.getNext()  ||  leftVal.getType()  ==  Token.FUNCTION;  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  n.getNext()  ||  leftVal.getType()  ==  Token.FUNCTION;	  Node    leftVal    =    n.getNext();    	non-compiled	[CE]  orphaned  case	52	None	replace
67	[BUG]  [BUGGY]  Node  leftVal  =  left.getParent();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  left.getParent();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  left.getParent();	  Node    leftVal    =    n.getNext();    	non-compiled	[CE]  orphaned  case	52	None	replace
68	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  &&  left.getType()  ==  Token.FALSE)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.DO  &&  left.getType()  ==  Token.FALSE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  &&  left.getType()  ==  Token.FALSE)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  case,  default,  or  	57	None	replace
69	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()!=  Token.FALSE)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()!=  Token.FALSE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  ||  left.getType()!=  Token.FALSE)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  case,  default,  or  	57	None	replace
70	[BUG]  [BUGGY]  if(n.getType()  ==  Token.DO  ||  left.getType()  ==  Token.FALSE)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(n.getType()  ==  Token.DO  ||  left.getType()  ==  Token.FALSE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(n.getType()  ==  Token.DO  ||  left.getType()  ==  Token.FALSE)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  case,  default,  or  	57	None	replace
71	[BUG]  [BUGGY]  if(left.getType()!=  Token.DO  ||  left.getType()  ==  Token.FALSE)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()!=  Token.DO  ||  left.getType()  ==  Token.FALSE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()!=  Token.DO  ||  left.getType()  ==  Token.FALSE)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  case,  default,  or  	57	None	replace
72	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  ||  right.getType()  ==  Token.FALSE)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.DO  ||  right.getType()  ==  Token.FALSE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  ||  right.getType()  ==  Token.FALSE)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  case,  default,  or  	57	None	replace
73	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {	  if(left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  case,  default,  or  	11	None	replace
74	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  case,  default,  or  	11	None	replace
75	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.CALL)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.CALL)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.CALL)  {	  if(left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  case,  default,  or  	11	None	replace
76	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.DO)  {	  if(left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  case,  default,  or  	11	None	replace
77	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.THIS)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.THIS)  {	  if(left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  case,  default,  or  	11	None	replace
78	[BUG]  [BUGGY]  Node  leftVal  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  left.removeFirstChild();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  left.removeFirstChild();	  Node    leftVal    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	34	None	replace
79	[BUG]  [BUGGY]  Node  leftVal  =  right.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  right.getLastChild();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  right.getLastChild();	  Node    leftVal    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	34	None	replace
80	[BUG]  [BUGGY]  Node  leftVal  =  leftNode.getLastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  leftNode.getLastChild();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  leftNode.getLastChild();	  Node    leftVal    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	42	None	replace
81	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	23	None	replace
82	[BUG]  [BUGGY]  if  (left.getType()!=  Token.NUMBER  ||  left.getType()!=  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.NUMBER  ||  left.getType()!=  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.NUMBER  ||  left.getType()!=  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	23	None	replace
83	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  &&  left.getDouble()  ==  0)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  &&  left.getDouble()  ==  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  &&  left.getDouble()  ==  0)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getDouble()    ==    0)    {    	non-compiled	[CE]  case,  default,  or  	33	None	replace
84	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getDouble()  ==  1)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getDouble()  ==  1)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  left.getDouble()  ==  1)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getDouble()    ==    0)    {    	non-compiled	[CE]  case,  default,  or  	33	None	replace
85	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NOT  ||  left.getDouble()  ==  0)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (n.getType()  ==  Token.NOT  ||  left.getDouble()  ==  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()  ==  Token.NOT  ||  left.getDouble()  ==  0)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getDouble()    ==    0)    {    	non-compiled	[CE]  case,  default,  or  	33	None	replace
86	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()!=  1)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()!=  1)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()!=  1)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getDouble()    ==    1)    {    	non-compiled	[CE]  case,  default,  or  	6	None	replace
87	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.DO)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.DO)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	27	None	replace
88	[BUG]  [BUGGY]  if  (left.getType()!=  Token.NUMBER  ||  left.getType()!=  Token.DO)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.NUMBER  ||  left.getType()!=  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.NUMBER  ||  left.getType()!=  Token.DO)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	27	None	replace
89	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NUMBER)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NUMBER)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NUMBER)  {	  if    (n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	4	None	replace
90	[BUG]  [BUGGY]  double  numValue  =  leftVal.getDouble();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  double  numValue  =  leftVal.getDouble();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	double  numValue  =  leftVal.getDouble();	  double    numValue    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	38	None	replace
91	[BUG]  [BUGGY]  double  numValue  =  left.getNumber();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  double  numValue  =  left.getNumber();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	double  numValue  =  left.getNumber();	  double    numValue    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	38	None	replace
92	[BUG]  [BUGGY]  double  numValue  =  left.getInt();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  double  numValue  =  left.getInt();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	double  numValue  =  left.getInt();	  double    numValue    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	38	None	replace
93	[BUG]  [BUGGY]  double  numValue  =  left.getDouble()  +  1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  double  numValue  =  left.getDouble()  +  1;  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	double  numValue  =  left.getDouble()  +  1;	  double    numValue    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	38	None	replace
94	[BUG]  [BUGGY]  double  numValue  =  left.getLastChild();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  double  numValue  =  left.getLastChild();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	double  numValue  =  left.getLastChild();	  double    numValue    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	38	None	replace
95	[BUG]  [BUGGY]  double  numValue  =  left.getLong();  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  double  numValue  =  left.getLong();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	double  numValue  =  left.getLong();	  double    numValue    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	38	None	replace
96	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.DO)  {	  if    (n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	29	None	replace
97	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.DO)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	26	None	replace
98	[BUG]  [BUGGY]  Double  nVal  =  leftVal.getDouble();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Double  nVal  =  leftVal.getDouble();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Double  nVal  =  leftVal.getDouble();	  Double    nVal    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	40	None	replace
99	[BUG]  [BUGGY]  Double  nVal  =  left.getNumber();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Double  nVal  =  left.getNumber();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Double  nVal  =  left.getNumber();	  Double    nVal    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	40	None	replace
100	[BUG]  [BUGGY]  Double  nVal  =  left.getDouble()  +  1;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Double  nVal  =  left.getDouble()  +  1;  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Double  nVal  =  left.getDouble()  +  1;	  Double    nVal    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	40	None	replace
101	[BUG]  [BUGGY]  double  nVal  =  left.getDouble();  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  double  nVal  =  left.getDouble();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	double  nVal  =  left.getDouble();	  Double    nVal    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	40	None	replace
102	[BUG]  [BUGGY]  Double  nVal  =  left.getLong();  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Double  nVal  =  left.getLong();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Double  nVal  =  left.getLong();	  Double    nVal    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	40	None	replace
103	[BUG]  [BUGGY]  Double  nVal  =  right.getDouble();  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Double  nVal  =  right.getDouble();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Double  nVal  =  right.getDouble();	  Double    nVal    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	40	None	replace
104	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.DO  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.DO  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.DO  &&  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  case,  default,  or  	54	None	replace
105	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.DO  ||  left.getType()!=  Token.NUMBER)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.DO  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.DO  ||  left.getType()!=  Token.NUMBER)  {	  if    (left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  case,  default,  or  	54	None	replace
106	[BUG]  [BUGGY]  if  (left.getType()!=  Token.DO  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.DO  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.DO  ||  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  case,  default,  or  	54	None	replace
107	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.DO  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.DO  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.DO  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  case,  default,  or  	54	None	replace
108	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  &&  left.getType()  ==  Token.GETELEM)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.DO  &&  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  &&  left.getType()  ==  Token.GETELEM)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	58	None	replace
109	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()!=  Token.GETELEM)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()!=  Token.GETELEM)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  ||  left.getType()!=  Token.GETELEM)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	58	None	replace
110	[BUG]  [BUGGY]  if(n.getType()  ==  Token.DO  ||  left.getType()  ==  Token.GETELEM)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(n.getType()  ==  Token.DO  ||  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(n.getType()  ==  Token.DO  ||  left.getType()  ==  Token.GETELEM)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	58	None	replace
111	[BUG]  [BUGGY]  if(left.getType()!=  Token.DO  ||  left.getType()  ==  Token.GETELEM)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()!=  Token.DO  ||  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()!=  Token.DO  ||  left.getType()  ==  Token.GETELEM)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	58	None	replace
112	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  ||  right.getType()  ==  Token.GETELEM)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.DO  ||  right.getType()  ==  Token.GETELEM)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  ||  right.getType()  ==  Token.GETELEM)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	58	None	replace
113	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  &&  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  &&  left.getType()  ==  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  &&  left.getType()  ==  Token.DO)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	31	None	replace
114	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()!=  Token.DO)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()!=  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  left.getType()!=  Token.DO)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	31	None	replace
115	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.NOT)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.NOT)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.NOT)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	31	None	replace
116	[BUG]  [BUGGY]  if  (left.getType()!=  Token.NOT  ||  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.NOT  ||  left.getType()  ==  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.NOT  ||  left.getType()  ==  Token.DO)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	31	None	replace
117	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (n.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.DO)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	31	None	replace
118	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.THIS)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.THIS)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.THIS)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	17	None	replace
119	[BUG]  [BUGGY]  if  (left.getType()!=  Token.NUMBER  ||  left.getType()!=  Token.THIS)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.NUMBER  ||  left.getType()!=  Token.THIS)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.NUMBER  ||  left.getType()!=  Token.THIS)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	17	None	replace
120	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()!=  MAX_FOLD_NUMBER)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()!=  MAX_FOLD_NUMBER)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()!=  MAX_FOLD_NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getDouble()!=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  case,  default,  or  	7	None	replace
121	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()  >=  MAX_FOLD_NUMBER)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()  >=  MAX_FOLD_NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getDouble()!=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  case,  default,  or  	7	None	replace
122	[BUG]  [BUGGY]  if  (left.getType()!=  Token.NUMBER  &&  left.getDouble()!=  MAX_FOLD_NUMBER)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.NUMBER  &&  left.getDouble()!=  MAX_FOLD_NUMBER)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.NUMBER  &&  left.getDouble()!=  MAX_FOLD_NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getDouble()!=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  case,  default,  or  	7	None	replace
123	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.THIS)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.THIS)  {	  if    (n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	19	None	replace
124	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NUMBER  &&  left.getDouble()  ==  MAX_FOLD_NUMBER)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (n.getType()  ==  Token.NUMBER  &&  left.getDouble()  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()  ==  Token.NUMBER  &&  left.getDouble()  ==  MAX_FOLD_NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getDouble()    ==    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  case,  default,  or  	5	None	replace
125	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()  <=  MAX_FOLD_NUMBER)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  &&  left.getDouble()  <=  MAX_FOLD_NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getDouble()    ==    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  case,  default,  or  	5	None	replace
126	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.UNKNOWN  &&  left.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.UNKNOWN  &&  left.getType()  ==  Token.THIS)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.UNKNOWN  &&  left.getType()  ==  Token.THIS)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	16	None	replace
127	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {	  if(left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
128	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.DOUBLE)  {	  if(left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
129	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETELEM)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(n.getType()  ==  Token.GETELEM)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(n.getType()  ==  Token.GETELEM)  {	  if(left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
130	[BUG]  [BUGGY]  if(left.getType()!=  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()!=  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()!=  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {	  if(left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
131	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.SETELEM)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.SETELEM)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.SETELEM)  {	  if(left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
132	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  left.getDouble()!=  0)  {  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  left.getDouble()!=  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.GETELEM  &&  left.getDouble()!=  0)  {	  if(left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
133	[BUG]  [BUGGY]  Node  leftVal  =  left.getNext()  -  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  left.getNext()  -  1;  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  left.getNext()  -  1;	  Node    leftVal    =    left.getNext();    	non-compiled	[CE]  orphaned  case	35	None	replace
134	[BUG]  [BUGGY]  Node  leftVal  =  left.getNext()  :  null;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  left.getNext()  :  null;  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  left.getNext()  :  null;	  Node    leftVal    =    left.getNext();    	non-compiled	[CE]  ';'  expected	35	None	replace
135	[BUG]  [BUGGY]  Node  leftVal  =  left.getNext()  +  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  left.getNext()  +  1;  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  left.getNext()  +  1;	  Node    leftVal    =    left.getNext();    	non-compiled	[CE]  orphaned  case	35	None	replace
136	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  &&  left.getType()  ==  Token.CATCH)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  &&  left.getType()  ==  Token.CATCH)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  &&  left.getType()  ==  Token.CATCH)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  case,  default,  or  	56	None	replace
137	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()!=  Token.CATCH)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()!=  Token.CATCH)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  left.getType()!=  Token.CATCH)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  case,  default,  or  	56	None	replace
138	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.CATCH  ||  left.getType()  ==  Token.NOT)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.CATCH  ||  left.getType()  ==  Token.NOT)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.CATCH  ||  left.getType()  ==  Token.NOT)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  case,  default,  or  	56	None	replace
139	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.CATCH)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (n.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.CATCH)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.CATCH)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  case,  default,  or  	56	None	replace
140	[BUG]  [BUGGY]  if  (left.getType()!=  Token.NUMBER  &&  left.getDouble()!=  0)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.NUMBER  &&  left.getDouble()!=  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.NUMBER  &&  left.getDouble()!=  0)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getDouble()!=    0)    {    	non-compiled	[CE]  case,  default,  or  	21	None	replace
141	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  left  =  n.getLastChild();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  left  =  n.getLastChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	53	None	replace
142	[BUG]  [BUGGY]  Node  left  =  leftVal.getFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  left  =  leftVal.getFirstChild();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  left  =  leftVal.getFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	53	None	replace
143	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  left  =  left.getFirstChild();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  left  =  left.getFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	53	None	replace
144	[BUG]  [BUGGY]  Node  left  =  n.removeFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  left  =  n.removeFirstChild();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  left  =  n.removeFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	53	None	replace
145	[BUG]  [BUGGY]  Node  left  =  parent.getFirstChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  left  =  parent.getFirstChild();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  left  =  parent.getFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	53	None	replace
146	[BUG]  [BUGGY]  Node  left  =  n.getNext();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  left  =  n.getNext();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  left  =  n.getNext();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	53	None	replace
147	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()!=  Token.GETELEM)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()!=  Token.GETELEM)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  left.getType()!=  Token.GETELEM)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	47	None	replace
148	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  &&  left.getType()  ==  Token.GETELEM)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  &&  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  &&  left.getType()  ==  Token.GETELEM)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	47	None	replace
149	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.GETELEM)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (n.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.GETELEM)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	47	None	replace
150	[BUG]  [BUGGY]  if  (left.getType()!=  Token.NOT  ||  left.getType()  ==  Token.GETELEM)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.NOT  ||  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.NOT  ||  left.getType()  ==  Token.GETELEM)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	47	None	replace
151	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  right.getType()  ==  Token.GETELEM)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  right.getType()  ==  Token.GETELEM)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  right.getType()  ==  Token.GETELEM)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	47	None	replace
152	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  &&  left.getDouble()!=  0)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  &&  left.getDouble()!=  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  &&  left.getDouble()!=  0)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getDouble()!=    0)    {    	non-compiled	[CE]  case,  default,  or  	14	None	replace
153	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getDouble()  >=  0)  {  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getDouble()  >=  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  left.getDouble()  >=  0)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getDouble()!=    0)    {    	non-compiled	[CE]  case,  default,  or  	14	None	replace
154	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	1	None	replace
155	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  &&  left.getDouble()!=  0)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  &&  left.getDouble()!=  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  &&  left.getDouble()!=  0)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getDouble()!=    0)    {    	non-compiled	[CE]  case,  default,  or  	46	None	replace
156	[BUG]  [BUGGY]  if  (left.getType()!=  Token.NOT  &&  left.getDouble()!=  0)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.NOT  &&  left.getDouble()!=  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.NOT  &&  left.getDouble()!=  0)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getDouble()!=    0)    {    	non-compiled	[CE]  case,  default,  or  	46	None	replace
157	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getDouble()  >=  0)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getDouble()  >=  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  left.getDouble()  >=  0)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getDouble()!=    0)    {    	non-compiled	[CE]  case,  default,  or  	46	None	replace
158	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.DOUBLE)  {	  if    (n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	15	None	replace
159	[BUG]  [BUGGY]  Double  leftVal  =  left.getNumber();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Double  leftVal  =  left.getNumber();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Double  leftVal  =  left.getNumber();	  Double    leftVal    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	43	None	replace
160	[BUG]  [BUGGY]  Double  leftVal  =  left.getDouble()  -  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Double  leftVal  =  left.getDouble()  -  1;  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Double  leftVal  =  left.getDouble()  -  1;	  Double    leftVal    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	43	None	replace
161	[BUG]  [BUGGY]  Double  leftVal  =  left.getDouble()  +  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Double  leftVal  =  left.getDouble()  +  1;  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Double  leftVal  =  left.getDouble()  +  1;	  Double    leftVal    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	43	None	replace
162	[BUG]  [BUGGY]  Double  leftVal  =  left.getDouble()  /  2;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Double  leftVal  =  left.getDouble()  /  2;  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Double  leftVal  =  left.getDouble()  /  2;	  Double    leftVal    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	43	None	replace
163	[BUG]  [BUGGY]  Double  leftVal  =  n.getDouble();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Double  leftVal  =  n.getDouble();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Double  leftVal  =  n.getDouble();	  Double    leftVal    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	43	None	replace
164	[BUG]  [BUGGY]  Double  leftVal  =  left.getIntValue();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Double  leftVal  =  left.getIntValue();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Double  leftVal  =  left.getIntValue();	  Double    leftVal    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	43	None	replace
165	[BUG]  [BUGGY]  if  (n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.DO)  {	  if    (left.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	28	None	replace
166	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.DOUBLE)  {	  if    (n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	25	None	replace
167	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  &&  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  &&  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  &&  left.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	30	None	replace
168	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()!=  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()!=  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  left.getType()!=  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	30	None	replace
169	[BUG]  [BUGGY]  if  (left.getType()!=  Token.NOT  ||  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.NOT  ||  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.NOT  ||  left.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	30	None	replace
170	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (n.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	30	None	replace
171	[BUG]  [BUGGY]  if  (n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.THIS)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.THIS)  {	  if    (left.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	18	None	replace
172	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NEW  &&  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NEW  &&  left.getType()  ==  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NEW  &&  left.getType()  ==  Token.DO)  {	  if    (left.getType()    ==    Token.NEW    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	41	None	replace
173	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NEW  ||  left.getType()!=  Token.DO)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NEW  ||  left.getType()!=  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NEW  ||  left.getType()!=  Token.DO)  {	  if    (left.getType()    ==    Token.NEW    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	41	None	replace
174	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.NEW)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.NEW)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  left.getType()  ==  Token.NEW)  {	  if    (left.getType()    ==    Token.NEW    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	41	None	replace
175	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  &&  left.getType()  ==  Token.FALSE)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  &&  left.getType()  ==  Token.FALSE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  &&  left.getType()  ==  Token.FALSE)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  case,  default,  or  	55	None	replace
176	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()!=  Token.FALSE)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getType()!=  Token.FALSE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  left.getType()!=  Token.FALSE)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  case,  default,  or  	55	None	replace
177	[BUG]  [BUGGY]  if  (left.getType()!=  Token.NOT  ||  left.getType()  ==  Token.FALSE)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.NOT  ||  left.getType()  ==  Token.FALSE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.NOT  ||  left.getType()  ==  Token.FALSE)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  case,  default,  or  	55	None	replace
178	[BUG]  [BUGGY]  if  (n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	24	None	replace
179	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.NUMBER)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.NUMBER)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  case,  default,  or  	44	None	replace
180	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  &&  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  case,  default,  or  	44	None	replace
181	[BUG]  [BUGGY]  if  (left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  case,  default,  or  	44	None	replace
182	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.FUNCTION)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	2	None	replace
183	[BUG]  [BUGGY]  Node  leftVal  =  left.getfirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  left.getfirstChild();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  left.getfirstChild();	  Node    leftVal    =    left.getLastChild();    	non-compiled	[CE]  orphaned  case	36	None	replace
184	[BUG]  [BUGGY]  if  (left.getType()  >=  Token.NUMBER  ||  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  >=  Token.NUMBER  ||  left.getType()  ==  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  >=  Token.NUMBER  ||  left.getType()  ==  Token.DO)  {	  if    (left.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	28	None	replace
185	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.DOUBLE  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.DOUBLE  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.DOUBLE  ||  left.getType()  ==  Token.NUMBER)  {	  if    (n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	25	None	replace
186	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NULL  ||  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NULL  ||  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NULL  ||  left.getType()  ==  Token.DOUBLE)  {	  if    (n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	25	None	replace
187	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.NEW)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.NEW)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.NEW)  {	  if    (left.getType()    ==    Token.NEW    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	50	None	replace
188	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.NEW)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.NEW)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.NEW)  {	  if    (left.getType()    ==    Token.NEW    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	50	None	replace
189	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getFloat()  ==  0)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getFloat()  ==  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  left.getFloat()  ==  0)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getDouble()    ==    0)    {    	non-compiled	[CE]  case,  default,  or  	13	None	replace
190	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getChildCount()  ==  0)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getChildCount()  ==  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  left.getChildCount()  ==  0)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getDouble()    ==    0)    {    	non-compiled	[CE]  case,  default,  or  	13	None	replace
191	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getInt()  ==  0)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NUMBER  &&  left.getInt()  ==  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  &&  left.getInt()  ==  0)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getDouble()    ==    0)    {    	non-compiled	[CE]  case,  default,  or  	20	None	replace
192	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.DOUBLE  ||  left.getType()  ==  Token.NOT)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.DOUBLE  ||  left.getType()  ==  Token.NOT)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.DOUBLE  ||  left.getType()  ==  Token.NOT)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	30	None	replace
193	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  right.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  right.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  right.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	30	None	replace
194	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FOR  &&  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.FOR  &&  left.getType()  ==  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.FOR  &&  left.getType()  ==  Token.DO)  {	  if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	9	None	replace
195	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.DO)  {	  if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	9	None	replace
196	[BUG]  [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.GETPROP)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.GETPROP)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.GETPROP)  {	  if(left.getType()    ==    Token.DO    ||    left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	58	None	replace
197	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  left  =  n.getFirstChild().getNext();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  left  =  n.getFirstChild().getNext();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	53	None	replace
198	[BUG]  [BUGGY]  Node  left  =  node.getFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  left  =  node.getFirstChild();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  left  =  node.getFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	53	None	replace
199	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getFloat()!=  0)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getFloat()!=  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  left.getFloat()!=  0)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getDouble()!=    0)    {    	non-compiled	[CE]  case,  default,  or  	14	None	replace
200	[BUG]  [BUGGY]  if  (left.getType()!=  Token.FUNCTION  ||  left.getDouble()  ==  0)  {  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.FUNCTION  ||  left.getDouble()  ==  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.FUNCTION  ||  left.getDouble()  ==  0)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getDouble()!=    0)    {    	non-compiled	[CE]  case,  default,  or  	14	None	replace
201	[BUG]  [BUGGY]  Double  nVal  =  left.getIntValue();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Double  nVal  =  left.getIntValue();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Double  nVal  =  left.getIntValue();	  Double    nVal    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	40	None	replace
202	[BUG]  [BUGGY]  Double  nVal  =  left.getNode();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Double  nVal  =  left.getNode();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Double  nVal  =  left.getNode();	  Double    nVal    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	40	None	replace
203	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getDouble()  ==  0)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getDouble()  ==  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.STRING  ||  left.getDouble()  ==  0)  {	  if(left.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  case,  default,  or  	45	None	replace
204	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getDouble()!=  0)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getDouble()!=  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.STRING  ||  left.getDouble()!=  0)  {	  if(left.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  case,  default,  or  	45	None	replace
205	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.DO)  {	  if(left.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  case,  default,  or  	45	None	replace
206	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NULL  ||  left.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NULL  ||  left.getType()  ==  Token.THIS)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NULL  ||  left.getType()  ==  Token.THIS)  {	  if    (n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	19	None	replace
207	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NEW)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NEW)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NEW)  {	  if    (left.getType()    ==    Token.NEW    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	41	None	replace
208	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	22	None	replace
209	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	32	None	replace
210	[BUG]  [BUGGY]  if  (left.getType()  >=  Token.NUMBER  ||  left.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  >=  Token.NUMBER  ||  left.getType()  ==  Token.THIS)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  >=  Token.NUMBER  ||  left.getType()  ==  Token.THIS)  {	  if    (left.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	18	None	replace
211	[BUG]  [BUGGY]  Node  leftVal  =  n.removeFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  n.removeFirstChild();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  n.removeFirstChild();	  Node    leftVal    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	37	None	replace
212	[BUG]  [BUGGY]  Node  leftVal  =  n.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  n.getFirstChild().getNext();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  n.getFirstChild().getNext();	  Node    leftVal    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	37	None	replace
213	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getDouble()  ==  0)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getDouble()  ==  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.NAME  ||  left.getDouble()  ==  0)  {	  if(left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  case,  default,  or  	11	None	replace
214	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.FALSE)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.FALSE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.FALSE)  {	  if(left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  case,  default,  or  	11	None	replace
215	[BUG]  [BUGGY]  Node  leftVal  =  leftVal.getNext();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  leftVal.getNext();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  leftVal.getNext();	  Node    leftVal    =    n.getNext();    	non-compiled	[CE]  orphaned  case	52	None	replace
216	[BUG]  [BUGGY]  Node  leftVal  =  n.getParent();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  n.getParent();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  n.getParent();	  Node    leftVal    =    n.getNext();    	non-compiled	[CE]  orphaned  case	52	None	replace
217	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  right.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  right.getType()  ==  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  right.getType()  ==  Token.DO)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	31	None	replace
218	[BUG]  [BUGGY]  Node  leftVal  =  left.getPrevious();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  left.getPrevious();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  left.getPrevious();	  Node    leftVal    =    left.getNext();    	non-compiled	[CE]  orphaned  case	35	None	replace
219	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getDouble()  ==  MAX_FOLD_NUMBER)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getDouble()  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  left.getDouble()  ==  MAX_FOLD_NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getDouble()    ==    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  case,  default,  or  	5	None	replace
220	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NULL  &&  left.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NULL  &&  left.getType()  ==  Token.THIS)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NULL  &&  left.getType()  ==  Token.THIS)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	16	None	replace
221	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.THIS)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.THIS)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	16	None	replace
222	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.DOUBLE  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.DOUBLE  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.DOUBLE  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	51	None	replace
223	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	51	None	replace
224	[BUG]  [BUGGY]  Node  leftVal  =  left.cloneTree();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  left.cloneTree();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  left.cloneTree();	  Node    leftVal    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	34	None	replace
225	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NULL  &&  left.getType()  ==  Token.DO)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NULL  &&  left.getType()  ==  Token.DO)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NULL  &&  left.getType()  ==  Token.DO)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	26	None	replace
226	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NEW  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NEW  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NEW  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	4	None	replace
227	[BUG]  [BUGGY]  double  numValue  =  left.getIntValue();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  double  numValue  =  left.getIntValue();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	double  numValue  =  left.getIntValue();	  double    numValue    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	38	None	replace
228	[BUG]  [BUGGY]  double  numValue  =  left.getNode();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  double  numValue  =  left.getNode();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	double  numValue  =  left.getNode();	  double    numValue    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	38	None	replace
229	[BUG]  [BUGGY]  Node  leftVal  =  node.getLastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  node.getLastChild();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  node.getLastChild();	  Node    leftVal    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	42	None	replace
230	[BUG]  [BUGGY]  int  numValue  =  left.getIntValue();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  int  numValue  =  left.getIntValue();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	int  numValue  =  left.getIntValue();	  int    numValue    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	39	None	replace
231	[BUG]  [BUGGY]  Double  leftVal  =  leftVal.getDouble();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Double  leftVal  =  leftVal.getDouble();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Double  leftVal  =  leftVal.getDouble();	  Double    leftVal    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	43	None	replace
232	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getDouble()  ==  0)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getDouble()  ==  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.GETELEM  ||  left.getDouble()  ==  0)  {	  if(left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
233	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.NOT)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.NOT)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.NOT)  {	  if(left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
234	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.NAME)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.NAME)  {	  if(left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
235	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getDouble()!=  0)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getDouble()!=  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.GETELEM  ||  left.getDouble()!=  0)  {	  if(left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
236	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  right.getType()  ==  Token.CATCH)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  right.getType()  ==  Token.CATCH)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  right.getType()  ==  Token.CATCH)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  case,  default,  or  	56	None	replace
237	[BUG]  [BUGGY]  if  (left.getType()!=  Token.NOT  ||  left.getType()  ==  Token.CATCH)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.NOT  ||  left.getType()  ==  Token.CATCH)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.NOT  ||  left.getType()  ==  Token.CATCH)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  case,  default,  or  	56	None	replace
238	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  right.getType()  ==  Token.FALSE)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  right.getType()  ==  Token.FALSE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  right.getType()  ==  Token.FALSE)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  case,  default,  or  	55	None	replace
239	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.NEW)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.NEW)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.DO  ||  left.getType()  ==  Token.NEW)  {	  if    (left.getType()    ==    Token.NEW    ||    left.getType()    ==    Token.DO)    {    	non-compiled	[CE]  case,  default,  or  	41	None	replace
240	[BUG]  [BUGGY]  if(left.getType()!=  Token.GETELEM)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()!=  Token.GETELEM)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()!=  Token.GETELEM)  {	  if(left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
241	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.BLOCK)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.BLOCK)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.BLOCK)  {	  if(left.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  case,  default,  or  	10	None	replace
242	[BUG]  [BUGGY]  if  (left.getType()!=  Token.NUMBER  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.NUMBER  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.NUMBER  ||  left.getType()!=  Token.FUNCTION)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	2	None	replace
243	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getFirstChild()  ==  0)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getFirstChild()  ==  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.NUMBER  &&  left.getFirstChild()  ==  0)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getDouble()    ==    0)    {    	non-compiled	[CE]  case,  default,  or  	20	None	replace
244	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getChildCount()  ==  1)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getChildCount()  ==  1)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.NUMBER  &&  left.getChildCount()  ==  1)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getDouble()    ==    0)    {    	non-compiled	[CE]  case,  default,  or  	20	None	replace
245	[BUG]  [BUGGY]  Double  nVal  =  n.getDouble();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Double  nVal  =  n.getDouble();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Double  nVal  =  n.getDouble();	  Double    nVal    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	40	None	replace
246	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getChar()!=  0)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getChar()!=  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  left.getChar()!=  0)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getDouble()!=    0)    {    	non-compiled	[CE]  case,  default,  or  	14	None	replace
247	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getDouble()!=  1)  {  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getDouble()!=  1)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  left.getDouble()!=  1)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getDouble()!=    0)    {    	non-compiled	[CE]  case,  default,  or  	14	None	replace
248	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getChildCount()!=  0)  {  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getChildCount()!=  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  left.getChildCount()!=  0)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getDouble()!=    0)    {    	non-compiled	[CE]  case,  default,  or  	14	None	replace
249	[BUG]  [BUGGY]  int  numValue  =  left.getLowerBound();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  int  numValue  =  left.getLowerBound();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	int  numValue  =  left.getLowerBound();	  int    numValue    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	39	None	replace
250	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	22	None	replace
251	[BUG]  [BUGGY]  Node  leftVal  =  n.getDouble();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  n.getDouble();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  n.getDouble();	  Node    leftVal    =    n.getNext();    	non-compiled	[CE]  orphaned  case	52	None	replace
252	[BUG]  [BUGGY]  Node  leftVal  =  n.getPrevious();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  n.getPrevious();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  n.getPrevious();	  Node    leftVal    =    n.getNext();    	non-compiled	[CE]  orphaned  case	52	None	replace
253	[BUG]  [BUGGY]  Node  left  =  n.cloneTree();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  left  =  n.cloneTree();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  left  =  n.cloneTree();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	53	None	replace
254	[BUG]  [BUGGY]  if  (left.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {	  if    (left.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  case,  default,  or  	3	None	replace
255	[BUG]  [BUGGY]  Node  leftVal  =  n.cloneTree();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  n.cloneTree();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  n.cloneTree();	  Node    leftVal    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	42	None	replace
256	[BUG]  [BUGGY]  Node  leftVal  =  parent.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  parent.getLastChild();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  parent.getLastChild();	  Node    leftVal    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	42	None	replace
257	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getDouble()  ==  MAX_FOLD_NUMBER)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getDouble()  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getDouble()  ==  MAX_FOLD_NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getDouble()    ==    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  case,  default,  or  	5	None	replace
258	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getDouble()  >  MAX_FOLD_NUMBER)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getDouble()  >  MAX_FOLD_NUMBER)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.NUMBER  &&  left.getDouble()  >  MAX_FOLD_NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    &&    left.getDouble()    ==    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  case,  default,  or  	5	None	replace
259	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()  >  MAX_FOLD_NUMBER)  {  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()  >  MAX_FOLD_NUMBER)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NUMBER  ||  left.getDouble()  >  MAX_FOLD_NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    left.getDouble()!=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  case,  default,  or  	7	None	replace
260	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getDouble()!=  1)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.NOT  ||  left.getDouble()!=  1)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.NOT  ||  left.getDouble()!=  1)  {	  if    (left.getType()    ==    Token.NOT    ||    left.getDouble()!=    0)    {    	non-compiled	[CE]  case,  default,  or  	46	None	replace
261	[BUG]  [BUGGY]  double  numValue  =  left.getLowerBound();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  double  numValue  =  left.getLowerBound();  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	double  numValue  =  left.getLowerBound();	  double    numValue    =    left.getDouble();    	non-compiled	[CE]  orphaned  case	38	None	replace
262	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  case,  default,  or  	45	None	replace
263	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.GETPROP)  {  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.GETPROP)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.GETPROP)  {	  if(left.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  case,  default,  or  	45	None	replace
264	[BUG]  [BUGGY]  Node  leftVal  =  left.replaceChild(n,  new  Node(Token.FALSE));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  left.replaceChild(n,  new  Node(Token.FALSE));  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  left.replaceChild(n,  new  Node(Token.FALSE));	  Node    leftVal    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	34	None	replace
265	[BUG]  [BUGGY]  Node  leftVal  =  left.replaceChild(n,  new  Node(Token.TRUE));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  Node  leftVal  =  left.replaceChild(n,  new  Node(Token.TRUE));  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	Node  leftVal  =  left.replaceChild(n,  new  Node(Token.TRUE));	  Node    leftVal    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	34	None	replace
266	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getChar()  ==  0)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()  ==  Token.FUNCTION  ||  left.getChar()  ==  0)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()  ==  Token.FUNCTION  ||  left.getChar()  ==  0)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getDouble()    ==    0)    {    	non-compiled	[CE]  case,  default,  or  	13	None	replace
267	[BUG]  [BUGGY]  if(left.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.DOUBLE)  {  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.DOUBLE)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.DOUBLE)  {	  if    (left.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.DOUBLE)    {    	non-compiled	[CE]  case,  default,  or  	24	None	replace
268	[BUG]  [BUGGY]  if  (left.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if  (left.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.THIS)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if  (left.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.THIS)  {	  if    (left.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	18	None	replace
269	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FOR  &&  left.getType()  ==  Token.THIS)  {  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:        [BUGGY]  if(left.getType()  ==  Token.FOR  &&  left.getType()  ==  Token.THIS)  {  [BUGGY]      double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896257	343	343	3	replace	if(left.getType()  ==  Token.FOR  &&  left.getType()  ==  Token.THIS)  {	  if    (left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.THIS)    {    	non-compiled	[CE]  case,  default,  or  	49	None	replace
